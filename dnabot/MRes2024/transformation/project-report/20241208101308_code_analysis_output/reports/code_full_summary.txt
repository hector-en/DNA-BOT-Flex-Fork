Table of Contents (TOC):
1. 20241208101247_code_analysis_output/reports/code_full_summary.txt
2. 20241208101247_code_analysis_output/reports/code_highlevel_summary.txt
3. 20241208101247_code_analysis_output/reports/code_pycache_summary.txt
4. 20241208101247_code_analysis_output/reports/output.log
5. configs/assembly.yaml
6. configs/clip.yaml
7. configs/purification.yaml
8. configs/robot_config.yaml
9. configs/transformation.yaml
10. custom/clip/4ti0136_96_wellplate_2200ul.json
11. custom/clip/4ti0960rig_96_wellplate_200ul.json
12. input_scripts/1_MRes_clip_Thermocycler_Gen2_APIv2_19.py
13. input_scripts/1_clip_ot2_Thermocycler_APIv2.8.py
14. input_scripts/1_clip_ot2_Thermocycler_Gen2_APIv2_19.py
15. input_scripts/2_MRes_purification_ot2_APIv2_19.py
16. input_scripts/3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19.py
17. input_scripts/3_assembly_ot2_Thermocycler_Gen1_APIv2_19.py
18. input_scripts/3_assembly_ot2_Thermocycler_Gen2_APIv2_19.py
19. input_scripts/4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py
20. input_scripts/4_transformation_ot2_Thermocycler_Gen1_12wellplate_APIv2_19.py
21. input_scripts/4_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py
22. logs/diffs_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log
23. logs/diffs_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log
24. logs/diffs_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log
25. logs/diffs_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.log
26. pipeline.py
27. templates/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py
28. templates/first_template_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_055554.py
29. templates/first_template_purification_2_MRes_purification_ot2_APIv2_19_20241208_055554.py
30. templates/first_template_transformation_4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19_20241208_055554.py
31. templates/working_template_clip.py
32. transform.py
33. transformed_scripts/transformed_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py
34. transformed_scripts/transformed_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py
35. transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py
36. transformed_scripts/transformed_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.py

===================================

No .ipynb files found for conversion.
No .pptx files found for conversion.
No .pdf files found for conversion.
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_full_summary.txt ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_full_summary.txt:
This file is a empty with a size of 0 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_full_summary.txt:

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_highlevel_summary.txt ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_highlevel_summary.txt:
This file is a empty with a size of 0 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_highlevel_summary.txt:

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_pycache_summary.txt ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_pycache_summary.txt:
This file is a empty with a size of 0 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/code_pycache_summary.txt:

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/output.log ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/output.log:
This file is a ASCII text with a size of 216 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/20241208101247_code_analysis_output/reports/output.log:
jupyter-nbconvert is not installed. Installing...
ERROR: Operation cancelled by user

[notice] A new release of pip is available: 24.0 -> 24.3.1
[notice] To update, run: /usr/bin/python3 -m pip install --upgrade pip

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/assembly.yaml ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/assembly.yaml:
This file is a ASCII text with a size of 3718 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/assembly.yaml:
reaction: assembly
deckSetup:
  thermocycler:
    name:
      "thermocyclerModuleV2": "thermocyclerModuleV2"
    lid_temperature: 105
    block_temperature: 4
    pcr_profile:
      steps:
        - {temperature: 37, hold_time_minutes: 2}
        - {temperature: 20, hold_time_minutes: 1}
      repetitions: 20
    post_pcr:
      temperature: 60
      hold_time_minutes: 10

  magnetic_block:
      name:
        "magneticModuleV1": "magneticBlockV1"
      slot:
        "6": "B2"

  tuberacks:
    MASTER_MIX_WELL:
      slot:
        "1": "A1"
    WATER_WELL: 
      slot:
        "2": "A2"
  tipracks:
    slot:
      "3": "A3"
  trash:
    slot:
      "12": "B1"
    dropTipLocation:
      "12": "B1"
    setup_code: "trash = protocol.load_labware('opentrons_1_trash_1100ml_fixed', '{slot}')"

variable_ids:
# OT-2 to Flex Variable Mapping (Bidirectional)
  "p20_single": "flex_1channel_50"
  "p300_multi": "flex_1channel_1000" # old flex has multi channel, but new has one channel
  #new flex onlz has the 8 channel peppettes with 50ul, do not have multichannel of 1000ul
  "mag_deck": "flex_magnetic_block"
  "tiprack_20ul": "tiprack_50"
  "tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "plate_96": "clip_plate"
  "mix_plate": "flex_mix_plate"
  "agar_plate": "flex_agar_plate"
  "12_reservoir_21000ul": "flex_12_reservoir_15ml"
  "96_deepwellplate_2ml": "flex_deepwell_plate"

labware:
  # OT-2 to Flex Labware Mapping (Bidirectional)
  #tube racks
  "24_tuberack_1500ul": "opentrons_24_tuberack_nest_1.5ml_snapcap"
  # Tip racks
  "opentrons_96_tiprack_20ul": "opentrons_flex_96_tiprack_50ul"
  "opentrons_96_tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "opentrons_24_tuberack_nest_1.5ml_snapcap": "opentrons_24_tuberack_nest_1.5ml_snapcap"

  # Well plates
  "nest_96_wellplate_100ul_pcr_full_skirt": "nest_96_wellplate_100ul_pcr_full_skirt"
  "corning_96_wellplate_360ul_flat": "corning_96_wellplate_360ul_flat"
  "biorad_96_wellplate_200ul_pcr": "armadillo_96_wellplate_200ul_pcr_full_skirt"
  # Reservoirs
  "usascientific_12_reservoir_22ml": "nest_12_reservoir_15ml"
  "agilent_1_reservoir_290ml": "axygen_1_reservoir_90ml"
  #trash  
  "opentrons_1_trash_1100ml_fixed": "opentrons_1_trash_1100ml_fixed"

pipettes:
  # OT-2 to Flex Pipette Mapping (Bidirectional)
  "p300_single_gen2": "flex_1channel_1000"
  "p1000_single_gen2": "flex_1channel_1000"
  "p20_single_gen2": "flex_1channel_50"
  "p300_multi_gen2": "flex_8channel_1000"
  "p20_multi_gen2": "flex_8channel_50"


modules:
  # OT-2 to Flex Modules (Bidirectional)
  "heaterShakerModuleV1": "heaterShakerModuleV1"


commands:
  # Update command syntax as needed
  mix:
    from: "pipette.mix"
    to: "pipette.mix"
  aspirate:
    from: "pipette.aspirate"
    to: "pipette.aspirate"
  dispense:
    from: "pipette.dispense"
    to: "pipette.dispense"
  pick_up_tip:
    from: "pipette.pick_up_tip"
    to: "pipette.pick_up_tip"
  set_block_temperature:
    from: "tc_mod.set_block_temperature(temperature=4)"
    to: "tc_mod.set_block_temperature(temperature={block_temperature})"
  set_lid_temperature:
    from: "tc_mod.set_lid_temperature(37)"
    to: "tc_mod.set_lid_temperature({lid_temperature})"
  drop_tip:
    from: "pipette.drop_tip()"
    to: "pipette.drop_tip({trash_variable}['{dropTipLocation}'])"
  move_labware:
    from: "protocol.move_labware"
    to: "protocol.move_labware"
    insert_after: "protocol.load_instrument"
    code: "protocol.comment('Gripper required for labware transfer')"

customFiles:
  - path: "/custom/clip/4ti0136_96_wellplate_2200ul.json"
    variable: "4ti0136_96_wellplate_2200ul"
  - path: "/custom/clip/4ti0960rig_96_wellplate_200ul.json"
    variable: "4ti0960rig_96_wellplate_200ul"
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/clip.yaml ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/clip.yaml:
This file is a ASCII text with a size of 3714 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/clip.yaml:
reaction: clip
deckSetup:
  thermocycler:
    name:
      "thermocyclerModuleV2": "thermocyclerModuleV2"
    lid_temperature: 105
    block_temperature: 4
    pcr_profile:
      steps:
        - {temperature: 37, hold_time_minutes: 2}
        - {temperature: 20, hold_time_minutes: 1}
      repetitions: 20
    post_pcr:
      temperature: 60
      hold_time_minutes: 10

  magnetic_block:
      name:
        "magneticModuleV1": "magneticBlockV1"
      slot:
        "6": "B2"

  tuberacks:
    MASTER_MIX_WELL:
      slot:
        "1": "A1"
    WATER_WELL: 
      slot:
        "2": "A2"
  tipracks:
    slot:
      "3": "A3"
  trash:
    slot:
      "12": "B1"
    dropTipLocation:
      "12": "B1"
    setup_code: "trash = protocol.load_labware('opentrons_1_trash_1100ml_fixed', '{slot}')"

variable_ids:
# OT-2 to Flex Variable Mapping (Bidirectional)
  "p20_single": "flex_1channel_50"
  "p300_multi": "flex_1channel_1000" # old flex has multi channel, but new has one channel
  #new flex onlz has the 8 channel peppettes with 50ul, do not have multichannel of 1000ul
  "mag_deck": "flex_magnetic_block"
  "tiprack_20ul": "tiprack_50"
  "tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "plate_96": "clip_plate"
  "mix_plate": "flex_mix_plate"
  "agar_plate": "flex_agar_plate"
  "12_reservoir_21000ul": "flex_12_reservoir_15ml"
  "96_deepwellplate_2ml": "flex_deepwell_plate"

labware:
  # OT-2 to Flex Labware Mapping (Bidirectional)
  #tube racks
  "24_tuberack_1500ul": "opentrons_24_tuberack_nest_1.5ml_snapcap"
  # Tip racks
  "opentrons_96_tiprack_20ul": "opentrons_flex_96_tiprack_50ul"
  "opentrons_96_tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "opentrons_24_tuberack_nest_1.5ml_snapcap": "opentrons_24_tuberack_nest_1.5ml_snapcap"

  # Well plates
  "nest_96_wellplate_100ul_pcr_full_skirt": "nest_96_wellplate_100ul_pcr_full_skirt"
  "corning_96_wellplate_360ul_flat": "corning_96_wellplate_360ul_flat"
  "biorad_96_wellplate_200ul_pcr": "armadillo_96_wellplate_200ul_pcr_full_skirt"
  # Reservoirs
  "usascientific_12_reservoir_22ml": "nest_12_reservoir_15ml"
  "agilent_1_reservoir_290ml": "axygen_1_reservoir_90ml"
  #trash  
  "opentrons_1_trash_1100ml_fixed": "opentrons_1_trash_1100ml_fixed"

pipettes:
  # OT-2 to Flex Pipette Mapping (Bidirectional)
  "p300_single_gen2": "flex_1channel_1000"
  "p1000_single_gen2": "flex_1channel_1000"
  "p20_single_gen2": "flex_1channel_50"
  "p300_multi_gen2": "flex_8channel_1000"
  "p20_multi_gen2": "flex_8channel_50"


modules:
  # OT-2 to Flex Modules (Bidirectional)
  "heaterShakerModuleV1": "heaterShakerModuleV1"


commands:
  # Update command syntax as needed
  mix:
    from: "pipette.mix"
    to: "pipette.mix"
  aspirate:
    from: "pipette.aspirate"
    to: "pipette.aspirate"
  dispense:
    from: "pipette.dispense"
    to: "pipette.dispense"
  pick_up_tip:
    from: "pipette.pick_up_tip"
    to: "pipette.pick_up_tip"
  set_block_temperature:
    from: "tc_mod.set_block_temperature(temperature=4)"
    to: "tc_mod.set_block_temperature(temperature={block_temperature})"
  set_lid_temperature:
    from: "tc_mod.set_lid_temperature(37)"
    to: "tc_mod.set_lid_temperature({lid_temperature})"
  drop_tip:
    from: "pipette.drop_tip()"
    to: "pipette.drop_tip({trash_variable}['{dropTipLocation}'])"
  move_labware:
    from: "protocol.move_labware"
    to: "protocol.move_labware"
    insert_after: "protocol.load_instrument"
    code: "protocol.comment('Gripper required for labware transfer')"

customFiles:
  - path: "/custom/clip/4ti0136_96_wellplate_2200ul.json"
    variable: "4ti0136_96_wellplate_2200ul"
  - path: "/custom/clip/4ti0960rig_96_wellplate_200ul.json"
    variable: "4ti0960rig_96_wellplate_200ul"
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/purification.yaml ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/purification.yaml:
This file is a ASCII text with a size of 3722 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/purification.yaml:
reaction: purification
deckSetup:
  thermocycler:
    name:
      "thermocyclerModuleV2": "thermocyclerModuleV2"
    lid_temperature: 105
    block_temperature: 4
    pcr_profile:
      steps:
        - {temperature: 37, hold_time_minutes: 2}
        - {temperature: 20, hold_time_minutes: 1}
      repetitions: 20
    post_pcr:
      temperature: 60
      hold_time_minutes: 10

  magnetic_block:
      name:
        "magneticModuleV1": "magneticBlockV1"
      slot:
        "6": "B2"

  tuberacks:
    MASTER_MIX_WELL:
      slot:
        "1": "A1"
    WATER_WELL: 
      slot:
        "2": "A2"
  tipracks:
    slot:
      "3": "A3"
  trash:
    slot:
      "12": "B1"
    dropTipLocation:
      "12": "B1"
    setup_code: "trash = protocol.load_labware('opentrons_1_trash_1100ml_fixed', '{slot}')"

variable_ids:
# OT-2 to Flex Variable Mapping (Bidirectional)
  "p20_single": "flex_1channel_50"
  "p300_multi": "flex_1channel_1000" # old flex has multi channel, but new has one channel
  #new flex onlz has the 8 channel peppettes with 50ul, do not have multichannel of 1000ul
  "mag_deck": "flex_magnetic_block"
  "tiprack_20ul": "tiprack_50"
  "tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "plate_96": "clip_plate"
  "mix_plate": "flex_mix_plate"
  "agar_plate": "flex_agar_plate"
  "12_reservoir_21000ul": "flex_12_reservoir_15ml"
  "96_deepwellplate_2ml": "flex_deepwell_plate"

labware:
  # OT-2 to Flex Labware Mapping (Bidirectional)
  #tube racks
  "24_tuberack_1500ul": "opentrons_24_tuberack_nest_1.5ml_snapcap"
  # Tip racks
  "opentrons_96_tiprack_20ul": "opentrons_flex_96_tiprack_50ul"
  "opentrons_96_tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "opentrons_24_tuberack_nest_1.5ml_snapcap": "opentrons_24_tuberack_nest_1.5ml_snapcap"

  # Well plates
  "nest_96_wellplate_100ul_pcr_full_skirt": "nest_96_wellplate_100ul_pcr_full_skirt"
  "corning_96_wellplate_360ul_flat": "corning_96_wellplate_360ul_flat"
  "biorad_96_wellplate_200ul_pcr": "armadillo_96_wellplate_200ul_pcr_full_skirt"
  # Reservoirs
  "usascientific_12_reservoir_22ml": "nest_12_reservoir_15ml"
  "agilent_1_reservoir_290ml": "axygen_1_reservoir_90ml"
  #trash  
  "opentrons_1_trash_1100ml_fixed": "opentrons_1_trash_1100ml_fixed"

pipettes:
  # OT-2 to Flex Pipette Mapping (Bidirectional)
  "p300_single_gen2": "flex_1channel_1000"
  "p1000_single_gen2": "flex_1channel_1000"
  "p20_single_gen2": "flex_1channel_50"
  "p300_multi_gen2": "flex_8channel_1000"
  "p20_multi_gen2": "flex_8channel_50"


modules:
  # OT-2 to Flex Modules (Bidirectional)
  "heaterShakerModuleV1": "heaterShakerModuleV1"


commands:
  # Update command syntax as needed
  mix:
    from: "pipette.mix"
    to: "pipette.mix"
  aspirate:
    from: "pipette.aspirate"
    to: "pipette.aspirate"
  dispense:
    from: "pipette.dispense"
    to: "pipette.dispense"
  pick_up_tip:
    from: "pipette.pick_up_tip"
    to: "pipette.pick_up_tip"
  set_block_temperature:
    from: "tc_mod.set_block_temperature(temperature=4)"
    to: "tc_mod.set_block_temperature(temperature={block_temperature})"
  set_lid_temperature:
    from: "tc_mod.set_lid_temperature(37)"
    to: "tc_mod.set_lid_temperature({lid_temperature})"
  drop_tip:
    from: "pipette.drop_tip()"
    to: "pipette.drop_tip({trash_variable}['{dropTipLocation}'])"
  move_labware:
    from: "protocol.move_labware"
    to: "protocol.move_labware"
    insert_after: "protocol.load_instrument"
    code: "protocol.comment('Gripper required for labware transfer')"

customFiles:
  - path: "/custom/clip/4ti0136_96_wellplate_2200ul.json"
    variable: "4ti0136_96_wellplate_2200ul"
  - path: "/custom/clip/4ti0960rig_96_wellplate_200ul.json"
    variable: "4ti0960rig_96_wellplate_200ul"
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/robot_config.yaml ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/robot_config.yaml:
This file is a ASCII text with a size of 1284 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/robot_config.yaml:
robot_settings:
  flex:
    robot_model: "Flex"
    calibrations:
      belt:
        x_axis_belt_tension: 120.0
        y_axis_belt_tension: 130.0
      deck:
        A1: {x: 12.5, y: 9.0, z: 4.0}
        B1: {x: 25.0, y: 9.0, z: 4.0}
        C1: {x: 37.5, y: 9.0, z: 4.0}
        A3: {x: 50.0, y: 20.0, z: 0.0}  # Trash location for Flex
    settings:
      default_tip_rack: "opentrons_flex_96_tiprack_50ul"
      max_pipette_speed: 300  # mm/s
      gantry_speed: 500  # mm/s
      gripper_required: true  # For labware movement
  ot2:
    robot_model: "OT-2"
    calibrations:
      belt: {}
      deck:
        A1: {x: 12.5, y: 9.0, z: 4.0}
        B1: {x: 25.0, y: 9.0, z: 4.0}
        C1: {x: 37.5, y: 9.0, z: 4.0}
        12: {x: 100.0, y: 50.0, z: 0.0}  # Trash location for OT-2
    settings:
      default_tip_rack: "opentrons_96_tiprack_300ul"
      max_pipette_speed: 200  # mm/s
      gantry_speed: 400  # mm/s
      gripper_required: false  # Not required for OT-2

pressure_sensor_data:
  - timestamp: "2024-12-01T00:00:00Z"
    pressure: 0.0
  - timestamp: "2024-12-01T00:01:00Z"
    pressure: 0.1
  - timestamp: "2024-12-01T00:02:00Z"
    pressure: 0.0
  - timestamp: "2024-12-01T00:03:00Z"
    pressure: 0.2
  - timestamp: "2024-12-01T00:04:00Z"
    pressure: 0.0

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/transformation.yaml ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/transformation.yaml:
This file is a ASCII text with a size of 3724 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/configs/transformation.yaml:
reaction: transformation
deckSetup:
  thermocycler:
    name:
      "thermocyclerModuleV2": "thermocyclerModuleV2"
    lid_temperature: 105
    block_temperature: 4
    pcr_profile:
      steps:
        - {temperature: 37, hold_time_minutes: 2}
        - {temperature: 20, hold_time_minutes: 1}
      repetitions: 20
    post_pcr:
      temperature: 60
      hold_time_minutes: 10

  magnetic_block:
      name:
        "magneticModuleV1": "magneticBlockV1"
      slot:
        "6": "B2"

  tuberacks:
    MASTER_MIX_WELL:
      slot:
        "1": "A1"
    WATER_WELL: 
      slot:
        "2": "A2"
  tipracks:
    slot:
      "3": "A3"
  trash:
    slot:
      "12": "B1"
    dropTipLocation:
      "12": "B1"
    setup_code: "trash = protocol.load_labware('opentrons_1_trash_1100ml_fixed', '{slot}')"

variable_ids:
# OT-2 to Flex Variable Mapping (Bidirectional)
  "p20_single": "flex_1channel_50"
  "p300_multi": "flex_1channel_1000" # old flex has multi channel, but new has one channel
  #new flex onlz has the 8 channel peppettes with 50ul, do not have multichannel of 1000ul
  "mag_deck": "flex_magnetic_block"
  "tiprack_20ul": "tiprack_50"
  "tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "plate_96": "clip_plate"
  "mix_plate": "flex_mix_plate"
  "agar_plate": "flex_agar_plate"
  "12_reservoir_21000ul": "flex_12_reservoir_15ml"
  "96_deepwellplate_2ml": "flex_deepwell_plate"

labware:
  # OT-2 to Flex Labware Mapping (Bidirectional)
  #tube racks
  "24_tuberack_1500ul": "opentrons_24_tuberack_nest_1.5ml_snapcap"
  # Tip racks
  "opentrons_96_tiprack_20ul": "opentrons_flex_96_tiprack_50ul"
  "opentrons_96_tiprack_300ul": "opentrons_flex_96_tiprack_1000ul"
  "opentrons_24_tuberack_nest_1.5ml_snapcap": "opentrons_24_tuberack_nest_1.5ml_snapcap"

  # Well plates
  "nest_96_wellplate_100ul_pcr_full_skirt": "nest_96_wellplate_100ul_pcr_full_skirt"
  "corning_96_wellplate_360ul_flat": "corning_96_wellplate_360ul_flat"
  "biorad_96_wellplate_200ul_pcr": "armadillo_96_wellplate_200ul_pcr_full_skirt"
  # Reservoirs
  "usascientific_12_reservoir_22ml": "nest_12_reservoir_15ml"
  "agilent_1_reservoir_290ml": "axygen_1_reservoir_90ml"
  #trash  
  "opentrons_1_trash_1100ml_fixed": "opentrons_1_trash_1100ml_fixed"

pipettes:
  # OT-2 to Flex Pipette Mapping (Bidirectional)
  "p300_single_gen2": "flex_1channel_1000"
  "p1000_single_gen2": "flex_1channel_1000"
  "p20_single_gen2": "flex_1channel_50"
  "p300_multi_gen2": "flex_8channel_1000"
  "p20_multi_gen2": "flex_8channel_50"


modules:
  # OT-2 to Flex Modules (Bidirectional)
  "heaterShakerModuleV1": "heaterShakerModuleV1"


commands:
  # Update command syntax as needed
  mix:
    from: "pipette.mix"
    to: "pipette.mix"
  aspirate:
    from: "pipette.aspirate"
    to: "pipette.aspirate"
  dispense:
    from: "pipette.dispense"
    to: "pipette.dispense"
  pick_up_tip:
    from: "pipette.pick_up_tip"
    to: "pipette.pick_up_tip"
  set_block_temperature:
    from: "tc_mod.set_block_temperature(temperature=4)"
    to: "tc_mod.set_block_temperature(temperature={block_temperature})"
  set_lid_temperature:
    from: "tc_mod.set_lid_temperature(37)"
    to: "tc_mod.set_lid_temperature({lid_temperature})"
  drop_tip:
    from: "pipette.drop_tip()"
    to: "pipette.drop_tip({trash_variable}['{dropTipLocation}'])"
  move_labware:
    from: "protocol.move_labware"
    to: "protocol.move_labware"
    insert_after: "protocol.load_instrument"
    code: "protocol.comment('Gripper required for labware transfer')"

customFiles:
  - path: "/custom/clip/4ti0136_96_wellplate_2200ul.json"
    variable: "4ti0136_96_wellplate_2200ul"
  - path: "/custom/clip/4ti0960rig_96_wellplate_200ul.json"
    variable: "4ti0960rig_96_wellplate_200ul"
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0136_96_wellplate_2200ul.json ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0136_96_wellplate_2200ul.json:
This file is a JSON data with a size of 29900 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0136_96_wellplate_2200ul.json:
{
    "ordering": [
        [
            "A1",
            "B1",
            "C1",
            "D1",
            "E1",
            "F1",
            "G1",
            "H1"
        ],
        [
            "A2",
            "B2",
            "C2",
            "D2",
            "E2",
            "F2",
            "G2",
            "H2"
        ],
        [
            "A3",
            "B3",
            "C3",
            "D3",
            "E3",
            "F3",
            "G3",
            "H3"
        ],
        [
            "A4",
            "B4",
            "C4",
            "D4",
            "E4",
            "F4",
            "G4",
            "H4"
        ],
        [
            "A5",
            "B5",
            "C5",
            "D5",
            "E5",
            "F5",
            "G5",
            "H5"
        ],
        [
            "A6",
            "B6",
            "C6",
            "D6",
            "E6",
            "F6",
            "G6",
            "H6"
        ],
        [
            "A7",
            "B7",
            "C7",
            "D7",
            "E7",
            "F7",
            "G7",
            "H7"
        ],
        [
            "A8",
            "B8",
            "C8",
            "D8",
            "E8",
            "F8",
            "G8",
            "H8"
        ],
        [
            "A9",
            "B9",
            "C9",
            "D9",
            "E9",
            "F9",
            "G9",
            "H9"
        ],
        [
            "A10",
            "B10",
            "C10",
            "D10",
            "E10",
            "F10",
            "G10",
            "H10"
        ],
        [
            "A11",
            "B11",
            "C11",
            "D11",
            "E11",
            "F11",
            "G11",
            "H11"
        ],
        [
            "A12",
            "B12",
            "C12",
            "D12",
            "E12",
            "F12",
            "G12",
            "H12"
        ]
    ],
    "brand": {
        "brand": "4-Ti-0136",
        "brandId": [
            "4ti-0136"
        ]
    },
    "metadata": {
        "displayName": "4-Ti-0136 96 Well Plate 2200 µL",
        "displayCategory": "wellPlate",
        "displayVolumeUnits": "µL",
        "tags": []
    },
    "dimensions": {
        "xDimension": 127.7,
        "yDimension": 85.5,
        "zDimension": 41.4
    },
    "wells": {
        "A1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 74.5,
            "z": 5.3
        },
        "B1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 65.5,
            "z": 5.3
        },
        "C1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 56.5,
            "z": 5.3
        },
        "D1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 47.5,
            "z": 5.3
        },
        "E1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 38.5,
            "z": 5.3
        },
        "F1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 29.5,
            "z": 5.3
        },
        "G1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 20.5,
            "z": 5.3
        },
        "H1": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 14,
            "y": 11.5,
            "z": 5.3
        },
        "A2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 74.5,
            "z": 5.3
        },
        "B2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 65.5,
            "z": 5.3
        },
        "C2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 56.5,
            "z": 5.3
        },
        "D2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 47.5,
            "z": 5.3
        },
        "E2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 38.5,
            "z": 5.3
        },
        "F2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 29.5,
            "z": 5.3
        },
        "G2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 20.5,
            "z": 5.3
        },
        "H2": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 23,
            "y": 11.5,
            "z": 5.3
        },
        "A3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 74.5,
            "z": 5.3
        },
        "B3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 65.5,
            "z": 5.3
        },
        "C3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 56.5,
            "z": 5.3
        },
        "D3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 47.5,
            "z": 5.3
        },
        "E3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 38.5,
            "z": 5.3
        },
        "F3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 29.5,
            "z": 5.3
        },
        "G3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 20.5,
            "z": 5.3
        },
        "H3": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 32,
            "y": 11.5,
            "z": 5.3
        },
        "A4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 74.5,
            "z": 5.3
        },
        "B4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 65.5,
            "z": 5.3
        },
        "C4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 56.5,
            "z": 5.3
        },
        "D4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 47.5,
            "z": 5.3
        },
        "E4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 38.5,
            "z": 5.3
        },
        "F4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 29.5,
            "z": 5.3
        },
        "G4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 20.5,
            "z": 5.3
        },
        "H4": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 41,
            "y": 11.5,
            "z": 5.3
        },
        "A5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 74.5,
            "z": 5.3
        },
        "B5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 65.5,
            "z": 5.3
        },
        "C5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 56.5,
            "z": 5.3
        },
        "D5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 47.5,
            "z": 5.3
        },
        "E5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 38.5,
            "z": 5.3
        },
        "F5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 29.5,
            "z": 5.3
        },
        "G5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 20.5,
            "z": 5.3
        },
        "H5": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 50,
            "y": 11.5,
            "z": 5.3
        },
        "A6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 74.5,
            "z": 5.3
        },
        "B6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 65.5,
            "z": 5.3
        },
        "C6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 56.5,
            "z": 5.3
        },
        "D6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 47.5,
            "z": 5.3
        },
        "E6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 38.5,
            "z": 5.3
        },
        "F6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 29.5,
            "z": 5.3
        },
        "G6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 20.5,
            "z": 5.3
        },
        "H6": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 59,
            "y": 11.5,
            "z": 5.3
        },
        "A7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 74.5,
            "z": 5.3
        },
        "B7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 65.5,
            "z": 5.3
        },
        "C7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 56.5,
            "z": 5.3
        },
        "D7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 47.5,
            "z": 5.3
        },
        "E7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 38.5,
            "z": 5.3
        },
        "F7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 29.5,
            "z": 5.3
        },
        "G7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 20.5,
            "z": 5.3
        },
        "H7": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 68,
            "y": 11.5,
            "z": 5.3
        },
        "A8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 74.5,
            "z": 5.3
        },
        "B8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 65.5,
            "z": 5.3
        },
        "C8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 56.5,
            "z": 5.3
        },
        "D8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 47.5,
            "z": 5.3
        },
        "E8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 38.5,
            "z": 5.3
        },
        "F8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 29.5,
            "z": 5.3
        },
        "G8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 20.5,
            "z": 5.3
        },
        "H8": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 77,
            "y": 11.5,
            "z": 5.3
        },
        "A9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 74.5,
            "z": 5.3
        },
        "B9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 65.5,
            "z": 5.3
        },
        "C9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 56.5,
            "z": 5.3
        },
        "D9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 47.5,
            "z": 5.3
        },
        "E9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 38.5,
            "z": 5.3
        },
        "F9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 29.5,
            "z": 5.3
        },
        "G9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 20.5,
            "z": 5.3
        },
        "H9": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 86,
            "y": 11.5,
            "z": 5.3
        },
        "A10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 74.5,
            "z": 5.3
        },
        "B10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 65.5,
            "z": 5.3
        },
        "C10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 56.5,
            "z": 5.3
        },
        "D10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 47.5,
            "z": 5.3
        },
        "E10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 38.5,
            "z": 5.3
        },
        "F10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 29.5,
            "z": 5.3
        },
        "G10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 20.5,
            "z": 5.3
        },
        "H10": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 95,
            "y": 11.5,
            "z": 5.3
        },
        "A11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 74.5,
            "z": 5.3
        },
        "B11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 65.5,
            "z": 5.3
        },
        "C11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 56.5,
            "z": 5.3
        },
        "D11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 47.5,
            "z": 5.3
        },
        "E11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 38.5,
            "z": 5.3
        },
        "F11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 29.5,
            "z": 5.3
        },
        "G11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 20.5,
            "z": 5.3
        },
        "H11": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 104,
            "y": 11.5,
            "z": 5.3
        },
        "A12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 74.5,
            "z": 5.3
        },
        "B12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 65.5,
            "z": 5.3
        },
        "C12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 56.5,
            "z": 5.3
        },
        "D12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 47.5,
            "z": 5.3
        },
        "E12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 38.5,
            "z": 5.3
        },
        "F12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 29.5,
            "z": 5.3
        },
        "G12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 20.5,
            "z": 5.3
        },
        "H12": {
            "depth": 36.1,
            "totalLiquidVolume": 2200,
            "shape": "rectangular",
            "xDimension": 8.25,
            "yDimension": 8.25,
            "x": 113,
            "y": 11.5,
            "z": 5.3
        }
    },
    "groups": [
        {
            "metadata": {
                "wellBottomShape": "u"
            },
            "wells": [
                "A1",
                "B1",
                "C1",
                "D1",
                "E1",
                "F1",
                "G1",
                "H1",
                "A2",
                "B2",
                "C2",
                "D2",
                "E2",
                "F2",
                "G2",
                "H2",
                "A3",
                "B3",
                "C3",
                "D3",
                "E3",
                "F3",
                "G3",
                "H3",
                "A4",
                "B4",
                "C4",
                "D4",
                "E4",
                "F4",
                "G4",
                "H4",
                "A5",
                "B5",
                "C5",
                "D5",
                "E5",
                "F5",
                "G5",
                "H5",
                "A6",
                "B6",
                "C6",
                "D6",
                "E6",
                "F6",
                "G6",
                "H6",
                "A7",
                "B7",
                "C7",
                "D7",
                "E7",
                "F7",
                "G7",
                "H7",
                "A8",
                "B8",
                "C8",
                "D8",
                "E8",
                "F8",
                "G8",
                "H8",
                "A9",
                "B9",
                "C9",
                "D9",
                "E9",
                "F9",
                "G9",
                "H9",
                "A10",
                "B10",
                "C10",
                "D10",
                "E10",
                "F10",
                "G10",
                "H10",
                "A11",
                "B11",
                "C11",
                "D11",
                "E11",
                "F11",
                "G11",
                "H11",
                "A12",
                "B12",
                "C12",
                "D12",
                "E12",
                "F12",
                "G12",
                "H12"
            ]
        }
    ],
    "parameters": {
        "format": "irregular",
        "quirks": [],
        "isTiprack": false,
        "isMagneticModuleCompatible": false,
        "loadName": "4ti0136_96_wellplate_2200ul"
    },
    "namespace": "custom_beta",
    "version": 1,
    "schemaVersion": 2,
    "cornerOffsetFromSlot": {
        "x": 0,
        "y": 0,
        "z": 0
    }
}
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0960rig_96_wellplate_200ul.json ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0960rig_96_wellplate_200ul.json:
This file is a JSON data with a size of 26508 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/custom/clip/4ti0960rig_96_wellplate_200ul.json:
{
    "ordering": [
        [
            "A1",
            "B1",
            "C1",
            "D1",
            "E1",
            "F1",
            "G1",
            "H1"
        ],
        [
            "A2",
            "B2",
            "C2",
            "D2",
            "E2",
            "F2",
            "G2",
            "H2"
        ],
        [
            "A3",
            "B3",
            "C3",
            "D3",
            "E3",
            "F3",
            "G3",
            "H3"
        ],
        [
            "A4",
            "B4",
            "C4",
            "D4",
            "E4",
            "F4",
            "G4",
            "H4"
        ],
        [
            "A5",
            "B5",
            "C5",
            "D5",
            "E5",
            "F5",
            "G5",
            "H5"
        ],
        [
            "A6",
            "B6",
            "C6",
            "D6",
            "E6",
            "F6",
            "G6",
            "H6"
        ],
        [
            "A7",
            "B7",
            "C7",
            "D7",
            "E7",
            "F7",
            "G7",
            "H7"
        ],
        [
            "A8",
            "B8",
            "C8",
            "D8",
            "E8",
            "F8",
            "G8",
            "H8"
        ],
        [
            "A9",
            "B9",
            "C9",
            "D9",
            "E9",
            "F9",
            "G9",
            "H9"
        ],
        [
            "A10",
            "B10",
            "C10",
            "D10",
            "E10",
            "F10",
            "G10",
            "H10"
        ],
        [
            "A11",
            "B11",
            "C11",
            "D11",
            "E11",
            "F11",
            "G11",
            "H11"
        ],
        [
            "A12",
            "B12",
            "C12",
            "D12",
            "E12",
            "F12",
            "G12",
            "H12"
        ]
    ],
    "brand": {
        "brand": "4-Ti-0960RIG",
        "brandId": [
            "4Ti-0960RIG"
        ]
    },
    "metadata": {
        "displayName": "4-Ti-0960RIG 96 Well Plate 200 µL",
        "displayCategory": "wellPlate",
        "displayVolumeUnits": "µL",
        "tags": []
    },
    "dimensions": {
        "xDimension": 127,
        "yDimension": 85.6,
        "zDimension": 16.1
    },
    "wells": {
        "A1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 74.9,
            "z": 1.3
        },
        "B1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 65.84,
            "z": 1.3
        },
        "C1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 56.78,
            "z": 1.3
        },
        "D1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 47.72,
            "z": 1.3
        },
        "E1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 38.66,
            "z": 1.3
        },
        "F1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 29.6,
            "z": 1.3
        },
        "G1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 20.54,
            "z": 1.3
        },
        "H1": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 13.9,
            "y": 11.48,
            "z": 1.3
        },
        "A2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 74.9,
            "z": 1.3
        },
        "B2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 65.84,
            "z": 1.3
        },
        "C2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 56.78,
            "z": 1.3
        },
        "D2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 47.72,
            "z": 1.3
        },
        "E2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 38.66,
            "z": 1.3
        },
        "F2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 29.6,
            "z": 1.3
        },
        "G2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 20.54,
            "z": 1.3
        },
        "H2": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 22.97,
            "y": 11.48,
            "z": 1.3
        },
        "A3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 74.9,
            "z": 1.3
        },
        "B3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 65.84,
            "z": 1.3
        },
        "C3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 56.78,
            "z": 1.3
        },
        "D3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 47.72,
            "z": 1.3
        },
        "E3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 38.66,
            "z": 1.3
        },
        "F3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 29.6,
            "z": 1.3
        },
        "G3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 20.54,
            "z": 1.3
        },
        "H3": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 32.04,
            "y": 11.48,
            "z": 1.3
        },
        "A4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 74.9,
            "z": 1.3
        },
        "B4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 65.84,
            "z": 1.3
        },
        "C4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 56.78,
            "z": 1.3
        },
        "D4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 47.72,
            "z": 1.3
        },
        "E4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 38.66,
            "z": 1.3
        },
        "F4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 29.6,
            "z": 1.3
        },
        "G4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 20.54,
            "z": 1.3
        },
        "H4": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 41.11,
            "y": 11.48,
            "z": 1.3
        },
        "A5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 74.9,
            "z": 1.3
        },
        "B5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 65.84,
            "z": 1.3
        },
        "C5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 56.78,
            "z": 1.3
        },
        "D5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 47.72,
            "z": 1.3
        },
        "E5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 38.66,
            "z": 1.3
        },
        "F5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 29.6,
            "z": 1.3
        },
        "G5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 20.54,
            "z": 1.3
        },
        "H5": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 50.18,
            "y": 11.48,
            "z": 1.3
        },
        "A6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 74.9,
            "z": 1.3
        },
        "B6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 65.84,
            "z": 1.3
        },
        "C6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 56.78,
            "z": 1.3
        },
        "D6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 47.72,
            "z": 1.3
        },
        "E6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 38.66,
            "z": 1.3
        },
        "F6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 29.6,
            "z": 1.3
        },
        "G6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 20.54,
            "z": 1.3
        },
        "H6": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 59.25,
            "y": 11.48,
            "z": 1.3
        },
        "A7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 74.9,
            "z": 1.3
        },
        "B7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 65.84,
            "z": 1.3
        },
        "C7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 56.78,
            "z": 1.3
        },
        "D7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 47.72,
            "z": 1.3
        },
        "E7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 38.66,
            "z": 1.3
        },
        "F7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 29.6,
            "z": 1.3
        },
        "G7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 20.54,
            "z": 1.3
        },
        "H7": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 68.32,
            "y": 11.48,
            "z": 1.3
        },
        "A8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 74.9,
            "z": 1.3
        },
        "B8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 65.84,
            "z": 1.3
        },
        "C8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 56.78,
            "z": 1.3
        },
        "D8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 47.72,
            "z": 1.3
        },
        "E8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 38.66,
            "z": 1.3
        },
        "F8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 29.6,
            "z": 1.3
        },
        "G8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 20.54,
            "z": 1.3
        },
        "H8": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 77.39,
            "y": 11.48,
            "z": 1.3
        },
        "A9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 74.9,
            "z": 1.3
        },
        "B9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 65.84,
            "z": 1.3
        },
        "C9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 56.78,
            "z": 1.3
        },
        "D9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 47.72,
            "z": 1.3
        },
        "E9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 38.66,
            "z": 1.3
        },
        "F9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 29.6,
            "z": 1.3
        },
        "G9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 20.54,
            "z": 1.3
        },
        "H9": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 86.46,
            "y": 11.48,
            "z": 1.3
        },
        "A10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 74.9,
            "z": 1.3
        },
        "B10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 65.84,
            "z": 1.3
        },
        "C10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 56.78,
            "z": 1.3
        },
        "D10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 47.72,
            "z": 1.3
        },
        "E10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 38.66,
            "z": 1.3
        },
        "F10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 29.6,
            "z": 1.3
        },
        "G10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 20.54,
            "z": 1.3
        },
        "H10": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 95.53,
            "y": 11.48,
            "z": 1.3
        },
        "A11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 74.9,
            "z": 1.3
        },
        "B11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 65.84,
            "z": 1.3
        },
        "C11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 56.78,
            "z": 1.3
        },
        "D11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 47.72,
            "z": 1.3
        },
        "E11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 38.66,
            "z": 1.3
        },
        "F11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 29.6,
            "z": 1.3
        },
        "G11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 20.54,
            "z": 1.3
        },
        "H11": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 104.6,
            "y": 11.48,
            "z": 1.3
        },
        "A12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 74.9,
            "z": 1.3
        },
        "B12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 65.84,
            "z": 1.3
        },
        "C12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 56.78,
            "z": 1.3
        },
        "D12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 47.72,
            "z": 1.3
        },
        "E12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 38.66,
            "z": 1.3
        },
        "F12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 29.6,
            "z": 1.3
        },
        "G12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 20.54,
            "z": 1.3
        },
        "H12": {
            "depth": 14.8,
            "totalLiquidVolume": 200,
            "shape": "circular",
            "diameter": 5.2,
            "x": 113.67,
            "y": 11.48,
            "z": 1.3
        }
    },
    "groups": [
        {
            "metadata": {
                "wellBottomShape": "v"
            },
            "wells": [
                "A1",
                "B1",
                "C1",
                "D1",
                "E1",
                "F1",
                "G1",
                "H1",
                "A2",
                "B2",
                "C2",
                "D2",
                "E2",
                "F2",
                "G2",
                "H2",
                "A3",
                "B3",
                "C3",
                "D3",
                "E3",
                "F3",
                "G3",
                "H3",
                "A4",
                "B4",
                "C4",
                "D4",
                "E4",
                "F4",
                "G4",
                "H4",
                "A5",
                "B5",
                "C5",
                "D5",
                "E5",
                "F5",
                "G5",
                "H5",
                "A6",
                "B6",
                "C6",
                "D6",
                "E6",
                "F6",
                "G6",
                "H6",
                "A7",
                "B7",
                "C7",
                "D7",
                "E7",
                "F7",
                "G7",
                "H7",
                "A8",
                "B8",
                "C8",
                "D8",
                "E8",
                "F8",
                "G8",
                "H8",
                "A9",
                "B9",
                "C9",
                "D9",
                "E9",
                "F9",
                "G9",
                "H9",
                "A10",
                "B10",
                "C10",
                "D10",
                "E10",
                "F10",
                "G10",
                "H10",
                "A11",
                "B11",
                "C11",
                "D11",
                "E11",
                "F11",
                "G11",
                "H11",
                "A12",
                "B12",
                "C12",
                "D12",
                "E12",
                "F12",
                "G12",
                "H12"
            ]
        }
    ],
    "parameters": {
        "format": "irregular",
        "quirks": [],
        "isTiprack": false,
        "isMagneticModuleCompatible": false,
        "loadName": "4ti0960rig_96_wellplate_200ul"
    },
    "namespace": "custom_beta",
    "version": 1,
    "schemaVersion": 2,
    "cornerOffsetFromSlot": {
        "x": 0,
        "y": 0,
        "z": 0
    }
}
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_MRes_clip_Thermocycler_Gen2_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_MRes_clip_Thermocycler_Gen2_APIv2_19.py:
This script defines 0 class(es) and 5 function(s), implementing logic for run(protocol:,Constants,mix_linkers_function(Mix_linkers_bool,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_MRes_clip_Thermocycler_Gen2_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': \nAdditional comments: #             #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"}
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_MRes_clip_Thermocycler_Gen2_APIv2_19.py:
from opentrons import protocol_api
#from mix_functions import mix_linkers_function, mix_parts_function
import numpy as np

# Rename to 'clip_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

#metadata
metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler',
     'description': 'Implements linker ligation reactions using an opentrons OT-2, including the thermocycler module gen2.'
}
# linkers_volume=20
# parts_volume=20

# example dictionary produced by DNA-BOT for a single construct containing 4 parts, un-comment and run to test the template
# clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
#             "prefixes_plates": ["2", "2", "2", "2"],
#             "suffixes_wells": ["A2", "B2", "C2", "D2"],
#             "suffixes_plates": ["2", "2", "2", "2"],
#             "parts_wells": ["A3", "B3", "C3", "D3"],
#             "parts_plates": ["2", "2", "2", "2"],
#             "parts_vols": [1, 1, 1, 1],
#             "water_vols": [7.0, 7.0, 7.0, 7.0]}

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - values used here for simulation use generic Opentrons definitions to avoid
# specifying custom labware in simulate, which is not straightforward
# custom labware currently commented out
# __LABWARES={
#     #comment in out equipment below for simulate or run    
#     "p20_single": {"id": "p20_single_gen2"}, 
#     "p300_multi": {"id": "p300_multi_gen2"}, 
#     "mag_deck": {"id": "magneticModuleV1"}, 
#     "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
#     "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
#     "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
#     "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
#     "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, 
#     "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}
        
# __PARAMETERS={
#     "clip_keep_thermo_lid_closed": {"id": "No"},
#     "premix_linkers": {"id": 'Yes'},
#     "premix_parts": {"id": 'Yes'},
#     "parts_volume": {"value": 30},
#     "linkers_volume": {"value": 20},
#     "thermo_temp": {"value": 4}
# }

# Parameters for the clip reaction step
# self.user_settings["parameters"]["clip_keep_thermo_lid_closed"]["value"] = to_numeric_value(self.param_clip_thermo_lid_closed.get())


clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], 
            "prefixes_plates": ["2", "2", "2", "2", "2", "2"], 
            "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], 
            "suffixes_plates": ["2", "2", "2", "2", "2", "2"], 
            "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], 
            "parts_plates": ["2", "2", "2", "2", "2", "2"], 
            "parts_vols": [1, 1, 1, 1, 1, 1], 
            "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, 
            "p300_multi": {"id": "p300_multi_gen2"}, 
            "mag_deck": {"id": "magneticModuleV1"}, 
            "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
            "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, 
            #"24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, 
            "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
            "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, 
            "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, 
            "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}
            #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
            #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
            #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"}
            }
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):

    ### Constants - these have been moved out of the def clip() for clarity

    #Tiprack
    tiprack_type=__LABWARES['96_tiprack_20ul']['id']
    INITIAL_TIP = 'A1'
    CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']

    # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
    PIPETTE_TYPE = __LABWARES['p20_single']['id']
    PIPETTE_MOUNT = 'right'
        ### Load Pipette
        # checks if it's a P20 Single pipette
    if PIPETTE_TYPE != 'p20_single_gen2':
        print('Define labware must be changed to use', PIPETTE_TYPE)
        exit()
    #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    tc_mod.open_lid()
    tc_mod.deactivate_lid()
    tc_mod.set_block_temperature(temperature=__PARAMETERS['thermo_temp']['value']) 
    # Destination Plates
    DESTINATION_PLATE_TYPE = __LABWARES['clip_plate']['id']
    # Loads destination plate onto thermocycler module gen2
    destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)

    # Source Plates
    SOURCE_PLATE_TYPE = __LABWARES['clip_source_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used

    # Tube Rack
    TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
    TUBE_RACK_POSITION = '4'
    MASTER_MIX_WELL = 'A1'
    WATER_WELL = 'A2'
    MASTER_MIX_VOLUME = 20

    #choose to enable pre-mix for prefixes/suffixes and parts plate
    #Mix_linkers_bool = __PARAMETERS["premix_linkers"]['id']
    if __PARAMETERS['premix_linkers']['id']=='Yes':
        Mix_linkers_bool=True
    else:
        Mix_linkers_bool = False
    
    if __PARAMETERS['premix_parts']['id']=='Yes':
        Mix_parts_bool=True
    else:
        Mix_parts_bool = False

    def mix_linkers_function(Mix_linkers_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        #pipetting speeds - default rates in ul /s
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        #pipetting rates below - expressed as multiple of default 
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Linker reagent volume - specify minimum volume in linker wells
        #linker_volume=20
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as linker_vol/2
        if __PARAMETERS['linkers_volume']['value']>40:
            linker_vol=40
        else:
            linker_vol=__PARAMETERS['linkers_volume']['value']

        if Mix_linkers_bool:
            #Extracts lists from clips_dict
            prefixes = []
            loop_prefixes_wells = clips_dict["prefixes_wells"]
            loop_prefixes_plates = clips_dict["prefixes_plates"]
            len_prefixes = len(clips_dict["prefixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_prefixes):
                prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            prefixes_unique = np.unique(np.array(prefixes), axis=0)

            suffixes = []
            loop_suffixes_wells = clips_dict["suffixes_wells"]
            loop_suffixes_plates = clips_dict["suffixes_plates"]
            len_suffixes = len(clips_dict["suffixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_suffixes):
                suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            suffixes_unique = np.unique(np.array(suffixes), axis=0)

            ##Execute the mix 
            # [clip_num,0] addresses the plate location
            # [clip_num,1] addresses the well location
            for clip_num in range(len(prefixes_unique)):
                pipette.pick_up_tip()
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()

            for clip_num in range(len(suffixes_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is x mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
        else:
            pass

    def mix_parts_function(Mix_parts_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Part reagent volume - specify minimum volume in part wells at top of script
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as part_vol/2
    
        if __PARAMETERS['parts_volume']['value']>40:
            part_vol=40
        else:
            part_vol=__PARAMETERS['parts_volume']['value']
        
        if Mix_parts_bool:
            parts = []
            loop_parts_wells = clips_dict["parts_wells"]
            loop_parts_plates = clips_dict["parts_plates"]
            len_parts = len(clips_dict["parts_wells"])

            for i in range(len_parts):
                parts.append([loop_parts_plates[i], loop_parts_wells[i]])

            parts_unique = np.unique(np.array(parts), axis=0)

            for clip_num in range(len(parts_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=vslow, push_out=part_vol/20)
                pipette.move_to(source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].top(-5)) # move to 5mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
            else:
                pass

    def clip(
            prefixes_wells,
            prefixes_plates,
            suffixes_wells,
            suffixes_plates,
            parts_wells,
            parts_plates,
            parts_vols,
            water_vols):

        ### Calculating number of unique linkers and parts (again) for tip# calculation
        prefixes = []
        loop_prefixes_wells = clips_dict["prefixes_wells"]
        loop_prefixes_plates = clips_dict["prefixes_plates"]
        len_prefixes = len(clips_dict["prefixes_wells"])
        #Creates 2d array of wells and plates
        for i in range(len_prefixes):
            prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
        #Prunes to unique sets of well/plate so duplicates are removed
        #This means any well/plate combination will only be mixed once
        prefixes_unique = np.unique(np.array(prefixes), axis=0)

        suffixes = []
        loop_suffixes_wells = clips_dict["suffixes_wells"]
        loop_suffixes_plates = clips_dict["suffixes_plates"]
        len_suffixes = len(clips_dict["suffixes_wells"])
        for i in range(len_suffixes):
            suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
        suffixes_unique = np.unique(np.array(suffixes), axis=0)

        parts = []
        loop_parts_wells = clips_dict["parts_wells"]
        loop_parts_plates = clips_dict["parts_plates"]
        len_parts = len(clips_dict["parts_wells"])
        for i in range(len_parts):
            parts.append([loop_parts_plates[i], loop_parts_wells[i]])
        parts_unique = np.unique(np.array(parts), axis=0)
        
        # Calculates whether one, two, or three tipracks are needed, which are in slots 3, 6, and 9 respectively
        # loads tipracks
        if Mix_linkers_bool: 
            if Mix_parts_bool:             
                total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique)
        else: 
            if Mix_parts_bool:
                total_tips = (4 * len(parts_wells)) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells))

        letter_dict = {'A': 0, 'B': 1, 'C': 2,
                       'D': 3, 'E': 4, 'F': 5,
                       'G': 6, 'H': 7
                       }
        tiprack_1_tips = (
            13 - int(INITIAL_TIP[1:])) * 8 - letter_dict[INITIAL_TIP[0]]
        if total_tips > tiprack_1_tips:
            tiprack_num = 1 + (total_tips - tiprack_1_tips) // 96 + \
            (1 if (total_tips - tiprack_1_tips) % 96 > 0 else 0)
        else:
            tiprack_num = 1
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]

        # loads the correct number of tipracks
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
  
        # Loads pipette according to constants assigned above
        pipette = protocol.load_instrument(PIPETTE_TYPE, mount=PIPETTE_MOUNT, tip_racks=tipracks)

        # Defines where the destination wells are within the destination plate
        destination_wells = destination_plate.wells()[0:len(parts_wells)]

        ### Load Tube Rack
        # Loads tube rack according to constants assigned above
        tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)

        # Defines positions of master mix and water within the tube rack
        master_mix = tube_rack[MASTER_MIX_WELL]
        water = tube_rack[WATER_WELL]

         ### Loading Source Plates
        # Makes a source plate key for where prefixes, suffixes, and parts are located, according to the dictionary generated by the DNA-BOT
        source_plates = {}
        source_plates_keys = list(set((prefixes_plates + suffixes_plates + parts_plates)))

        # Loads plates according to the source plate key
        for key in source_plates_keys:
            source_plates[key]=protocol.load_labware(SOURCE_PLATE_TYPE, key)
        
        ###Pre-Mixing of Prefixes and Suffixes or Parts

        mix_linkers_function(Mix_linkers_bool, clips_dict, pipette, source_plates)
        mix_parts_function(Mix_parts_bool, clips_dict, pipette, source_plates)

        ### Reset pipette clearance for setting up clip reactions - pipetting small volume into larger volume
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
        
        # get the location at the center of well A1
        # center_location = plate["A1"].center()

        # # get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))

        # # aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # pipette.aspirate(50, adjusted_location)

        # # dispense at the same location
        # pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
        
        # transfer master mix into destination wells
                
        pipette.pick_up_tip()
        pipette.transfer(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='destination well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # transfer water into destination wells
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 3  # tip is y mm above well bottom
        
        pipette.pick_up_tip()
        pipette.distribute(water_vols, water, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # OLD transfer prefixes, suffixes, and parts into destination wells     
        #for clip_num in range(len(parts_wells)):
            #pipette.transfer(1, source_plates[prefixes_plates[clip_num]].wells(prefixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(1, source_plates[suffixes_plates[clip_num]].wells(suffixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(parts_vols[clip_num], source_plates[parts_plates[clip_num]].wells(parts_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=PART_MIX_SETTINGS, rate=slow)
        
        #NEW transfer function for prefix, suffix and parts with custom mix parameters
        for clip_num in range(len(parts_wells)):
            pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
            pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
            #Prefix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[prefixes_plates[clip_num]][prefixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Suffix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[suffixes_plates[clip_num]][suffixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Part Transfer
            pipette.pick_up_tip()
            pipette.aspirate(parts_vols[clip_num], source_plates[parts_plates[clip_num]][parts_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(parts_vols[clip_num], destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(5, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(5, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(10, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(10, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(15, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(15, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()

    # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
    clip(**clips_dict)
    ### PCR Reaction in Thermocycler

    # close lid and set lid temperature, PCR will not start until lid reaches 37C
    tc_mod.close_lid()
    tc_mod.set_lid_temperature(105)

    # Runs 20 cycles of 37C for 2 minutes and 20C for 1 minute, then holds for 60C for 10 minutes
    profile = [
        {'temperature': 37, 'hold_time_minutes': 2},
        {'temperature': 20, 'hold_time_minutes': 1}]
    tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=30)
    tc_mod.set_block_temperature(60, hold_time_minutes=10, block_max_volume=30)
    tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
    
    
    #Q Does block_max_volume define total volume in block or individual wells?
    #Thermo lid at end of reaction
    if __PARAMETERS['clip_keep_thermo_lid_closed']['id']=='Yes':
        Thermo_lid_bool=True
    else:
        Thermo_lid_bool = False

    if Thermo_lid_bool:
        tc_mod.deactivate_lid()
        tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
        # Temperature will be maintained even after the end of the script
    else:
        tc_mod.set_lid_temperature(37)
        tc_mod.open_lid()
         #output command actions in simulate
        for line in protocol.commands(): 
            print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_APIv2.8.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_APIv2.8.py:
This script defines 0 class(es) and 3 function(s), implementing logic for run(protocol:,Constants,clip(.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_APIv2.8.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_APIv2.8.py:
from opentrons import protocol_api
import numpy as np

# Rename to 'clip_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

#metadata
metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler',
     'description': 'Implements linker ligation reactions using an opentrons OT-2, including the thermocycler module gen2.'
}


# example dictionary produced by DNA-BOT for a single construct containing 5 parts, un-comment and run to test the template
clips_dict={"prefixes_wells": ["A8", "A7", "C5", "C7", "C10"], "prefixes_plates": ["2", "2", "2", "2", "2"], "suffixes_wells": ["B7", "C1", "C2", "C3", "B8"], "suffixes_plates": ["2", "2", "2", "2", "2"], "parts_wells": ["E2", "F2", "C2", "B2", "D2"], "parts_plates": ["5", "5", "5", "5", "5"], "parts_vols": [1, 1, 1, 1, 1], "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0]}

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict

__LABWARES={
    "p20_single": {"id": "p20_single_gen2"}, 
    "p300_multi": {"id": "p300_multi_gen2"}, 
    "mag_deck": {"id": "magdeck"}, 
    "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
    "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, 
    "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, 
    "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, 
    "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, 
    "clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    "mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    "clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, 
    "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, 
    "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}

clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], "prefixes_plates": ["2", "2", "2", "2", "2", "2"], "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], "suffixes_plates": ["2", "2", "2", "2", "2", "2"], "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], "parts_plates": ["2", "2", "2", "2", "2", "2"], "parts_vols": [1, 1, 1, 1, 1, 1], "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API 2.8

    ### Constants - these have been moved out of the def clip() for clarity

    #Tiprack
    tiprack_type=__LABWARES['96_tiprack_20ul']['id']
    INITIAL_TIP = 'A1'
    CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']

    # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
    PIPETTE_TYPE = __LABWARES['p20_single']['id']
    PIPETTE_MOUNT = 'right'
        ### Load Pipette
        # checks if it's a P10 Single pipette
    if PIPETTE_TYPE != 'p20_single_gen2':
        print('Define labware must be changed to use', PIPETTE_TYPE)
        exit()
    #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
    tc_mod = protocol.load_module('thermocycler module gen2')
    tc_mod.deactivate_lid()
    tc_mod.set_block_temperature(temperature=4) 
    # Destination Plates
    DESTINATION_PLATE_TYPE = __LABWARES['clip_plate']['id']
    # Loads destination plate onto thermocycler module gen2
    destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)

    # Source Plates
    SOURCE_PLATE_TYPE = __LABWARES['clip_source_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used

    # Tube Rack
    TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
    TUBE_RACK_POSITION = '4'
    MASTER_MIX_WELL = 'A1'
    WATER_WELL = 'A2'
    MASTER_MIX_VOLUME = 20

    # Mix settings
    LINKER_MIX_SETTINGS = (1, 3)
    PART_MIX_SETTINGS = (4, 5)
    #choose to enable pre-mix for prefixes/suffixes and parts plate
    #Mix_prefix_and_suffix_bool = True
    #Mix_parts_plate_bool = True

    def clip(
            prefixes_wells,
            prefixes_plates,
            suffixes_wells,
            suffixes_plates,
            parts_wells,
            parts_plates,
            parts_vols,
            water_vols):

        ### Loading Tiprack
        # Calculates whether one, two, or three tipracks are needed, which are in slots 3, 6, and 9 respectively
        total_tips = 4 * len(parts_wells)
        letter_dict = {'A': 0, 'B': 1, 'C': 2,
                       'D': 3, 'E': 4, 'F': 5,
                       'G': 6, 'H': 7
                       }
        tiprack_1_tips = (
            13 - int(INITIAL_TIP[1:])) * 8 - letter_dict[INITIAL_TIP[0]]
        if total_tips > tiprack_1_tips:
            tiprack_num = 1 + (total_tips - tiprack_1_tips) // 96 + \
            (1 if (total_tips - tiprack_1_tips) % 96 > 0 else 0)
        else:
            tiprack_num = 1
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]

        # loads the correct number of tipracks
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            # changed to protocol.load_labware for API 2.8

        # Loads pipette according to constants assigned above
        pipette = protocol.load_instrument(PIPETTE_TYPE, mount=PIPETTE_MOUNT, tip_racks=tipracks)

        # Defines where the destination wells are within the destination plate
        destination_wells = destination_plate.wells()[0:len(parts_wells)]

        ### Load Tube Rack
        # Loads tube rack according to constants assigned above
        tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)

        # Defines positions of master mix and water within the tube rack
        master_mix = tube_rack.wells(MASTER_MIX_WELL)
        water = tube_rack.wells(WATER_WELL)

         ### Loading Source Plates
        # Makes a source plate key for where prefixes, suffixes, and parts are located, according to the dictionary generated by the DNA-BOT
        source_plates = {}
        source_plates_keys = list(set((prefixes_plates + suffixes_plates + parts_plates)))

        # Loads plates according to the source plate key
        for key in source_plates_keys:
            source_plates[key]=protocol.load_labware(SOURCE_PLATE_TYPE, key)

        ###Pre-Mixing of Prefixes and Suffixes or Parts

        mix_prefixes_suffixes_function(Mix_prefix_and_suffix_bool, clips_dict, pipette)
        mix_parts_function(Mix_parts_plate_bool, clips_dict, pipette)

        ### Transfers

        # transfer master mix into destination wells
            # added blowout into destination wells ('blowout_location' only works for API 2.8 and above)
        pipette.pick_up_tip()
        pipette.transfer(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='destination well', new_tip='never')
        pipette.drop_tip()

        # transfer water into destination wells
            # added blowout into destination wells ('blowout_location' only works for API 2.8 and above)
        pipette.transfer(water_vols, water, destination_wells, blow_out=True, blowout_location='destination well', new_tip='always')

        #transfer prefixes, suffixes, and parts into destination wells
            # added blowout into destination wells ('blowout_location' only works for API 2.8 and above)
        for clip_num in range(len(parts_wells)):
            pipette.transfer(1, source_plates[prefixes_plates[clip_num]].wells(prefixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS)
            pipette.transfer(1, source_plates[suffixes_plates[clip_num]].wells(suffixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS)
            pipette.transfer(parts_vols[clip_num], source_plates[parts_plates[clip_num]].wells(parts_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=PART_MIX_SETTINGS)

    # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
    clip(**clips_dict)
    ### PCR Reaction in Thermocycler

    # close lid and set lid temperature, PCR will not start until lid reaches 37C
    tc_mod.close_lid()
    tc_mod.set_lid_temperature(105)

    # Runs 20 cycles of 37C for 2 minutes and 20C for 1 minute, then holds for 60C for 10 minutes
    profile = [
        {'temperature': 37, 'hold_time_minutes': 2},
        {'temperature': 20, 'hold_time_minutes': 1}]
    tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=30)
    tc_mod.set_block_temperature(60, hold_time_minutes=10, block_max_volume=30)
    tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
    #Q Does block_max_volume define total volume in block or individual wells?
    if __PARAMETERS["clip_keep_thermo_lid_closed"]["value"] == 1:
        tc_mod.deactivate_lid()
        tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
        # Temperature will be maintained even after the end of the script
    else:
        tc_mod.set_lid_temperature(37)
        tc_mod.open_lid()
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_Gen2_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_Gen2_APIv2_19.py:
This script defines 0 class(es) and 5 function(s), implementing logic for run(protocol:,Constants,mix_linkers_function(Mix_linkers_bool,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_Gen2_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/1_clip_ot2_Thermocycler_Gen2_APIv2_19.py:
from opentrons import protocol_api
#from mix_functions import mix_linkers_function, mix_parts_function
import numpy as np

# Rename to 'clip_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

#metadata
metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler',
     'description': 'Implements linker ligation reactions using an opentrons OT-2, including the thermocycler module gen2.'
}
# linkers_volume=20
# parts_volume=20

# example dictionary produced by DNA-BOT for a single construct containing 4 parts, un-comment and run to test the template
clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
            "prefixes_plates": ["2", "2", "2", "2"],
            "suffixes_wells": ["A2", "B2", "C2", "D2"],
            "suffixes_plates": ["2", "2", "2", "2"],
            "parts_wells": ["A3", "B3", "C3", "D3"],
            "parts_plates": ["2", "2", "2", "2"],
            "parts_vols": [1, 1, 1, 1],
            "water_vols": [7.0, 7.0, 7.0, 7.0]}

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - values used here for simulation use generic Opentrons definitions to avoid
# specifying custom labware in simulate, which is not straightforward
# custom labware currently commented out
__LABWARES={
    "p20_single": {"id": "p20_single_gen2"}, 
    "p300_multi": {"id": "p300_multi_gen2"}, 
    "mag_deck": {"id": "magdeck"}, 
    "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
    "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
    "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    #comment in out equipment below for simulate or run
    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
    "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
    "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, 
    "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}
        #BELOW is the code that defines the labwares in the clip script
        # self.user_settings['labwares']['p20_single']['id'] = self.labware_p10_single_entry.get()
        # self.user_settings['labwares']['p300_multi']['id'] = self.labware_p300_multi_entry.get()
        # self.user_settings['labwares']['mag_deck']['id'] = self.labware_mag_deck_entry.get()
        # self.user_settings['labwares']['24_tuberack_1500ul']['id'] = self.labware_24_tuberack_1500ul_entry.get()
        # self.user_settings['labwares']['96_tiprack_20ul']['id'] = self.labware_96_tiprack_20ul_entry.get()
        # self.user_settings['labwares']['96_tiprack_300ul']['id'] = self.labware_96_tiprack_300ul_entry.get()
        # self.user_settings['labwares']['clip_source_plate']['id'] = self.labware_clip_source_plate_entry.get()
        # self.user_settings['labwares']['clip_plate']['id'] = self.labware_clip_plate_entry.get()
        # self.user_settings['labwares']['mix_plate']['id'] = self.labware_mix_plate_entry.get()
        # self.user_settings['labwares']['final_assembly_plate']['id'] = self.labware_final_assembly_plate_entry.get()
        # self.user_settings['labwares']['transfo_plate']['id'] = self.labware_transfo_plate_entry.get()
        # self.user_settings['labwares']['transfo_plate_wo_thermo']['id'] = self.labware_transfo_plate_wo_thermo_entry.get()
        # self.user_settings['labwares']['agar_plate']['id'] = self.agar_plate_entry.get()
        # self.user_settings['labwares']['12_reservoir_21000ul']['id'] = self.labware_12_reservoir_21000ul_entry.get()
        # self.user_settings['labwares']['96_deepwellplate_2ml']['id'] = self.labware_96_deepwellplate_2ml_entry.get()
        # self.user_settings['labwares']['12_corning_wellplate']['id'] = self.labware_12_corning_wellplate_entry.get()

__PARAMETERS={
    "clip_keep_thermo_lid_closed": {"id": "No"},
    "premix_linkers": {"id": 'Yes'},
    "premix_parts": {"id": 'Yes'},
    "parts_volume": {"value": 30},
    "linkers_volume": {"value": 20},
    "thermo_temp": {"value": 4}
}

# Parameters for the clip reaction step
# self.user_settings["parameters"]["clip_keep_thermo_lid_closed"]["value"] = to_numeric_value(self.param_clip_thermo_lid_closed.get())


clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], "prefixes_plates": ["2", "2", "2", "2", "2", "2"], "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], "suffixes_plates": ["2", "2", "2", "2", "2", "2"], "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], "parts_plates": ["2", "2", "2", "2", "2", "2"], "parts_vols": [1, 1, 1, 1, 1, 1], "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):

    ### Constants - these have been moved out of the def clip() for clarity

    #Tiprack
    tiprack_type=__LABWARES['96_tiprack_20ul']['id']
    INITIAL_TIP = 'A1'
    CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']

    # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
    PIPETTE_TYPE = __LABWARES['p20_single']['id']
    PIPETTE_MOUNT = 'right'
        ### Load Pipette
        # checks if it's a P20 Single pipette
    if PIPETTE_TYPE != 'p20_single_gen2':
        print('Define labware must be changed to use', PIPETTE_TYPE)
        exit()
    #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    tc_mod.open_lid()
    tc_mod.deactivate_lid()
    tc_mod.set_block_temperature(temperature=__PARAMETERS['thermo_temp']['value']) 
    # Destination Plates
    DESTINATION_PLATE_TYPE = __LABWARES['clip_plate']['id']
    # Loads destination plate onto thermocycler module gen2
    destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)

    # Source Plates
    SOURCE_PLATE_TYPE = __LABWARES['clip_source_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used

    # Tube Rack
    TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
    TUBE_RACK_POSITION = '4'
    MASTER_MIX_WELL = 'A1'
    WATER_WELL = 'A2'
    MASTER_MIX_VOLUME = 20

    # Old Mix settings

    #choose to enable pre-mix for prefixes/suffixes and parts plate
    #Mix_linkers_bool = __PARAMETERS["premix_linkers"]['id']
    if __PARAMETERS['premix_linkers']['id']=='Yes':
        Mix_linkers_bool=True
    else:
        Mix_linkers_bool = False
    
    if __PARAMETERS['premix_parts']['id']=='Yes':
        Mix_parts_bool=True
    else:
        Mix_parts_bool = False

    def mix_linkers_function(Mix_linkers_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        #pipetting speeds - default rates in ul /s
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        #pipetting rates below - expressed as multiple of default 
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Linker reagent volume - specify minimum volume in linker wells
        #linker_volume=20
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as linker_vol/2
        if __PARAMETERS['linkers_volume']['value']>40:
            linker_vol=40
        else:
            linker_vol=__PARAMETERS['linkers_volume']['value']

        if Mix_linkers_bool:
            #Extracts lists from clips_dict
            prefixes = []
            loop_prefixes_wells = clips_dict["prefixes_wells"]
            loop_prefixes_plates = clips_dict["prefixes_plates"]
            len_prefixes = len(clips_dict["prefixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_prefixes):
                prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            prefixes_unique = np.unique(np.array(prefixes), axis=0)

            suffixes = []
            loop_suffixes_wells = clips_dict["suffixes_wells"]
            loop_suffixes_plates = clips_dict["suffixes_plates"]
            len_suffixes = len(clips_dict["suffixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_suffixes):
                suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            suffixes_unique = np.unique(np.array(suffixes), axis=0)

            ##Execute the mix 
            # [clip_num,0] addresses the plate location
            # [clip_num,1] addresses the well location
            for clip_num in range(len(prefixes_unique)):
                pipette.pick_up_tip()
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()

            for clip_num in range(len(suffixes_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is x mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
        else:
            pass

    def mix_parts_function(Mix_parts_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Part reagent volume - specify minimum volume in part wells at top of script
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as part_vol/2
    
        if __PARAMETERS['parts_volume']['value']>40:
            part_vol=40
        else:
            part_vol=__PARAMETERS['parts_volume']['value']
        
        if Mix_parts_bool:
            parts = []
            loop_parts_wells = clips_dict["parts_wells"]
            loop_parts_plates = clips_dict["parts_plates"]
            len_parts = len(clips_dict["parts_wells"])

            for i in range(len_parts):
                parts.append([loop_parts_plates[i], loop_parts_wells[i]])

            parts_unique = np.unique(np.array(parts), axis=0)

            for clip_num in range(len(parts_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=vslow, push_out=part_vol/20)
                pipette.move_to(source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].top(-5)) # move to 5mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
            else:
                pass

    def clip(
            prefixes_wells,
            prefixes_plates,
            suffixes_wells,
            suffixes_plates,
            parts_wells,
            parts_plates,
            parts_vols,
            water_vols):

        ### Calculating number of unique linkers and parts (again) for tip# calculation
        prefixes = []
        loop_prefixes_wells = clips_dict["prefixes_wells"]
        loop_prefixes_plates = clips_dict["prefixes_plates"]
        len_prefixes = len(clips_dict["prefixes_wells"])
        #Creates 2d array of wells and plates
        for i in range(len_prefixes):
            prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
        #Prunes to unique sets of well/plate so duplicates are removed
        #This means any well/plate combination will only be mixed once
        prefixes_unique = np.unique(np.array(prefixes), axis=0)

        suffixes = []
        loop_suffixes_wells = clips_dict["suffixes_wells"]
        loop_suffixes_plates = clips_dict["suffixes_plates"]
        len_suffixes = len(clips_dict["suffixes_wells"])
        for i in range(len_suffixes):
            suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
        suffixes_unique = np.unique(np.array(suffixes), axis=0)

        parts = []
        loop_parts_wells = clips_dict["parts_wells"]
        loop_parts_plates = clips_dict["parts_plates"]
        len_parts = len(clips_dict["parts_wells"])
        for i in range(len_parts):
            parts.append([loop_parts_plates[i], loop_parts_wells[i]])
        parts_unique = np.unique(np.array(parts), axis=0)
        
        # Calculates whether one, two, or three tipracks are needed, which are in slots 3, 6, and 9 respectively
        # loads tipracks
        if Mix_linkers_bool: 
            if Mix_parts_bool:             
                total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique)
        else: 
            if Mix_parts_bool:
                total_tips = (4 * len(parts_wells)) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells))

        letter_dict = {'A': 0, 'B': 1, 'C': 2,
                       'D': 3, 'E': 4, 'F': 5,
                       'G': 6, 'H': 7
                       }
        tiprack_1_tips = (
            13 - int(INITIAL_TIP[1:])) * 8 - letter_dict[INITIAL_TIP[0]]
        if total_tips > tiprack_1_tips:
            tiprack_num = 1 + (total_tips - tiprack_1_tips) // 96 + \
            (1 if (total_tips - tiprack_1_tips) % 96 > 0 else 0)
        else:
            tiprack_num = 1
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]

        # loads the correct number of tipracks
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
  
        # Loads pipette according to constants assigned above
        pipette = protocol.load_instrument(PIPETTE_TYPE, mount=PIPETTE_MOUNT, tip_racks=tipracks)

        # Defines where the destination wells are within the destination plate
        destination_wells = destination_plate.wells()[0:len(parts_wells)]

        ### Load Tube Rack
        # Loads tube rack according to constants assigned above
        tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)

        # Defines positions of master mix and water within the tube rack
        master_mix = tube_rack[MASTER_MIX_WELL]
        water = tube_rack[WATER_WELL]

         ### Loading Source Plates
        # Makes a source plate key for where prefixes, suffixes, and parts are located, according to the dictionary generated by the DNA-BOT
        source_plates = {}
        source_plates_keys = list(set((prefixes_plates + suffixes_plates + parts_plates)))

        # Loads plates according to the source plate key
        for key in source_plates_keys:
            source_plates[key]=protocol.load_labware(SOURCE_PLATE_TYPE, key)
        
        ###Pre-Mixing of Prefixes and Suffixes or Parts

        mix_linkers_function(Mix_linkers_bool, clips_dict, pipette, source_plates)
        mix_parts_function(Mix_parts_bool, clips_dict, pipette, source_plates)

        ### Reset pipette clearance for setting up clip reactions - pipetting small volume into larger volume
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
        
        # get the location at the center of well A1
        # center_location = plate["A1"].center()

        # # get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))

        # # aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # pipette.aspirate(50, adjusted_location)

        # # dispense at the same location
        # pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
        
        # transfer master mix into destination wells
                
        pipette.pick_up_tip()
        pipette.transfer(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='destination well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # transfer water into destination wells
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 3  # tip is y mm above well bottom
        
        pipette.pick_up_tip()
        pipette.distribute(water_vols, water, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # OLD transfer prefixes, suffixes, and parts into destination wells     
        #for clip_num in range(len(parts_wells)):
            #pipette.transfer(1, source_plates[prefixes_plates[clip_num]].wells(prefixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(1, source_plates[suffixes_plates[clip_num]].wells(suffixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(parts_vols[clip_num], source_plates[parts_plates[clip_num]].wells(parts_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=PART_MIX_SETTINGS, rate=slow)
        
        #NEW transfer function for prefix, suffix and parts with custom mix parameters
        for clip_num in range(len(parts_wells)):
            pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
            pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
            #Prefix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[prefixes_plates[clip_num]][prefixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Suffix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[suffixes_plates[clip_num]][suffixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Part Transfer
            pipette.pick_up_tip()
            pipette.aspirate(parts_vols[clip_num], source_plates[parts_plates[clip_num]][parts_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(parts_vols[clip_num], destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(5, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(5, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(10, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(10, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(15, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(15, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()

    # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
    clip(**clips_dict)
    ### PCR Reaction in Thermocycler

    # close lid and set lid temperature, PCR will not start until lid reaches 37C
    tc_mod.close_lid()
    tc_mod.set_lid_temperature(105)

    # Runs 20 cycles of 37C for 2 minutes and 20C for 1 minute, then holds for 60C for 10 minutes
    profile = [
        {'temperature': 37, 'hold_time_minutes': 2},
        {'temperature': 20, 'hold_time_minutes': 1}]
    tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=30)
    tc_mod.set_block_temperature(60, hold_time_minutes=10, block_max_volume=30)
    tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
    
    
    #Q Does block_max_volume define total volume in block or individual wells?
    #Thermo lid at end of reaction
    if __PARAMETERS['clip_keep_thermo_lid_closed']['id']=='Yes':
        Thermo_lid_bool=True
    else:
        Thermo_lid_bool = False

    if Thermo_lid_bool:
        tc_mod.deactivate_lid()
        tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
        # Temperature will be maintained even after the end of the script
    else:
        tc_mod.set_lid_temperature(37)
        tc_mod.open_lid()
         #output command actions in simulate
        for line in protocol.commands(): 
            print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/2_MRes_purification_ot2_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/2_MRes_purification_ot2_APIv2_19.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,magbead(.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/2_MRes_purification_ot2_APIv2_19.py:
This script includes the following components:
- Imports: opentrons
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/2_MRes_purification_ot2_APIv2_19.py:
from opentrons import protocol_api

# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 2: Purification',
     'description': 'Implements magbead purification reactions for BASIC assembly using an opentrons OT-2'}




# example values produced by DNA-BOT for a single construct containing 5 parts, un-comment and run to test the template:
#sample_number=8
#ethanol_well='A3'

# __LABWARES and __PARAMETERS are expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}
# __PARAMETERS={"purif_magdeck_height": {"value": 20.0}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5.0}, "purif_settling_time": {"value": 2.0}, "purif_drying_time": {"value": 5.0}, "purif_elution_time": {"value": 2.0}, "transfo_incubation_temp": {"value": 4.0}, "transfo_incubation_time": {"value": 20.0}}

sample_number=6
ethanol_well='A11'
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API verison 2

    def magbead(
            sample_number,
            ethanol_well,
            elution_buffer_well='A1',
            sample_volume=30,
            bead_ratio=__PARAMETERS['purif_bead_ratio']['value'],
            elution_buffer_volume=40,
            incubation_time=__PARAMETERS['purif_incubation_time']['value'],
            settling_time=__PARAMETERS['purif_settling_time']['value'],
                # if using Gen 2 magentic module, need to change time! see: https://docs.opentrons.com/v2/new_modules.html
                # "The GEN2 Magnetic Module uses smaller magnets than the GEN1 version...this means it will take longer for the GEN2 module to attract beads."
                # Recommended Magnetic Module GEN2 bead attraction time:
                    # Total liquid volume <= 50 uL: 5 minutes
                # this template was written with the Gen 1 magnetic module, as it is compatible with API version 2
            drying_time=__PARAMETERS['purif_drying_time']['value'],
            elution_time=__PARAMETERS['purif_elution_time']['value'],
            sample_offset=0,
            tiprack_type=__LABWARES['96_tiprack_300ul']['id']):

        """

        Selected args:
            ethanol_well (str): well in reagent container containing ethanol.
            elution_buffer_well (str): well in reagent container containing elution buffer.
            sample_offset (int): offset the intial sample column by the specified value.

        """


        ### Constants

        # Pipettes
        PIPETTE_ASPIRATE_RATE = 25
        PIPETTE_DISPENSE_RATE = 150
        TIPS_PER_SAMPLE = 9
        PIPETTE_TYPE = __LABWARES['p300_multi']['id']
            # new constant for easier swapping between pipette types

        # Tiprack
        CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9', '2', '5']

        # Magnetic Module
        MAGDECK_POSITION = '1'

        # Mix Plate
        MIX_PLATE_TYPE = __LABWARES['mix_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
            # also acts as the type of plate loaded onto the magnetic module
        MIX_PLATE_POSITION = '4'

        # Reagents
        REAGENT_CONTAINER_TYPE = __LABWARES['12_reservoir_21000ul']['id']
        REAGENT_CONTAINER_POSITION = '7'

        # Beads
        BEAD_CONTAINER_TYPE = __LABWARES['96_deepwellplate_2ml']['id']
        BEAD_CONTAINER_POSITION = '8'

        # Settings
        LIQUID_WASTE_WELL = 'A5'
        BEADS_WELL = 'A1'
        DEAD_TOTAL_VOL = 5
        SLOW_HEAD_SPEEDS = {'x': 600 // 4, 'y': 400 // 4, 'z': 125 // 10, 'a': 125 // 10}
        DEFAULT_HEAD_SPEEDS = {'x': 400, 'y': 400, 'z': 125, 'a': 100}
        IMMOBILISE_MIX_REPS = 10
        MAGDECK_HEIGHT = __PARAMETERS['purif_magdeck_height']['value']
        AIR_VOL_COEFF = 0.1
        ETHANOL_VOL = 150
        WASH_TIME = __PARAMETERS['purif_wash_time']['value']
        ETHANOL_DEAD_VOL = 50
        ELUTION_MIX_REPS = 20
        ELUTANT_SEP_TIME = 1
        ELUTION_DEAD_VOL = 2


        ### Errors
        if sample_number > 48:
            raise ValueError('sample number cannot exceed 48')


        ### Loading Tiprack

        # Calculates whether one/two/three/four/five tipracks are needed, which are in slots 3, 6, 9, 2, and 5 respectively
        total_tips = sample_number * TIPS_PER_SAMPLE
        tiprack_num = total_tips // 96 + (1 if total_tips % 96 > 0 else 0)
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            # changed to protocol.load_labware for API version 2


        ### Loading Pipettes

        pipette = protocol.load_instrument(PIPETTE_TYPE, mount="left", tip_racks=tipracks)
        pipette.aspirate_flow_rate=PIPETTE_ASPIRATE_RATE
        pipette.dispense_flow_rate=PIPETTE_DISPENSE_RATE
            # for reference: default aspirate/dispense flow rate for p300_multi_gen2 is 94 ul/s

        ### Define Labware

        # Magnetic Module
        MAGDECK = protocol.load_module(__LABWARES['mag_deck']['id'], location= MAGDECK_POSITION)
            # 'magneticModuleV1' is the gen 1 magnetic module, use 'magneticModuleV2' for the gen 2 magentic module
            # if using gen 2 module, need to change settling time! (see comments under Constants)
        MAGDECK.disengage()
            # disengages the magnets when it is turned on
        mag_plate = MAGDECK.load_labware(MIX_PLATE_TYPE)

        # Mix Plate
        mix_plate = protocol.load_labware(MIX_PLATE_TYPE, MIX_PLATE_POSITION)

        # Reagents
        reagent_container = protocol.load_labware(REAGENT_CONTAINER_TYPE, REAGENT_CONTAINER_POSITION)

        # Beads Container
        bead_container = protocol.load_labware(BEAD_CONTAINER_TYPE, BEAD_CONTAINER_POSITION)


        ### Calculating Columns

        # Total number of columns
        col_num = sample_number // 8 + (1 if sample_number % 8 > 0 else 0)

        # Columns containing samples in location 1 (magentic module)
            # generates a list of lists: [[A1, B1, C1...], [A2, B2, C2...]...]
        samples = [col for col in mag_plate.columns()[sample_offset : col_num + sample_offset]]

        # Columns to mix beads and samples in location 4 (mix plate)
        mixing = [col for col in mix_plate.columns()[sample_offset:col_num + sample_offset]]

        # Columns to dispense output in location 1 (magnetic module)
            # purified parts are dispensed 6 rows to the right of their initial location
            # this is why the number of samples cannot exceed 48

        output = [col for col in mag_plate.columns()[6 + sample_offset:col_num + 6 + sample_offset]]

        ### Defining Wells for Reagents, Liquid Waste, and Beads

        liquid_waste = reagent_container.wells(LIQUID_WASTE_WELL)
        ethanol = reagent_container.wells(ethanol_well)
        elution_buffer = reagent_container.wells(elution_buffer_well)
        beads = bead_container[BEADS_WELL]

        ### Define bead and mix volume
        bead_volume = sample_volume * bead_ratio
        if bead_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = bead_volume / 2
        total_vol = bead_volume + sample_volume + DEAD_TOTAL_VOL


        ### Steps

        # Mix beads and parts
        for target in range(int(len(samples))):

            # Aspirate beads
            pipette.pick_up_tip()
            pipette.aspirate(bead_volume, beads)
            protocol.max_speeds.update(SLOW_HEAD_SPEEDS)

            # Aspirte samples
            pipette.aspirate(sample_volume + DEAD_TOTAL_VOL, samples[target][0])

            # Transfer and mix on mix_plate
            pipette.dispense(total_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.mix(IMMOBILISE_MIX_REPS, mix_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.blow_out()

            # Dispose of tip
            protocol.max_speeds.update(DEFAULT_HEAD_SPEEDS)
            pipette.drop_tip()

        # Immobilise sample
        protocol.delay(minutes=incubation_time)

        # Transfer beads+samples back to magdeck
        for target in range(int(len(samples))):
            pipette.transfer(total_vol, mixing[target], samples[target], blow_out=True, blowout_location='destination well')
            # added blowout_location=destination well because default location of blowout is waste in API version 2

        # Engagae MagDeck and incubate
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=settling_time)

        # Remove supernatant from magnetic beads
        for target in samples:
            pipette.transfer(total_vol, target, liquid_waste, blow_out=True)

        # Wash beads twice with 70% ethanol
        air_vol = pipette.max_volume * AIR_VOL_COEFF
        for cycle in range(2):
            for target in samples:
                pipette.transfer(ETHANOL_VOL, ethanol, target, air_gap=air_vol)
            protocol.delay(minutes=WASH_TIME)
            for target in samples:
                pipette.transfer(ETHANOL_VOL + ETHANOL_DEAD_VOL, target, liquid_waste, air_gap=air_vol)

        # Dry at room temperature
        protocol.delay(minutes=drying_time)

        # Disengage MagDeck
        MAGDECK.disengage()

        # Mix beads with elution buffer
        if elution_buffer_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = elution_buffer_volume / 2
        for target in samples:
            pipette.transfer(elution_buffer_volume, elution_buffer, target, mix_after=(ELUTION_MIX_REPS, mix_vol))

        # Incubate at room temperature
        protocol.delay(minutes=elution_time)

        # Engage MagDeck (remains engaged for DNA elution)
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=ELUTANT_SEP_TIME)

        # Transfer purified parts to a new well
        for target, dest in zip(samples, output):
            pipette.transfer(elution_buffer_volume - ELUTION_DEAD_VOL, target,
                             dest, blow_out=False)

        # Disengage MagDeck
        MAGDECK.disengage()

    magbead(sample_number=sample_number, ethanol_well=ethanol_well)
    # removed elution buffer well='A1', added that to where the function is defined

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'apiLevel': '2.19',
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler Gen2',
    'description': 'DNABOT Step 3: Assembly with thermocycler Gen2',
    }
# Construct assemblies are set up on thermocycler module gen2 by combining purified clip parts.

# Test dictionary can be used for simulation 3 or 88 assemblies
final_assembly_dict={
 "A1": ['A7', 'B7', 'C7', 'F7','E7'], 
 "B1": ['A7', 'B7', 'D7', 'G7'], 
 "C1": ['A7', 'B7', 'E7', 'H7']
 }
tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - generic labware for simulation
__LABWARES={
     "p20_single": {"id": "p20_single_gen2"}, 
     #"p300_multi": {"id": "p300_multi_gen2"}, 
     #"mag_deck": {"id": "magdeck"},
     "clip_plate":{"id":"biorad_96_wellplate_200ul_pcr"},
     "final_assembly_plate":{"id":"biorad_96_wellplate_200ul_pcr"},
     "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
     #"96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, 
     "24_tuberack_2000ul": {"id": "opentrons_24_tuberack_generic_2ml_screwcap"}, 
     #"96_wellplate_200ul_pcr_step_14": {"id": "biorad_96_wellplate_200ul_pcr"}, 
     #"96_wellplate_200ul_pcr_step_23": {"id": "biorad_96_wellplate_200ul_pcr"}, 
     #"agar_plate_step_4": {"id": "biorad_96_wellplate_200ul_pcr"}, 
     #"12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, 
     #"96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}
     #corning_12_wellplate_6.9ml_flat
     }

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], "B1": ["A7", "B7", "C7", "D7", "E7"], "C1": ["A7", "B7", "C7", "F7"], "D1": ["A7", "B7", "C7", "F7"]}
tiprack_num=1
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            CLIP_PLATE_TYPE = __LABWARES['clip_plate']['id']
            CLIP_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['24_tuberack_2000ul']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            purified_clip_plate = protocol.load_labware(CLIP_PLATE_TYPE, CLIP_PLATE_POSITION)
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
                  
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.open_lid()
            tc_mod.deactivate_lid()
            tc_mod.set_block_temperature(4)

             # Master mix transfers
            final_assembly_lengths = []
            for values in final_assembly_dict.values():
                final_assembly_lengths.append(len(values))
            unique_assemblies_lengths = list(set(final_assembly_lengths))
            master_mix_well_letters = ['A', 'B', 'C', 'D']

            for x in unique_assemblies_lengths:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lengths in enumerate(final_assembly_lengths) if lengths == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.flow_rate.aspirate = 6
                pipette.flow_rate.dispense = 6
                pipette.flow_rate.blow_out = 15
                high = 2
                normal = 1
                slow = 0.5
                vslow = 0.2
                pipette.well_bottom_clearance.aspirate = 1 
                pipette.well_bottom_clearance.dispense = 2

                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type  
                    pipette.distribute(TOTAL_VOL - x * PART_VOL, tube_rack[master_mix_well], destination_plate[destination_well],blow_out=True, blowout_location="source well", new_tip='never')
                pipette.drop_tip()

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# purified_clip_plate.wells and destination_plate.wells in the same type
                    #pipette.transfer(PART_VOL, purified_clip_plate.wells(value), destination_plate.wells(key), mix_after=MIX_SETTINGS, new_tip='always')#transfer parts in one tube
                    pipette.pick_up_tip()
                    pipette.well_bottom_clearance.aspirate = 1  # tip is 2 mm above well bottom
                    pipette.well_bottom_clearance.dispense = 2  # tip is 2 mm above well bottom
                    #Prefix Transfer
                    pipette.aspirate(PART_VOL, purified_clip_plate[value].bottom(1), rate=slow)
                    pipette.dispense(PART_VOL, destination_plate[key].bottom(2), rate=slow)
                    #mix after transfer
                    pipette.aspirate(2, destination_plate[key].bottom(1), rate=normal)
                    pipette.dispense(2, destination_plate[key].bottom(3), rate=high)
                    pipette.aspirate(3, destination_plate[key].bottom(2), rate=normal)
                    pipette.dispense(3, destination_plate[key].bottom(1), rate=normal)
                    pipette.aspirate(4, destination_plate[key].bottom(2), rate=slow)
                    pipette.dispense(4, destination_plate[key].bottom(3), push_out=0.5, rate=vslow)
                    pipette.move_to(destination_plate[key].top(-8))
                    pipette.blow_out()
                    pipette.touch_tip(radius=0.6, v_offset=-8, speed=10)
                    pipette.drop_tip()

            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(37)
            protocol.delay(seconds=120)
            tc_mod.deactivate_lid()
            tc_mod.open_lid()
            tc_mod.set_block_temperature(4)
            #for line in protocol.commands(): 
                #print(line)

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)
    
    #output command actions in simulate
    for line in protocol.commands(): 
       print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen1_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen1_APIv2_19.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen1_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen1_APIv2_19.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler',
    'description': 'DNABOT Step 3: Assembly with thermocycler',
    'apiLevel': '2.8'
}

# It is possible to run 88 assemblies with this new module. The heat block module is removed. 
# Assembly reactions is set up on thermocycler module.


# test dictionary can be used for simulation 3 or 88 assemblies
#final_assembly_dict={"A1": ['A7', 'B7', 'C7', 'F7'], "B1": ['A7', 'B7', 'D7', 'G7'], "C1": ['A7', 'B7', 'E7', 'H7']}
#tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], "B1": ["A7", "B7", "C7", "D7", "E7"], "C1": ["A7", "B7", "C7", "F7"], "D1": ["A7", "B7", "C7", "F7"]}
tiprack_num=1
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            MAG_PLATE_TYPE = __LABWARES['clip_plate']['id']
            MAG_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            #magbead_plate = protocol.load_labware(MAG_PLATE_TYPE, MAG_PLATE_POSITION)
            #MAGDECK = protocol.load_module(__LABWARES['mag_deck']['id'], location= 'MAGDECK_POSITION')
            #MAGDECK = protocol.load_module(__LABWARES['mag_deck']['id'], MAGDECK_POSITION)
            #Magnetic module shouldn't be needed in assembly step. Purified clips are not on the magnetic module.
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
            
            
            #Thermocycler Module
            #tc_mod = protocol.load_module('Thermocycler Module')
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV1")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.set_block_temperature(20)


             # Master mix transfers
            final_assembly_lens = []
            for values in final_assembly_dict.values():
                final_assembly_lens.append(len(values))
            unique_assemblies_lens = list(set(final_assembly_lens))
            master_mix_well_letters = ['A', 'B', 'C', 'D']
            
            for x in unique_assemblies_lens:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lens in enumerate(final_assembly_lens) if lens == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type
                    
                    pipette.transfer(TOTAL_VOL - x * PART_VOL, tube_rack.wells(master_mix_well),
                                     destination_plate.wells(destination_well), new_tip='never')#transfer water and buffer in the pipette

            pipette.drop_tip()

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# magbead_plate.wells and destination_plate.wells in the same type
                    pipette.transfer(PART_VOL, magbead_plate.wells(value),
                                     destination_plate.wells(key), mix_after=MIX_SETTINGS,
                                     new_tip='always')#transfer parts in one tube



            #Thermocycler Module
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(37)
            tc_mod.open_lid()

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen2_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/3_assembly_ot2_Thermocycler_Gen2_APIv2_19.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler',
    'description': 'DNABOT Step 3: Assembly with thermocycler',
    'apiLevel': '2.8'
}

# It is possible to run 88 assemblies with this new module. The heat block module is removed. 
# Assembly reactions is set up on thermocycler module gen2.


# test dictionary can be used for simulation 3 or 88 assemblies
#final_assembly_dict={"A1": ['A7', 'B7', 'C7', 'F7'], "B1": ['A7', 'B7', 'D7', 'G7'], "C1": ['A7', 'B7', 'E7', 'H7']}
#tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magdeck"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], 
                     "B1": ["A7", "B7", "C7", "D7", "E7"], 
                     "C1": ["A7", "B7", "C7", "F7"], 
                     "D1": ["A7", "B7", "C7", "F7"]
                     }
tiprack_num=1
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            MAG_PLATE_TYPE = __LABWARES['clip_plate']['id']
            MAG_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            #magbead_plate = protocol.load_labware(MAG_PLATE_TYPE, MAG_PLATE_POSITION)
            magbead_plate = protocol.load_module(module_name=__LABWARES['mag_deck']['id'], location = 'MAG_PLATE_POSITION')
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
            
            
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.set_block_temperature(20)


             # Master mix transfers
            final_assembly_lens = []
            for values in final_assembly_dict.values():
                final_assembly_lens.append(len(values))
            unique_assemblies_lens = list(set(final_assembly_lens))
            master_mix_well_letters = ['A', 'B', 'C', 'D']
            
            for x in unique_assemblies_lens:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lens in enumerate(final_assembly_lens) if lens == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type
                    
                    pipette.transfer(TOTAL_VOL - x * PART_VOL, tube_rack.wells(master_mix_well),
                                     destination_plate.wells(destination_well), new_tip='never')#transfer water and buffer in the pipette

            pipette.drop_tip()

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# magbead_plate.wells and destination_plate.wells in the same type
                    pipette.transfer(PART_VOL, magbead_plate.wells(value),
                                     destination_plate.wells(key), mix_after=MIX_SETTINGS,
                                     new_tip='always')#transfer parts in one tube



            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(37)
            tc_mod.open_lid()

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
This script defines 0 class(es) and 11 function(s), implementing logic for run(protocol:,generate_transformation_wells(spotting_tuples):,tiprack_slots(spotting_tuples,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
# 
"""
Created on Thu Nov 11 14:26:07 2021

@author: gbuldum11

"""

from opentrons import protocol_api
import numpy as np


# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 4: Transformation with thermocycler and 12 wellplate',
     'description': 'Transformation reactions using an opentrons OT-2 for BASIC assembly.'}


# Example output produced by DNA-BOT for 88 constructs, uncomment and run to test the template
#spotting_tuples=[(('A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'A2', 'B2', 'C2', 'D2'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E2', 'F2', 'G2', 'H2', 'A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'H4', 'A5', 'B5', 'C5', 'D5'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E5', 'F5', 'G5', 'H5', 'A6', 'B6', 'C6', 'D6', 'E6', 'F6', 'G6', 'H6'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A7', 'B7', 'C7', 'D7', 'E7', 'F7', 'G7', 'H7', 'A8', 'B8', 'C8', 'D8'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E8', 'F8', 'G8', 'H8', 'A9', 'B9', 'C9', 'D9', 'E9', 'F9', 'G9', 'H9'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A10', 'B10', 'C10', 'D10', 'E10', 'F10', 'G10', 'H10', 'A11', 'B11', 'C11', 'D11'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E11', 'F11', 'G11', 'H11'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
#soc_well='A1'


spotting_tuples=[(('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C1', 'D1'), (5, 5, 5, 5))]
soc_well='A1'
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API version 2

    # Constants
    CANDIDATE_p20_SLOTS = ['2', '9']
    CANDIDATE_P300_SLOTS = ['3', '6']
    P20_TIPRACK_TYPE = __LABWARES['96_tiprack_20ul']['id']
    P300_TIPRACK_TYPE = __LABWARES['96_tiprack_300ul']['id']
    P20_MOUNT = 'right'
    P300_MOUNT = 'left'
    ASSEMBLY_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
    ASSEMBLY_PLATE_SLOT = '5'

    TRANSFORMATION_PLATE_TYPE = __LABWARES['transfo_plate']['id']
    SOC_PLATE_TYPE = __LABWARES['96_deepwellplate_2ml']['id']
    SOC_PLATE_SLOT = '4'
    #Removed the tuberack for waste to have space for more tipracts for 88 assemblies
    #TUBE_RACK_TYPE = 'e14151500starlab_24_tuberack_1500ul'
    #TUBE_RACK_SLOT = '11'
    #SPOTTING_WASTE_WELL = 'A1'
    AGAR_PLATE_TYPE = __LABWARES['12_corning_wellplate']['id']


        # custom labware made using Opentron's Labware Creator:
            # external dimensions:
                # footprint length = 127.76 mm
                # footrpint width = 85.48 mm
                # footprint height = 15.70 mm
                # taken from Thermofisher's documentation for Nunc Omnitray
                # https://www.thermofisher.com/document-connect/document-connect.html?url=https%3A%2F%2Fassets.thermofisher.com%2FTFS-Assets%2FLSG%2Fmanuals%2FD03023.pdf&title=VGVjaG5pY2FsIERhdGEgU2hlZXQ6IE51bmMgT21uaXRyYXk=
            # well measurements
                # depth = 0.01 mm
                # diameter =  0.01 mm
                # in old add.labware.py, they were defined as 0, but Labware Creator requires a value >0
            # spacing
                # x-offset = 14.38 mm
                # y-offset = 11.24 mm
                # x-spacing = 9.00 mm
                # y-spacing) = 9.00 mm
                # taken from Nest 96 well plates
                # https://labware.opentrons.com/nest_96_wellplate_100ul_pcr_full_skirt/
        # before using protocol, need to upload the 'nuncomnitray_96_wellplate_0.01ul.json' custom labware file into Opentrons app

    AGAR_PLATE_SLOT = '1'

    

    
    def generate_transformation_wells(spotting_tuples):
        """
        Evaluates spotting_tuples and returns transformation wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """

        wells = []
        for spotting_tuple in spotting_tuples:
            for source_well in spotting_tuple[0]:
                wells.append(source_well)
        transformation_wells = [well for i, well in enumerate(
            wells) if wells.index(well) == i]
        return transformation_wells


    def tiprack_slots(spotting_tuples, max_spot_vol=20):
        """
        Calculates p20 and p300 tiprack slots required.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        # Reactions' number
        transformation_reactions = len(generate_transformation_wells(spotting_tuples))
        spotting_reactions = 0
        for spotting_tuple in spotting_tuples:
            spots = np.array(spotting_tuple[2])/max_spot_vol
            np.ceil(spots)
            spotting_reactions = spotting_reactions + int(np.sum(spots))


        # p20 tiprack slots
        p20_tips = transformation_reactions + spotting_reactions
        p20_tiprack_slots = p20_tips // 96 + 1 if p20_tips % 96 > 0 else p20_tips / 96

        # p300 tiprack slots
        p300_tips = transformation_reactions + spotting_reactions
        p300_tiprack_slots = p300_tips // 96 + \
            1 if p300_tips % 96 > 0 else p300_tips / 96
        return int(p20_tiprack_slots), int(p300_tiprack_slots)


    def transformation_setup(transformation_wells):
        """
        Sets up transformation reactions

        Args:
        transformation_wells (list).

        """

        # Constants
        TEMP = __PARAMETERS['transfo_incubation_temp']['value']  # Incubation temperature.
        ASSEMBLY_VOL = 5  # Volume of final assembly added to competent cells.
        MIX_SETTINGS = (4, 5)  # Mix after setting during final assembly transfers.
        INCUBATION_TIME = __PARAMETERS['transfo_incubation_time']['value']  # Cells and final assembly incubation time.

        #thermocycler module gen2
        tc_mod.set_block_temperature(TEMP, block_max_volume=50)
        protocol.pause(f'Place the competent cells on thermocycler when temperature is {TEMP}°C and resume run')


        # Transfer final assemblies
        p20_pipette.transfer(ASSEMBLY_VOL,
                             [assembly_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             [transformation_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             new_tip='always',
                             mix_after=(MIX_SETTINGS))


        # Incubate for INCUBATION_TIME minutes 
        protocol.delay(minutes=INCUBATION_TIME)


    def heat_shock():
        tc_mod.set_block_temperature(42, hold_time_seconds=30, block_max_volume=50)
        tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=50)
        

    def phase_switch():
        """
        Function pauses run enabling addition/removal of labware.

        """
        protocol.pause('Remove final assembly plate. Introduce deep well plate containing SOC media. Resume run.')

    def outgrowth(
            cols,
            soc_well):
        """
        Outgrows transformed cells.

        Args:
        cols (list of str): list of cols in transformation plate containing samples.
        soc_well (str): Well containing SOC media in relevant plate.

        """

        # Constants
        SOC_VOL = 100
        SOC_MIX_SETTINGS = (4, 50)
        TEMP = 37
        OUTGROWTH_TIME = 60
        SOC_ASPIRATION_RATE = 25
        P300_DEFAULT_ASPIRATION_RATE = 150

        # Define wells
        transformation_cols = [transformation_plate.columns_by_name()[column] for column in cols]

        soc = soc_plate.wells(soc_well)

        tc_mod.set_block_temperature(20, block_max_volume=150)

        # Add SOC to transformed cells
        p300_pipette.flow_rate.aspirate = SOC_ASPIRATION_RATE
        p300_pipette.transfer(SOC_VOL, soc, transformation_cols,
                              new_tip='always', mix_after=SOC_MIX_SETTINGS)
        p300_pipette.flow_rate.aspirate = P300_DEFAULT_ASPIRATION_RATE

        # Incubate for 1 hour at TEMP °C
        tc_mod.set_block_temperature(TEMP, hold_time_minutes=60, block_max_volume=150)
        protocol.pause('Introduce the agar plate. Resume run')


    def spotting_cols(spotting_tuples):
        """
        Evaluates spotting_tuples and returns unique cols (str) associated with each spotting_tuple's source wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """
        cols_list = []
        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            cols_list.append(unique_cols)
        return cols_list


    def spot_transformations(
            spotting_tuples,
            dead_vol=0,
            spotting_dispense_rate= 1,
            stabbing_depth=13,
            max_spot_vol=20):
        """
        Spots transformation reactions.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        dead_vol (float): Dead volume aspirated during spotting.
        spotting_dispense_rate (float): Rate p20_pipette dispenses at during spotting.
        stabbing_depth (float): Depth p20_pipette moves into agar during spotting.
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        def spot(
                source,
                target,
                spot_vol):
            """
            Spots an individual reaction using the p20 pipette.

            Args:
            source (str): Well containing the transformation reaction to be spotted.
            target (str): Well transformation reaction is to be spotted to.
            spot_vol (float): Volume of transformation reaction to be spotted (uL).

            """

            # Constants
            DEFAULT_HEAD_SPEED = {'x': 400, 'y': 400,'z': 125, 'a': 125}
            SPOT_HEAD_SPEED = {'x': 400, 'y': 400, 'z': 125,'a': 125 // 4}
            DISPENSING_HEIGHT = -5
            SAFE_HEIGHT = 7  # height avoids collision with agar tray.

            # Spot
            #p20_pipette.pick_up_tip() 
            #Removed pick_up command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume
            p20_pipette.aspirate(spot_vol + dead_vol, source[0])
            # old code:
                # p20_pipette.aspirate(spot_vol + dead_vol, source)
                # returned type error because 'source' was a list containing one item (the well location)
                # source[0] takes the location out of the list

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))
            # old code:
                # p20_pipette.move_to(target.top(SAFE_HEIGHT))
                # p20_pipette.move_to(target.top(DISPENSING_HEIGHT))
                # returned attribute error because 'target' was a list containing one item (the well location)
                # target[0] takes the location out of the list

            p20_pipette.dispense(volume=spot_vol, rate=spotting_dispense_rate)

            protocol.max_speeds.update(SPOT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(SPOT_HEAD_SPEED.values()), **SPOT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            p20_pipette.move_to(target[0].top(-1 * stabbing_depth))
            # old code:
                # p20_pipette.move_to(target.top(-1*stabbing_depth))
                # returns attribute error because 'target' was a list containing one item (the well location)
            protocol.max_speeds.update(DEFAULT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(DEFAULT_HEAD_SPEED.values()), **DEFAULT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            # the code below makes sure that the transformend cells are efficiently reaching to the agar surface

            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))

            p20_pipette.blow_out()

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            # old code:
                # p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
                # returns attribute error because 'target' was a list containing one item (the well location)

                # the simple .blow_out command blows out at current position (spotting waste) by defualt
                # unlike blowout=true in complex commands, which by default will blow out in waste

            #p20_pipette.drop_tip()
            #Removed drop_tip command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume

        #Each set of 12 transformants(A1-D2, E2-H3,..) will be spotted in a few rounds (20 microl + 20 microl...). Once the spotting of one column is finished, introduce the new plate and continue.

        def spot_tuple(spotting_tuple):
            """
            Spots all reactions defined by the spotting tuple. Requires the function spot.

            Args:
            spotting_tuple (tuple): Spotting reactions given in the form: (source wells), (target wells), (spotting volumes).
            Each unique source well is resuspended once prior to spotting.

            """
            source_wells = spotting_tuple[0]
            target_wells = spotting_tuple[1]
            spot_vols = list(spotting_tuple[2])
            
            while max(spot_vols) > 0:
                #p20_pipette.pick_up_tip()
                for index, spot_vol in enumerate(spot_vols):
                    spot_times = spot_vols[index]/max_spot_vol
                    p20_pipette.pick_up_tip()
                    for i in range(int(spot_times)):
                        if spot_vol == 0:
                            pass
                        else:
                            vol = spot_vol if spot_vol <= max_spot_vol else max_spot_vol
                            spot(source = transformation_plate.wells(source_wells[index]), target = agar_plate.wells(target_wells[index]), spot_vol = vol)
                            spot_vols[index] = spot_vols[index] - vol*spot_times
                    p20_pipette.drop_tip()
                    if target_wells[index] == 'C4':
                        protocol.pause('Introduce new well plate. Resume run.')  
                    else:
                        continue                    

        # Constants
        TRANSFORMATION_MIX_SETTINGS = [4, 50]

        # Spot transformation reactions
            # Each unique transformation well is resuspended once prior to spotting.

        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            #unique_cols = list(set(source_wells_cols))
            #unique_cols.sort()
            int_unique_cols=list(map(int, unique_cols))
            if len(unique_cols)>1:
              if int_unique_cols[1]%3==0:
                unique_cols.remove(unique_cols[0])
              else:
                pass
            
            for col in unique_cols:
                p300_pipette.pick_up_tip()
                p300_pipette.mix(TRANSFORMATION_MIX_SETTINGS[0], TRANSFORMATION_MIX_SETTINGS[1],transformation_plate.columns_by_name()[col][0])
                p300_pipette.drop_tip()
            spot_tuple(spotting_tuple)

    # Tiprack slots
    p20_p300_tiprack_slots = tiprack_slots(spotting_tuples)
    p20_slots = CANDIDATE_p20_SLOTS[:p20_p300_tiprack_slots[0]]
    p300_slots = CANDIDATE_P300_SLOTS[:p20_p300_tiprack_slots[1]]

    # Define labware
    p20_tipracks = [protocol.load_labware(P20_TIPRACK_TYPE, slot) for slot in p20_slots]
        # changed to protocol.load_labware for API version 2
    p300_tipracks = [protocol.load_labware(P300_TIPRACK_TYPE, slot) for slot in p300_slots]
        # changed to protocol.load_labware for API version 2
    p20_pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], P20_MOUNT, tip_racks=p20_tipracks)
        # changed to protocol.load_instrument for API version 2
    p300_pipette = protocol.load_instrument(__LABWARES['p300_multi']['id'], P300_MOUNT, tip_racks=p300_tipracks)
        # changed to protocol.load_instrument for API version 2

    assembly_plate = protocol.load_labware(ASSEMBLY_PLATE_TYPE, ASSEMBLY_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    transformation_plate = tc_mod.load_labware(TRANSFORMATION_PLATE_TYPE)
        # changed to protocol.load_labware for API version 2
        # removed share=True, not required in API version 2
        # removed TEMPDECK_SLOT as it is loaded directly onto temperature module
    soc_plate = protocol.load_labware(SOC_PLATE_TYPE, SOC_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    #tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_SLOT)
        # changed to protocol.load_labware for API version 2
    #spotting_waste = tube_rack.wells(SPOTTING_WASTE_WELL)
    agar_plate = protocol.load_labware(AGAR_PLATE_TYPE, AGAR_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2


    ### Run protocol

    # Register agar_plate for calibration
    p20_pipette.transfer(1, agar_plate.wells('A1'), agar_plate.wells('C4'), trash=False)
    # removed:
        # p20_pipette.start_at_tip(p20_tipracks[0][0])
        # pipette automatically starts from 'A1' tiprack location
        # if re-adding, need to use p20.pipette.starting_tip() instead of p20.pipette.start_at_tip()


    # Run functions
    
    transformation_setup(generate_transformation_wells(spotting_tuples))
    heat_shock()
    phase_switch()
    spotting_tuples_cols = [col for cols in spotting_cols(spotting_tuples) for col in cols]
    unique_cols = [col for i, col in enumerate(spotting_tuples_cols) if spotting_tuples_cols.index(col) == i]
    outgrowth(cols=unique_cols, soc_well=soc_well)
    spot_transformations(spotting_tuples)
    
    print(unique_cols)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen1_12wellplate_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen1_12wellplate_APIv2_19.py:
This script defines 0 class(es) and 11 function(s), implementing logic for run(protocol:,generate_transformation_wells(spotting_tuples):,tiprack_slots(spotting_tuples,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen1_12wellplate_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen1_12wellplate_APIv2_19.py:
# 
"""
Created on Thu Nov 11 14:26:07 2021

@author: gbuldum11

"""

from opentrons import protocol_api
import numpy as np


# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'apiLevel': '2.19',
     'protocolName': 'DNABOT Step 4: Transformation with thermocycler and 12 wellplate',
     'description': 'Transformation reactions using an opentrons OT-2 for BASIC assembly.'}


# Example output produced by DNA-BOT for 88 constructs, uncomment and run to test the template
#spotting_tuples=[(('A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'A2', 'B2', 'C2', 'D2'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E2', 'F2', 'G2', 'H2', 'A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'H4', 'A5', 'B5', 'C5', 'D5'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E5', 'F5', 'G5', 'H5', 'A6', 'B6', 'C6', 'D6', 'E6', 'F6', 'G6', 'H6'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A7', 'B7', 'C7', 'D7', 'E7', 'F7', 'G7', 'H7', 'A8', 'B8', 'C8', 'D8'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E8', 'F8', 'G8', 'H8', 'A9', 'B9', 'C9', 'D9', 'E9', 'F9', 'G9', 'H9'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A10', 'B10', 'C10', 'D10', 'E10', 'F10', 'G10', 'H10', 'A11', 'B11', 'C11', 'D11'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E11', 'F11', 'G11', 'H11'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
#soc_well='A1'


spotting_tuples=[(('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
soc_well='A1'
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API version 2

    # Constants
    CANDIDATE_p20_SLOTS = ['2', '9']
    CANDIDATE_P300_SLOTS = ['3', '6']
    P20_TIPRACK_TYPE = __LABWARES['96_tiprack_20ul']['id']
    P300_TIPRACK_TYPE = __LABWARES['96_tiprack_300ul']['id']
    P20_MOUNT = 'right'
    P300_MOUNT = 'left'
    ASSEMBLY_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
    ASSEMBLY_PLATE_SLOT = '5'

    TRANSFORMATION_PLATE_TYPE = __LABWARES['transfo_plate']['id']
    SOC_PLATE_TYPE = __LABWARES['96_deepwellplate_2ml']['id']
    SOC_PLATE_SLOT = '4'
    #Removed the tuberack for waste to have space for more tipracts for 88 assemblies
    #TUBE_RACK_TYPE = 'e14151500starlab_24_tuberack_1500ul'
    #TUBE_RACK_SLOT = '11'
    #SPOTTING_WASTE_WELL = 'A1'
    AGAR_PLATE_TYPE = __LABWARES['12_corning_wellplate']['id']


        # custom labware made using Opentron's Labware Creator:
            # external dimensions:
                # footprint length = 127.76 mm
                # footrpint width = 85.48 mm
                # footprint height = 15.70 mm
                # taken from Thermofisher's documentation for Nunc Omnitray
                # https://www.thermofisher.com/document-connect/document-connect.html?url=https%3A%2F%2Fassets.thermofisher.com%2FTFS-Assets%2FLSG%2Fmanuals%2FD03023.pdf&title=VGVjaG5pY2FsIERhdGEgU2hlZXQ6IE51bmMgT21uaXRyYXk=
            # well measurements
                # depth = 0.01 mm
                # diameter =  0.01 mm
                # in old add.labware.py, they were defined as 0, but Labware Creator requires a value >0
            # spacing
                # x-offset = 14.38 mm
                # y-offset = 11.24 mm
                # x-spacing = 9.00 mm
                # y-spacing) = 9.00 mm
                # taken from Nest 96 well plates
                # https://labware.opentrons.com/nest_96_wellplate_100ul_pcr_full_skirt/
        # before using protocol, need to upload the 'nuncomnitray_96_wellplate_0.01ul.json' custom labware file into Opentrons app

    AGAR_PLATE_SLOT = '1'

    

    
    def generate_transformation_wells(spotting_tuples):
        """
        Evaluates spotting_tuples and returns transformation wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """

        wells = []
        for spotting_tuple in spotting_tuples:
            for source_well in spotting_tuple[0]:
                wells.append(source_well)
        transformation_wells = [well for i, well in enumerate(
            wells) if wells.index(well) == i]
        return transformation_wells


    def tiprack_slots(spotting_tuples, max_spot_vol=20):
        """
        Calculates p20 and p300 tiprack slots required.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        # Reactions' number
        transformation_reactions = len(generate_transformation_wells(spotting_tuples))
        spotting_reactions = 0
        for spotting_tuple in spotting_tuples:
            spots = np.array(spotting_tuple[2])/max_spot_vol
            np.ceil(spots)
            spotting_reactions = spotting_reactions + int(np.sum(spots))


        # p20 tiprack slots
        p20_tips = transformation_reactions + spotting_reactions
        p20_tiprack_slots = p20_tips // 96 + 1 if p20_tips % 96 > 0 else p20_tips / 96

        # p300 tiprack slots
        p300_tips = transformation_reactions + spotting_reactions
        p300_tiprack_slots = p300_tips // 96 + \
            1 if p300_tips % 96 > 0 else p300_tips / 96
        return int(p20_tiprack_slots), int(p300_tiprack_slots)


    def transformation_setup(transformation_wells):
        """
        Sets up transformation reactions

        Args:
        transformation_wells (list).

        """

        # Constants
        TEMP = __PARAMETERS['transfo_incubation_temp']['value']  # Incubation temperature.
        ASSEMBLY_VOL = 5  # Volume of final assembly added to competent cells.
        MIX_SETTINGS = (4, 5)  # Mix after setting during final assembly transfers.
        INCUBATION_TIME = __PARAMETERS['transfo_incubation_time']['value']  # Cells and final assembly incubation time.

        #thermocycler module gen2
        tc_mod.set_block_temperature(TEMP, block_max_volume=50)
        protocol.pause(f'Place the competent cells on thermocycler when temperature is {TEMP}°C and resume run')


        # Transfer final assemblies
        p20_pipette.transfer(ASSEMBLY_VOL,
                             [assembly_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             [transformation_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             new_tip='always',
                             mix_after=(MIX_SETTINGS))


        # Incubate for INCUBATION_TIME minutes 
        protocol.delay(minutes=INCUBATION_TIME)


    def heat_shock():
        tc_mod.set_block_temperature(42, hold_time_seconds=30, block_max_volume=50)
        tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=50)
        

    def phase_switch():
        """
        Function pauses run enabling addition/removal of labware.

        """
        protocol.pause('Remove final assembly plate. Introduce deep well plate containing SOC media. Resume run.')

    def outgrowth(
            cols,
            soc_well):
        """
        Outgrows transformed cells.

        Args:
        cols (list of str): list of cols in transformation plate containing samples.
        soc_well (str): Well containing SOC media in relevant plate.

        """

        # Constants
        SOC_VOL = 100
        SOC_MIX_SETTINGS = (4, 50)
        TEMP = 37
        OUTGROWTH_TIME = 60
        SOC_ASPIRATION_RATE = 25
        P300_DEFAULT_ASPIRATION_RATE = 150

        # Define wells
        transformation_cols = [transformation_plate.columns_by_name()[column] for column in cols]

        soc = soc_plate.wells(soc_well)

        tc_mod.set_block_temperature(20, block_max_volume=150)

        # Add SOC to transformed cells
        p300_pipette.flow_rate.aspirate = SOC_ASPIRATION_RATE
        p300_pipette.transfer(SOC_VOL, soc, transformation_cols,
                              new_tip='always', mix_after=SOC_MIX_SETTINGS)
        p300_pipette.flow_rate.aspirate = P300_DEFAULT_ASPIRATION_RATE

        # Incubate for 1 hour at TEMP °C
        tc_mod.set_block_temperature(TEMP, hold_time_minutes=60, block_max_volume=150)
        protocol.pause('Introduce the agar plate. Resume run')


    def spotting_cols(spotting_tuples):
        """
        Evaluates spotting_tuples and returns unique cols (str) associated with each spotting_tuple's source wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """
        cols_list = []
        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            cols_list.append(unique_cols)
        return cols_list


    def spot_transformations(
            spotting_tuples,
            dead_vol=0,
            spotting_dispense_rate= 1,
            stabbing_depth=13,
            max_spot_vol=20):
        """
        Spots transformation reactions.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        dead_vol (float): Dead volume aspirated during spotting.
        spotting_dispense_rate (float): Rate p20_pipette dispenses at during spotting.
        stabbing_depth (float): Depth p20_pipette moves into agar during spotting.
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        def spot(
                source,
                target,
                spot_vol):
            """
            Spots an individual reaction using the p20 pipette.

            Args:
            source (str): Well containing the transformation reaction to be spotted.
            target (str): Well transformation reaction is to be spotted to.
            spot_vol (float): Volume of transformation reaction to be spotted (uL).

            """

            # Constants
            DEFAULT_HEAD_SPEED = {'x': 400, 'y': 400,'z': 125, 'a': 125}
            SPOT_HEAD_SPEED = {'x': 400, 'y': 400, 'z': 125,'a': 125 // 4}
            DISPENSING_HEIGHT = -5
            SAFE_HEIGHT = 7  # height avoids collision with agar tray.

            # Spot
            #p20_pipette.pick_up_tip() 
            #Removed pick_up command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume
            p20_pipette.aspirate(spot_vol + dead_vol, source[0])
            # old code:
                # p20_pipette.aspirate(spot_vol + dead_vol, source)
                # returned type error because 'source' was a list containing one item (the well location)
                # source[0] takes the location out of the list

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))
            # old code:
                # p20_pipette.move_to(target.top(SAFE_HEIGHT))
                # p20_pipette.move_to(target.top(DISPENSING_HEIGHT))
                # returned attribute error because 'target' was a list containing one item (the well location)
                # target[0] takes the location out of the list

            p20_pipette.dispense(volume=spot_vol, rate=spotting_dispense_rate)

            protocol.max_speeds.update(SPOT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(SPOT_HEAD_SPEED.values()), **SPOT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            p20_pipette.move_to(target[0].top(-1 * stabbing_depth))
            # old code:
                # p20_pipette.move_to(target.top(-1*stabbing_depth))
                # returns attribute error because 'target' was a list containing one item (the well location)
            protocol.max_speeds.update(DEFAULT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(DEFAULT_HEAD_SPEED.values()), **DEFAULT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            # the code below makes sure that the transformend cells are efficiently reaching to the agar surface

            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))

            p20_pipette.blow_out()

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            # old code:
                # p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
                # returns attribute error because 'target' was a list containing one item (the well location)

                # the simple .blow_out command blows out at current position (spotting waste) by defualt
                # unlike blowout=true in complex commands, which by default will blow out in waste

            #p20_pipette.drop_tip()
            #Removed drop_tip command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume

        #Each set of 12 transformants(A1-D2, E2-H3,..) will be spotted in a few rounds (20 microl + 20 microl...). Once the spotting of one column is finished, introduce the new plate and continue.

        def spot_tuple(spotting_tuple):
            """
            Spots all reactions defined by the spotting tuple. Requires the function spot.

            Args:
            spotting_tuple (tuple): Spotting reactions given in the form: (source wells), (target wells), (spotting volumes).
            Each unique source well is resuspended once prior to spotting.

            """
            source_wells = spotting_tuple[0]
            target_wells = spotting_tuple[1]
            spot_vols = list(spotting_tuple[2])
            
            while max(spot_vols) > 0:
                #p20_pipette.pick_up_tip()
                for index, spot_vol in enumerate(spot_vols):
                    spot_times = spot_vols[index]/max_spot_vol
                    p20_pipette.pick_up_tip()
                    for i in range(int(spot_times)):
                        if spot_vol == 0:
                            pass
                        else:
                            vol = spot_vol if spot_vol <= max_spot_vol else max_spot_vol
                            spot(source = transformation_plate.wells(source_wells[index]), target = agar_plate.wells(target_wells[index]), spot_vol = vol)
                            spot_vols[index] = spot_vols[index] - vol*spot_times
                    p20_pipette.drop_tip()
                    if target_wells[index] == 'C4':
                        protocol.pause('Introduce new well plate. Resume run.')  
                    else:
                        continue                    

        # Constants
        TRANSFORMATION_MIX_SETTINGS = [4, 50]

        # Spot transformation reactions
            # Each unique transformation well is resuspended once prior to spotting.

        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            #unique_cols = list(set(source_wells_cols))
            #unique_cols.sort()
            int_unique_cols=list(map(int, unique_cols))
            if len(unique_cols)>1:
              if int_unique_cols[1]%3==0:
                unique_cols.remove(unique_cols[0])
              else:
                pass
            
            for col in unique_cols:
                p300_pipette.pick_up_tip()
                p300_pipette.mix(TRANSFORMATION_MIX_SETTINGS[0], TRANSFORMATION_MIX_SETTINGS[1],transformation_plate.columns_by_name()[col][0])
                p300_pipette.drop_tip()
            spot_tuple(spotting_tuple)

    # Tiprack slots
    p20_p300_tiprack_slots = tiprack_slots(spotting_tuples)
    p20_slots = CANDIDATE_p20_SLOTS[:p20_p300_tiprack_slots[0]]
    p300_slots = CANDIDATE_P300_SLOTS[:p20_p300_tiprack_slots[1]]

    # Define labware
    p20_tipracks = [protocol.load_labware(P20_TIPRACK_TYPE, slot) for slot in p20_slots]
        # changed to protocol.load_labware for API version 2
    p300_tipracks = [protocol.load_labware(P300_TIPRACK_TYPE, slot) for slot in p300_slots]
        # changed to protocol.load_labware for API version 2
    p20_pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], P20_MOUNT, tip_racks=p20_tipracks)
        # changed to protocol.load_instrument for API version 2
    p300_pipette = protocol.load_instrument(__LABWARES['p300_multi']['id'], P300_MOUNT, tip_racks=p300_tipracks)
        # changed to protocol.load_instrument for API version 2

    assembly_plate = protocol.load_labware(ASSEMBLY_PLATE_TYPE, ASSEMBLY_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    transformation_plate = tc_mod.load_labware(TRANSFORMATION_PLATE_TYPE)
        # changed to protocol.load_labware for API version 2
        # removed share=True, not required in API version 2
        # removed TEMPDECK_SLOT as it is loaded directly onto temperature module
    soc_plate = protocol.load_labware(SOC_PLATE_TYPE, SOC_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    #tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_SLOT)
        # changed to protocol.load_labware for API version 2
    #spotting_waste = tube_rack.wells(SPOTTING_WASTE_WELL)
    agar_plate = protocol.load_labware(AGAR_PLATE_TYPE, AGAR_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2


    ### Run protocol

    # Register agar_plate for calibration
    p20_pipette.transfer(1, agar_plate.wells('A1'), agar_plate.wells('C4'), trash=False)
    # removed:
        # p20_pipette.start_at_tip(p20_tipracks[0][0])
        # pipette automatically starts from 'A1' tiprack location
        # if re-adding, need to use p20.pipette.starting_tip() instead of p20.pipette.start_at_tip()


    # Run functions
    
    transformation_setup(generate_transformation_wells(spotting_tuples))
    heat_shock()
    phase_switch()
    spotting_tuples_cols = [col for cols in spotting_cols(spotting_tuples) for col in cols]
    unique_cols = [col for i, col in enumerate(spotting_tuples_cols) if spotting_tuples_cols.index(col) == i]
    outgrowth(cols=unique_cols, soc_well=soc_well)
    spot_transformations(spotting_tuples)
    
    print(unique_cols)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
This script defines 0 class(es) and 11 function(s), implementing logic for run(protocol:,generate_transformation_wells(spotting_tuples):,tiprack_slots(spotting_tuples,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/input_scripts/4_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19.py:
# 
"""
Created on Thu Nov 11 14:26:07 2021

@author: gbuldum11

"""

from opentrons import protocol_api
import numpy as np


# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'apiLevel': '2.8',
     'protocolName': 'DNABOT Step 4: Transformation with thermocycler and 12 wellplate',
     'description': 'Transformation reactions using an opentrons OT-2 for BASIC assembly.'}


# Example output produced by DNA-BOT for 88 constructs, uncomment and run to test the template
#spotting_tuples=[(('A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'A2', 'B2', 'C2', 'D2'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E2', 'F2', 'G2', 'H2', 'A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'H4', 'A5', 'B5', 'C5', 'D5'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E5', 'F5', 'G5', 'H5', 'A6', 'B6', 'C6', 'D6', 'E6', 'F6', 'G6', 'H6'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A7', 'B7', 'C7', 'D7', 'E7', 'F7', 'G7', 'H7', 'A8', 'B8', 'C8', 'D8'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E8', 'F8', 'G8', 'H8', 'A9', 'B9', 'C9', 'D9', 'E9', 'F9', 'G9', 'H9'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A10', 'B10', 'C10', 'D10', 'E10', 'F10', 'G10', 'H10', 'A11', 'B11', 'C11', 'D11'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E11', 'F11', 'G11', 'H11'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
#soc_well='A1'


spotting_tuples=[(('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
soc_well='A1'
__LABWARES={"p20_single": {"id": "p20_single_gen2"}, "p300_multi": {"id": "p300_multi_gen2"}, "mag_deck": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"}, "24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API version 2

    # Constants
    CANDIDATE_p20_SLOTS = ['2', '9']
    CANDIDATE_P300_SLOTS = ['3', '6']
    P20_TIPRACK_TYPE = __LABWARES['96_tiprack_20ul']['id']
    P300_TIPRACK_TYPE = __LABWARES['96_tiprack_300ul']['id']
    P20_MOUNT = 'right'
    P300_MOUNT = 'left'
    ASSEMBLY_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
    ASSEMBLY_PLATE_SLOT = '5'

    TRANSFORMATION_PLATE_TYPE = __LABWARES['transfo_plate']['id']
    SOC_PLATE_TYPE = __LABWARES['96_deepwellplate_2ml']['id']
    SOC_PLATE_SLOT = '4'
    #Removed the tuberack for waste to have space for more tipracts for 88 assemblies
    #TUBE_RACK_TYPE = 'e14151500starlab_24_tuberack_1500ul'
    #TUBE_RACK_SLOT = '11'
    #SPOTTING_WASTE_WELL = 'A1'
    AGAR_PLATE_TYPE = __LABWARES['12_corning_wellplate']['id']


        # custom labware made using Opentron's Labware Creator:
            # external dimensions:
                # footprint length = 127.76 mm
                # footrpint width = 85.48 mm
                # footprint height = 15.70 mm
                # taken from Thermofisher's documentation for Nunc Omnitray
                # https://www.thermofisher.com/document-connect/document-connect.html?url=https%3A%2F%2Fassets.thermofisher.com%2FTFS-Assets%2FLSG%2Fmanuals%2FD03023.pdf&title=VGVjaG5pY2FsIERhdGEgU2hlZXQ6IE51bmMgT21uaXRyYXk=
            # well measurements
                # depth = 0.01 mm
                # diameter =  0.01 mm
                # in old add.labware.py, they were defined as 0, but Labware Creator requires a value >0
            # spacing
                # x-offset = 14.38 mm
                # y-offset = 11.24 mm
                # x-spacing = 9.00 mm
                # y-spacing) = 9.00 mm
                # taken from Nest 96 well plates
                # https://labware.opentrons.com/nest_96_wellplate_100ul_pcr_full_skirt/
        # before using protocol, need to upload the 'nuncomnitray_96_wellplate_0.01ul.json' custom labware file into Opentrons app

    AGAR_PLATE_SLOT = '1'

    

    
    def generate_transformation_wells(spotting_tuples):
        """
        Evaluates spotting_tuples and returns transformation wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """

        wells = []
        for spotting_tuple in spotting_tuples:
            for source_well in spotting_tuple[0]:
                wells.append(source_well)
        transformation_wells = [well for i, well in enumerate(
            wells) if wells.index(well) == i]
        return transformation_wells


    def tiprack_slots(spotting_tuples, max_spot_vol=20):
        """
        Calculates p20 and p300 tiprack slots required.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        # Reactions' number
        transformation_reactions = len(generate_transformation_wells(spotting_tuples))
        spotting_reactions = 0
        for spotting_tuple in spotting_tuples:
            spots = np.array(spotting_tuple[2])/max_spot_vol
            np.ceil(spots)
            spotting_reactions = spotting_reactions + int(np.sum(spots))


        # p20 tiprack slots
        p20_tips = transformation_reactions + spotting_reactions
        p20_tiprack_slots = p20_tips // 96 + 1 if p20_tips % 96 > 0 else p20_tips / 96

        # p300 tiprack slots
        p300_tips = transformation_reactions + spotting_reactions
        p300_tiprack_slots = p300_tips // 96 + \
            1 if p300_tips % 96 > 0 else p300_tips / 96
        return int(p20_tiprack_slots), int(p300_tiprack_slots)


    def transformation_setup(transformation_wells):
        """
        Sets up transformation reactions

        Args:
        transformation_wells (list).

        """

        # Constants
        TEMP = __PARAMETERS['transfo_incubation_temp']['value']  # Incubation temperature.
        ASSEMBLY_VOL = 5  # Volume of final assembly added to competent cells.
        MIX_SETTINGS = (4, 5)  # Mix after setting during final assembly transfers.
        INCUBATION_TIME = __PARAMETERS['transfo_incubation_time']['value']  # Cells and final assembly incubation time.

        #thermocycler module gen2
        tc_mod.set_block_temperature(TEMP, block_max_volume=50)
        protocol.pause(f'Place the competent cells on thermocycler when temperature is {TEMP}°C and resume run')


        # Transfer final assemblies
        p20_pipette.transfer(ASSEMBLY_VOL,
                             [assembly_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             [transformation_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             new_tip='always',
                             mix_after=(MIX_SETTINGS))


        # Incubate for INCUBATION_TIME minutes 
        protocol.delay(minutes=INCUBATION_TIME)


    def heat_shock():
        tc_mod.set_block_temperature(42, hold_time_seconds=30, block_max_volume=50)
        tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=50)
        

    def phase_switch():
        """
        Function pauses run enabling addition/removal of labware.

        """
        protocol.pause('Remove final assembly plate. Introduce deep well plate containing SOC media. Resume run.')

    def outgrowth(
            cols,
            soc_well):
        """
        Outgrows transformed cells.

        Args:
        cols (list of str): list of cols in transformation plate containing samples.
        soc_well (str): Well containing SOC media in relevant plate.

        """

        # Constants
        SOC_VOL = 100
        SOC_MIX_SETTINGS = (4, 50)
        TEMP = 37
        OUTGROWTH_TIME = 60
        SOC_ASPIRATION_RATE = 25
        P300_DEFAULT_ASPIRATION_RATE = 150

        # Define wells
        transformation_cols = [transformation_plate.columns_by_name()[column] for column in cols]

        soc = soc_plate.wells(soc_well)

        tc_mod.set_block_temperature(20, block_max_volume=150)

        # Add SOC to transformed cells
        p300_pipette.flow_rate.aspirate = SOC_ASPIRATION_RATE
        p300_pipette.transfer(SOC_VOL, soc, transformation_cols,
                              new_tip='always', mix_after=SOC_MIX_SETTINGS)
        p300_pipette.flow_rate.aspirate = P300_DEFAULT_ASPIRATION_RATE

        # Incubate for 1 hour at TEMP °C
        tc_mod.set_block_temperature(TEMP, hold_time_minutes=60, block_max_volume=150)
        protocol.pause('Introduce the agar plate. Resume run')


    def spotting_cols(spotting_tuples):
        """
        Evaluates spotting_tuples and returns unique cols (str) associated with each spotting_tuple's source wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """
        cols_list = []
        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            cols_list.append(unique_cols)
        return cols_list


    def spot_transformations(
            spotting_tuples,
            dead_vol=0,
            spotting_dispense_rate= 1,
            stabbing_depth=13,
            max_spot_vol=20):
        """
        Spots transformation reactions.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        dead_vol (float): Dead volume aspirated during spotting.
        spotting_dispense_rate (float): Rate p20_pipette dispenses at during spotting.
        stabbing_depth (float): Depth p20_pipette moves into agar during spotting.
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        def spot(
                source,
                target,
                spot_vol):
            """
            Spots an individual reaction using the p20 pipette.

            Args:
            source (str): Well containing the transformation reaction to be spotted.
            target (str): Well transformation reaction is to be spotted to.
            spot_vol (float): Volume of transformation reaction to be spotted (uL).

            """

            # Constants
            DEFAULT_HEAD_SPEED = {'x': 400, 'y': 400,'z': 125, 'a': 125}
            SPOT_HEAD_SPEED = {'x': 400, 'y': 400, 'z': 125,'a': 125 // 4}
            DISPENSING_HEIGHT = -5
            SAFE_HEIGHT = 7  # height avoids collision with agar tray.

            # Spot
            #p20_pipette.pick_up_tip() 
            #Removed pick_up command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume
            p20_pipette.aspirate(spot_vol + dead_vol, source[0])
            # old code:
                # p20_pipette.aspirate(spot_vol + dead_vol, source)
                # returned type error because 'source' was a list containing one item (the well location)
                # source[0] takes the location out of the list

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))
            # old code:
                # p20_pipette.move_to(target.top(SAFE_HEIGHT))
                # p20_pipette.move_to(target.top(DISPENSING_HEIGHT))
                # returned attribute error because 'target' was a list containing one item (the well location)
                # target[0] takes the location out of the list

            p20_pipette.dispense(volume=spot_vol, rate=spotting_dispense_rate)

            protocol.max_speeds.update(SPOT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(SPOT_HEAD_SPEED.values()), **SPOT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            p20_pipette.move_to(target[0].top(-1 * stabbing_depth))
            # old code:
                # p20_pipette.move_to(target.top(-1*stabbing_depth))
                # returns attribute error because 'target' was a list containing one item (the well location)
            protocol.max_speeds.update(DEFAULT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(DEFAULT_HEAD_SPEED.values()), **DEFAULT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            # the code below makes sure that the transformend cells are efficiently reaching to the agar surface

            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))

            p20_pipette.blow_out()

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            # old code:
                # p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
                # returns attribute error because 'target' was a list containing one item (the well location)

                # the simple .blow_out command blows out at current position (spotting waste) by defualt
                # unlike blowout=true in complex commands, which by default will blow out in waste

            #p20_pipette.drop_tip()
            #Removed drop_tip command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume

        #Each set of 12 transformants(A1-D2, E2-H3,..) will be spotted in a few rounds (20 microl + 20 microl...). Once the spotting of one column is finished, introduce the new plate and continue.

        def spot_tuple(spotting_tuple):
            """
            Spots all reactions defined by the spotting tuple. Requires the function spot.

            Args:
            spotting_tuple (tuple): Spotting reactions given in the form: (source wells), (target wells), (spotting volumes).
            Each unique source well is resuspended once prior to spotting.

            """
            source_wells = spotting_tuple[0]
            target_wells = spotting_tuple[1]
            spot_vols = list(spotting_tuple[2])
            
            while max(spot_vols) > 0:
                #p20_pipette.pick_up_tip()
                for index, spot_vol in enumerate(spot_vols):
                    spot_times = spot_vols[index]/max_spot_vol
                    p20_pipette.pick_up_tip()
                    for i in range(int(spot_times)):
                        if spot_vol == 0:
                            pass
                        else:
                            vol = spot_vol if spot_vol <= max_spot_vol else max_spot_vol
                            spot(source = transformation_plate.wells(source_wells[index]), target = agar_plate.wells(target_wells[index]), spot_vol = vol)
                            spot_vols[index] = spot_vols[index] - vol*spot_times
                    p20_pipette.drop_tip()
                    if target_wells[index] == 'C4':
                        protocol.pause('Introduce new well plate. Resume run.')  
                    else:
                        continue                    

        # Constants
        TRANSFORMATION_MIX_SETTINGS = [4, 50]

        # Spot transformation reactions
            # Each unique transformation well is resuspended once prior to spotting.

        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            #unique_cols = list(set(source_wells_cols))
            #unique_cols.sort()
            int_unique_cols=list(map(int, unique_cols))
            if len(unique_cols)>1:
              if int_unique_cols[1]%3==0:
                unique_cols.remove(unique_cols[0])
              else:
                pass
            
            for col in unique_cols:
                p300_pipette.pick_up_tip()
                p300_pipette.mix(TRANSFORMATION_MIX_SETTINGS[0], TRANSFORMATION_MIX_SETTINGS[1],transformation_plate.columns_by_name()[col][0])
                p300_pipette.drop_tip()
            spot_tuple(spotting_tuple)

    # Tiprack slots
    p20_p300_tiprack_slots = tiprack_slots(spotting_tuples)
    p20_slots = CANDIDATE_p20_SLOTS[:p20_p300_tiprack_slots[0]]
    p300_slots = CANDIDATE_P300_SLOTS[:p20_p300_tiprack_slots[1]]

    # Define labware
    p20_tipracks = [protocol.load_labware(P20_TIPRACK_TYPE, slot) for slot in p20_slots]
        # changed to protocol.load_labware for API version 2
    p300_tipracks = [protocol.load_labware(P300_TIPRACK_TYPE, slot) for slot in p300_slots]
        # changed to protocol.load_labware for API version 2
    p20_pipette = protocol.load_instrument(__LABWARES['p20_single']['id'], P20_MOUNT, tip_racks=p20_tipracks)
        # changed to protocol.load_instrument for API version 2
    p300_pipette = protocol.load_instrument(__LABWARES['p300_multi']['id'], P300_MOUNT, tip_racks=p300_tipracks)
        # changed to protocol.load_instrument for API version 2

    assembly_plate = protocol.load_labware(ASSEMBLY_PLATE_TYPE, ASSEMBLY_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    #tc_mod = protocol.load_module('thermocycler module gen2')
    transformation_plate = tc_mod.load_labware(TRANSFORMATION_PLATE_TYPE)
        # changed to protocol.load_labware for API version 2
        # removed share=True, not required in API version 2
        # removed TEMPDECK_SLOT as it is loaded directly onto temperature module
    soc_plate = protocol.load_labware(SOC_PLATE_TYPE, SOC_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    #tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_SLOT)
        # changed to protocol.load_labware for API version 2
    #spotting_waste = tube_rack.wells(SPOTTING_WASTE_WELL)
    agar_plate = protocol.load_labware(AGAR_PLATE_TYPE, AGAR_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2


    ### Run protocol

    # Register agar_plate for calibration
    p20_pipette.transfer(1, agar_plate.wells('A1'), agar_plate.wells('C4'), trash=False)
    # removed:
        # p20_pipette.start_at_tip(p20_tipracks[0][0])
        # pipette automatically starts from 'A1' tiprack location
        # if re-adding, need to use p20.pipette.starting_tip() instead of p20.pipette.start_at_tip()


    # Run functions
    
    transformation_setup(generate_transformation_wells(spotting_tuples))
    heat_shock()
    phase_switch()
    spotting_tuples_cols = [col for cols in spotting_cols(spotting_tuples) for col in cols]
    unique_cols = [col for i, col in enumerate(spotting_tuples_cols) if spotting_tuples_cols.index(col) == i]
    outgrowth(cols=unique_cols, soc_well=soc_well)
    spot_transformations(spotting_tuples)
    
    print(unique_cols)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
This file is a ASCII text with a size of 216 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
No expected file selected for assembly (3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19). Created a template: expected_outputs/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
This file is a ASCII text with a size of 123 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
No differences found for assembly (3_assembly_ot2_Thermocycler_Gen2_APIv2_19). Transformed script matches expected output.

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
This file is a ASCII text, with very long lines (1079) with a size of 25735 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.log:
--- transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py+++ expected_outputs/working_template_clip.py@@ -6,100 +6,134 @@ 
 #metadata
 metadata = {
-     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler (Flex Protocol)',
+     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler',
      'description': 'Implements linker ligation reactions using an opentrons Flex, including the thermocycler module gen2.'
 }
-requirements = {
-    'apiLevel': '2.19',
-    'robotType': 'Flex'
-}
+
+requirements = {"robotType": "Flex", "apiLevel": "2.19"}
 # linkers_volume=20
 # parts_volume=20
 
 # example dictionary produced by DNA-BOT for a single construct containing 4 parts, un-comment and run to test the template
-clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
-            "prefixes_plates": ["2", "2", "2", "2"],
-            "suffixes_wells": ["A2", "B2", "C2", "D2"],
-            "suffixes_plates": ["2", "2", "2", "2"],
-            "parts_wells": ["A3", "B3", "C3", "D3"],
-            "parts_plates": ["2", "2", "2", "2"],
-            "parts_vols": [1, 1, 1, 1],
-            "water_vols": [7.0, 7.0, 7.0, 7.0]}
+# clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
+#             "prefixes_plates": ["2", "2", "2", "2"],
+#             "suffixes_wells": ["A2", "B2", "C2", "D2"],
+#             "suffixes_plates": ["2", "2", "2", "2"],
+#             "parts_wells": ["A3", "B3", "C3", "D3"],
+#             "parts_plates": ["2", "2", "2", "2"],
+#             "parts_vols": [1, 1, 1, 1],
+#             "water_vols": [7.0, 7.0, 7.0, 7.0]}
 
 # __LABWARES is expected to be redefined by "generate_ot2_script" method
 # Test dict - values used here for simulation use generic Opentrons definitions to avoid
 # specifying custom labware in simulate, which is not straightforward
 # custom labware currently commented out
-__LABWARES={
-    "flex_1channel_50": {"id": "flex_1channel_50"}, 
-    "flex_1channel_1000": {"id": "flex_8channel_1000"}, 
-    "flex_magnetic_block": {"id": "magdeck"}, 
-    "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
-    "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"},
-    "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
-    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    #comment in out equipment below for simulate or run
-    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
-    #"flex_mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
-    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
-    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
-    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
-    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
-    #"flex_mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
-    "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
-    "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, 
-    "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}
-        #BELOW is the code that defines the labwares in the clip script
-        # self.user_settings['labwares']['flex_1channel_50']['id'] = self.labware_p10_single_entry.get()
-        # self.user_settings['labwares']['flex_1channel_1000']['id'] = self.labware_p300_multi_entry.get()
-        # self.user_settings['labwares']['flex_magnetic_block']['id'] = self.labware_mag_deck_entry.get()
-        # self.user_settings['labwares']['opentrons_24_tuberack_nest_1.5ml_snapcap']['id'] = self.labware_opentrons_24_tuberack_nest_1.5ml_snapcap_entry.get()
-        # self.user_settings['labwares']['96_tiprack_20ul']['id'] = self.labware_96_tiprack_20ul_entry.get()
-        # self.user_settings['labwares']['96_tiprack_300ul']['id'] = self.labware_96_tiprack_300ul_entry.get()
-        # self.user_settings['labwares']['clip_source_plate']['id'] = self.labware_clip_source_plate_entry.get()
-        # self.user_settings['labwares']['clip_plate']['id'] = self.labware_clip_plate_entry.get()
-        # self.user_settings['labwares']['flex_mix_plate']['id'] = self.labware_mix_plate_entry.get()
-        # self.user_settings['labwares']['final_assembly_plate']['id'] = self.labware_final_assembly_plate_entry.get()
-        # self.user_settings['labwares']['transfo_plate']['id'] = self.labware_transfo_plate_entry.get()
-        # self.user_settings['labwares']['transfo_plate_wo_thermo']['id'] = self.labware_transfo_plate_wo_thermo_entry.get()
-        # self.user_settings['labwares']['flex_agar_plate']['id'] = self.agar_plate_entry.get()
-        # self.user_settings['labwares']['flex_12_reservoir_15ml']['id'] = self.labware_12_reservoir_21000ul_entry.get()
-        # self.user_settings['labwares']['flex_deepwell_plate']['id'] = self.labware_96_deepwellplate_2ml_entry.get()
-        # self.user_settings['labwares']['12_corning_wellplate']['id'] = self.labware_12_corning_wellplate_entry.get()
-
-__PARAMETERS={
-    "clip_keep_thermo_lid_closed": {"id": "No"},
-    "premix_linkers": {"id": 'Yes'},
-    "premix_parts": {"id": 'Yes'},
-    "parts_volume": {"value": 30},
-    "linkers_volume": {"value": 20},
-    "thermo_temp": {"value": 4}
-}
+# __LABWARES={
+#     #comment in out equipment below for simulate or run    
+#     "p20_single": {"id": "p20_single_gen2"}, 
+#     "p300_multi": {"id": "p300_multi_gen2"}, 
+#     "mag_deck": {"id": "magneticModuleV1"}, 
+#     "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
+#     "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
+#     "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
+#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
+#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
+#     "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+#     "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, 
+#     "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}
+        
+# __PARAMETERS={
+#     "clip_keep_thermo_lid_closed": {"id": "No"},
+#     "premix_linkers": {"id": 'Yes'},
+#     "premix_parts": {"id": 'Yes'},
+#     "parts_volume": {"value": 30},
+#     "linkers_volume": {"value": 20},
+#     "thermo_temp": {"value": 4}
+# }
 
 # Parameters for the clip reaction step
 # self.user_settings["parameters"]["clip_keep_thermo_lid_closed"]["value"] = to_numeric_value(self.param_clip_thermo_lid_closed.get())
 
 
-clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], "prefixes_plates": ["2", "2", "2", "2", "2", "2"], "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], "suffixes_plates": ["2", "2", "2", "2", "2", "2"], "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], "parts_plates": ["2", "2", "2", "2", "2", "2"], "parts_vols": [1, 1, 1, 1, 1, 1], "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
-__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
-__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}
+clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], 
+            #"prefixes_plates": ["2", "2", "2", "2", "2", "2"], 
+            "prefixes_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
+            "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], 
+            #"suffixes_plates": ["2", "2", "2", "2", "2", "2"], 
+            "suffixes_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
+            "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], 
+            #"parts_plates": ["2", "2", "2", "2", "2", "2"], 
+            "parts_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
+            "parts_vols": [1, 1, 1, 1, 1, 1], 
+            "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
+__LABWARES={
+            #"p20_single": {"id": "p20_single_gen2"}, 
+            "p20_single": {"id": "flex_1channel_50"},
+            #"p300_multi": {"id": "p300_multi_gen2"}, 
+            "p300_multi": {"id": "flex_8channel_50"},  
+            #"mag_deck": {"id": "magneticModuleV1"}, 
+            "mag_deck": {"id": "magneticBlockV1"},
+            #"96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"},
+            "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
+            #"96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
+            "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, 
+            #"24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, 
+            "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
+            #"clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            #"clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            #"mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
+            "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, 
+            "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, 
+            "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"},
+            "clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+            "mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
+            "clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"}
+            }
+__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, 
+              "premix_linkers": {"value": "Yes", "id": "Yes"}, 
+              "premix_parts": {"value": "Yes", "id": "Yes"},
+              "linkers_volume": {"value": 20}, 
+              "parts_volume": {"value": 20}, 
+              "thermo_temp": {"value": 4}, 
+              #"purif_magdeck_height": {"value": 10.8}, 
+              "purif_wash_time": {"value": 0.5}, 
+              "purif_bead_ratio": {"value": 1.8}, 
+              "purif_incubation_time": {"value": 5}, 
+              "purif_settling_time": {"value": 2}, 
+              "purif_drying_time": {"value": 5}, 
+              "purif_elution_time": {"value": 2}, 
+              "transfo_incubation_temp": {"value": 4}, 
+              "transfo_incubation_time": {"value": 20}}
 
 
 def run(protocol: protocol_api.ProtocolContext):
 
     ### Constants - these have been moved out of the def clip() for clarity
 
+    #flex need trash bin
+    trash = protocol.load_trash_bin("A3")
     #Tiprack
     tiprack_type=__LABWARES['96_tiprack_20ul']['id']
     INITIAL_TIP = 'A1'
+    #CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']
     CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']
 
     # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
-    PIPETTE_TYPE = __LABWARES['flex_1channel_50']['id']
+    PIPETTE_TYPE = __LABWARES['p20_single']['id']
     PIPETTE_MOUNT = 'right'
         ### Load Pipette
         # checks if it's a P20 Single pipette
@@ -107,7 +141,7 @@         print('Define labware must be changed to use', PIPETTE_TYPE)
         exit()
     #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
-    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
+    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2", location = "B1")
     tc_mod.open_lid()
     tc_mod.deactivate_lid()
     tc_mod.set_block_temperature(temperature=__PARAMETERS['thermo_temp']['value']) 
@@ -121,14 +155,13 @@             # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
 
     # Tube Rack
-    TUBE_RACK_TYPE = __LABWARES['opentrons_24_tuberack_nest_1.5ml_snapcap']['id']
+    TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
             # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
-    TUBE_RACK_POSITION = '4'
+    #TUBE_RACK_POSITION = '4'
+    TUBE_RACK_POSITION = '1'
     MASTER_MIX_WELL = 'A1'
     WATER_WELL = 'A2'
     MASTER_MIX_VOLUME = 20
-
-    # Old Mix settings
 
     #choose to enable pre-mix for prefixes/suffixes and parts plate
     #Mix_linkers_bool = __PARAMETERS["premix_linkers"]['id']
@@ -145,9 +178,9 @@     def mix_linkers_function(Mix_linkers_bool, clips_dict, pipette_name, source_plates):
         pipette = pipette_name
         #pipetting speeds - default rates in ul /s
-        pipette.flow_rate.aspirate = 6
-        pipette.flow_rate.dispense = 6
-        pipette.flow_rate.blow_out = 15
+        pipette.flow_rate.aspirate = 50
+        pipette.flow_rate.dispense = 50
+        pipette.flow_rate.blow_out = 100
         #pipetting rates below - expressed as multiple of default 
         high = 2.5
         normal = 1
@@ -189,35 +222,35 @@             ##Execute the mix 
             # [clip_num,0] addresses the plate location
             # [clip_num,1] addresses the well location
-            for clip_num in range(len(prefixes_unique)):
+            for clip_num in range(len(prefixes_unique)):  #high = 2.5, normal = 1, slow = 0.5,  vslow = 0.
                 pipette.pick_up_tip()
-                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
-                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=high)
-                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
-                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
-                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
+                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]], rate=normal)
+                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(3), rate=high)
+                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
+                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(2), rate=normal)
+                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=slow)
                 protocol.delay(seconds=1)
                 pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                 pipette.move_to(source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                 pipette.blow_out()
                 pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-                pipette.drop_tip(trash['B1'])
-
-            for clip_num in range(len(suffixes_unique)):
+                pipette.drop_tip()
+
+            for clip_num in range(len(suffixes_unique)):  
                 pipette.pick_up_tip()
                 pipette.well_bottom_clearance.aspirate = 2  # tip is x mm above well bottom
                 pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
-                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
+                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(2), rate=normal)
                 pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=high)
-                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
+                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(2), rate=normal)
                 pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=normal)
-                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
+                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=slow)
                 protocol.delay(seconds=1)
                 pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                 pipette.move_to(source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                 pipette.blow_out()
                 pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-                pipette.drop_tip(trash['B1'])
+                pipette.drop_tip()
         else:
             pass
 
@@ -255,17 +288,17 @@                 pipette.pick_up_tip()
                 pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
                 pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
-                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
+                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                 pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
-                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
-                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=normal)
-                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1.5), rate=slow)
+                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
+                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
+                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                 protocol.delay(seconds=1)
-                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=vslow, push_out=part_vol/20)
+                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=slow, push_out=part_vol/20)
                 pipette.move_to(source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].top(-5)) # move to 5mm below the top of current well
                 pipette.blow_out()
                 pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-                pipette.drop_tip(trash['B1'])
+                pipette.drop_tip()
             else:
                 pass
 
@@ -370,8 +403,7 @@         normal = 1
         slow = 0.5
         vslow = 0.2
-        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
-        pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
+
         
         # get the location at the center of well A1
         # center_location = plate["A1"].center()
@@ -386,10 +418,11 @@         # pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
         
         # transfer master mix into destination wells
-                
+        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
+        pipette.well_bottom_clearance.dispense = 0  # tip is y mm above well bottom        
         pipette.pick_up_tip()
-        pipette.transfer(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='destination well', new_tip='never', rate=slow)
-        pipette.drop_tip(trash['B1'])
+        pipette.distribute(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
+        pipette.drop_tip()
 
         # transfer water into destination wells
         pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
@@ -397,7 +430,7 @@         
         pipette.pick_up_tip()
         pipette.distribute(water_vols, water, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
-        pipette.drop_tip(trash['B1'])
+        pipette.drop_tip()
 
         # OLD transfer prefixes, suffixes, and parts into destination wells     
         #for clip_num in range(len(parts_wells)):
@@ -423,7 +456,7 @@             pipette.move_to(destination_wells[clip_num].top(-5))
             pipette.blow_out()
             pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-            pipette.drop_tip(trash['B1'])
+            pipette.drop_tip()
             #Suffix Transfer
             pipette.pick_up_tip()
             pipette.aspirate(1, source_plates[suffixes_plates[clip_num]][suffixes_wells[clip_num]].bottom(1), rate=slow)
@@ -438,7 +471,7 @@             pipette.move_to(destination_wells[clip_num].top(-5))
             pipette.blow_out()
             pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-            pipette.drop_tip(trash['B1'])
+            pipette.drop_tip()
             #Part Transfer
             pipette.pick_up_tip()
             pipette.aspirate(parts_vols[clip_num], source_plates[parts_plates[clip_num]][parts_wells[clip_num]].bottom(1), rate=slow)
@@ -453,7 +486,7 @@             pipette.move_to(destination_wells[clip_num].top(-5))
             pipette.blow_out()
             pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
-            pipette.drop_tip(trash['B1'])
+            pipette.drop_tip()
 
     # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
     clip(**clips_dict)
@@ -484,7 +517,7 @@         tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
         # Temperature will be maintained even after the end of the script
     else:
-        tc_mod.set_lid_temperature(105)
+        tc_mod.set_lid_temperature(37)
         tc_mod.open_lid()
          #output command actions in simulate
         for line in protocol.commands(): 

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.log ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.log:
This file is a ASCII text with a size of 118 bytes.
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/logs/diffs_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.log:
No differences found for purification (2_MRes_purification_ot2_APIv2_19). Transformed script matches expected output.

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/pipeline.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/pipeline.py:
This script defines 0 class(es) and 10 function(s), implementing logic for infer_reaction_from_filename(filename):,run_transformation(input_file,,compare_files(file1,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/pipeline.py:
This script includes the following components:
- Imports: subprocess,difflib yaml,pathlib datetime
- Functions:
  - Function 'infer_reaction_from_filename': Runs inference on new data using a trained model.\nAdditional comments: # # Timestamp for unique filenames
  - Function 'run_transformation': 
  - Function 'compare_files': 
  - Function 'parse_diffs': Parses sentences into syntactic trees or structures.
  - Function 'validate_yaml': Validates infrastructure or configuration before deploying to production.
  - Function 'validate_transform': Validates infrastructure or configuration before deploying to production.
  - Function 'generate_report': Generates text based on a language model (e.g., GPT, BERT).
  - Function 'control_step': 
  - Function 'process_pipeline': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/pipeline.py:
import subprocess
import difflib
import yaml
from pathlib import Path
from datetime import datetime

# Directory paths
BASE_DIR = Path(".")  # Ensure paths are relative to the working directory
INPUT_DIR = BASE_DIR / "input_scripts"
EXPECTED_DIR = BASE_DIR / "templates"
TRANSFORMED_DIR = BASE_DIR / "transformed_scripts"
CONFIG_DIR = BASE_DIR / "configs"
LOG_DIR = BASE_DIR / "logs"

# Predefined reaction types
REACTIONS = ["clip", "purification", "assembly", "transformation"]

# Timestamp for unique filenames
TIMESTAMP = datetime.now().strftime("%Y%m%d_%H%M%S")


def infer_reaction_from_filename(filename):
    """
    Infer the reaction type from the filename.
    Example: "oldclip.py" -> "clip"
    """
    for reaction in REACTIONS:
        if reaction in filename.lower():  # Case-insensitive matching
            return reaction
    return None


def run_transformation(input_file, output_file, direction, reaction):
    """
    Run transform.py to generate the transformed script.
    """
    input_file = str(input_file.relative_to(BASE_DIR))  # Use relative paths
    output_file = str(output_file.relative_to(BASE_DIR))  # Use relative paths

    cmd = [
        "python", "transform.py",
        "--reaction", reaction,
        direction,
        input_file,
        output_file
    ]

    if not (BASE_DIR / input_file).exists():
        raise FileNotFoundError(f"Error: {input_file} does not exist.")

    try:
        subprocess.run(cmd, check=True)
        print(f"[SUCCESS] Transformation completed for {reaction}: {output_file}")
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Transformation failed for {reaction}: {e}")
        raise


def compare_files(file1, file2):
    """
    Compare two files and return differences as a list of strings.
    """
    if not Path(file1).exists():
        print(f"[WARNING] Transformed file '{file1}' is missing. Skipping comparison.")
        return None
    if not Path(file2).exists():
        print(f"[WARNING] Expected output file '{file2}' is missing. Skipping comparison.")
        return None

    with open(file1, "r") as f1, open(file2, "r") as f2:
        lines1 = f1.readlines()
        lines2 = f2.readlines()

    diff = difflib.unified_diff(
        lines1, lines2, fromfile=file1, tofile=file2, lineterm=""
    )
    return list(diff)


def parse_diffs(log_file):
    """
    Parse the diffs.log file to extract actionable changes.
    """
    changes = []
    with open(log_file, "r") as file:
        current_file = None
        for line in file:
            if line.startswith("---") or line.startswith("+++"):
                current_file = line.split()[-1]
            elif line.startswith("- ") or line.startswith("+ "):
                changes.append((current_file, line.strip()))
    return changes


def validate_yaml(diffs, yaml_file):
    """
    Validate that the YAML file addresses changes in diffs.log.
    """
    with open(yaml_file, "r") as file:
        yaml_data = yaml.safe_load(file)

    missing_entries = []
    for file, change in diffs:
        if file.endswith(yaml_file.name):
            if "thermocycler" in change and "thermocycler" not in yaml_data.get("deckSetup", {}):
                missing_entries.append(change)
            if "magnetic_block" in change and "magnetic_block" not in yaml_data.get("deckSetup", {}):
                missing_entries.append(change)

    return missing_entries


def validate_transform(diffs, transform_file):
    """
    Validate that transform.py handles all required transformations.
    """
    with open(transform_file, "r") as file:
        transform_code = file.read()

    unsupported_changes = []
    for file, change in diffs:
        if file.endswith("transform.py"):
            if "thermocycler" in change and "_handle_thermocycler" not in transform_code:
                unsupported_changes.append(change)
            if "magnetic_block" in change and "_handle_magnetic_block" not in transform_code:
                unsupported_changes.append(change)

    return unsupported_changes


def generate_report(reaction, diff_comparison, yaml_validation, transform_validation, log_file, input_file, transformed_file, expected_file=None, append=False):
    """
    Generate a report based on validation results.
    Includes the input, transformed, and (if applicable) expected file paths for context.
    """
    mode = "a" if append else "w"
    with open(log_file, mode) as log:
        log.write(f"\n=== Validation Report for Reaction: {reaction} ===\n")
        log.write(f"Input Script: {input_file}\n")
        log.write(f"Transformed Script: {transformed_file}\n")
        if expected_file:
            log.write(f"Expected Script: {expected_file}\n")
        else:
            log.write("Expected Script: None (No comparison performed)\n")

        log.write("\n--- Step 1: Transform Validation ---\n")
        if diff_comparison:
            log.write("Differences between transformed script and expected output:\n")
            log.writelines(diff_comparison)
        else:
            log.write("Transformed script matches expected output or no comparison performed.\n")

        log.write("\n--- Step 2: YAML Validation ---\n")
        if yaml_validation:
            log.write("Missing or incorrect entries in YAML:\n")
            for entry in yaml_validation:
                log.write(f"- {entry}\n")
        else:
            log.write("All changes are reflected in YAML.\n")

        log.write("\n--- Step 3: Transform.py Validation ---\n")
        if transform_validation:
            log.write("Unsupported changes in transform.py:\n")
            for entry in transform_validation:
                log.write(f"- {entry}\n")
        else:
            log.write("All changes are handled in transform.py.\n")

        print(f"[INFO] Validation report for {reaction} saved to {log_file}")


def control_step(reaction, input_file, transformed_script, expected_file):
    """
    Control step to confirm, skip, or abort the pipeline for a specific reaction.
    Parameters:
        reaction (str): Reaction type (e.g., clip, purification).
        input_file (Path): Input file path.
        transformed_script (Path): Transformed script path.
        expected_file (Path or None): Expected file path.
    Returns:
        bool: True if the reaction should proceed, False to skip.
    """
    print("\n--- Pipeline Execution Control ---")
    print(f"Reaction: {reaction}")
    print(f"Input File: {input_file}")
    print(f"Transformed Script: {transformed_script}")
    print(f"Expected Output File: {expected_file if expected_file else 'Not Found'}")
    print("\nOptions:")
    print("[C]ontinue: Proceed with this reaction.")
    print("[S]kip: Skip this reaction and move to the next.")
    print("[A]bort: Stop the pipeline.")
    
    while True:
        user_choice = input("Enter your choice (C/S/A): ").strip().lower()
        if user_choice == "c":
            return True  # Continue with the pipeline
        elif user_choice == "s":
            print(f"[INFO] Skipping reaction: {reaction}")
            return False  # Skip this reaction
        elif user_choice == "a":
            print("[INFO] Aborting the pipeline.")
            sys.exit(0)  # Abort the entire pipeline
        else:
            print("[WARNING] Invalid choice. Please enter C, S, or A.")

def process_pipeline():
    """
    Process input and expected files to validate transformations.
    Dynamically updates available expected outputs after each step.
    """
    LOG_DIR.mkdir(exist_ok=True)  # Ensure log directory exists
    validation_log = LOG_DIR / f"validation_{TIMESTAMP}.log"  # Single comprehensive validation log

    def update_expected_files():
        """
        Update the dictionary of expected files dynamically from the `templates` folder.
        """
        return {f: infer_reaction_from_filename(f.name) for f in EXPECTED_DIR.iterdir() if f.suffix == ".py"}

    # Initial load of expected files
    expected_files = update_expected_files()

    # Collect input files
    input_files = {f: infer_reaction_from_filename(f.name) for f in INPUT_DIR.iterdir() if f.suffix == ".py"}

    for input_file, reaction in input_files.items():
        if not reaction:
            print(f"[WARNING] Skipping unknown reaction type in file: {input_file.name}")
            continue

        try:
            # Extract the base name of the input file
            original_name = input_file.stem

            # File paths for this file
            transformed_script = TRANSFORMED_DIR / f"transformed_{reaction}_{original_name}_{TIMESTAMP}.py"
            diffs_log = LOG_DIR / f"diffs_{reaction}_{original_name}_{TIMESTAMP}.log"
            yaml_file = CONFIG_DIR / f"{reaction}.yaml"
            individual_validation_log = LOG_DIR / f"validation_{reaction}_{original_name}_{TIMESTAMP}.log"

            # Present user options for the expected file
            matching_expected_files = [
                f for f, r in expected_files.items() if r == reaction
            ]

            print(f"\n--- Processing {input_file.name} ({reaction}) ---")
            print(f"[INFO] Available template files for {reaction}:")
            for idx, file in enumerate(matching_expected_files, start=1):
                print(f"{idx}: {file.name}")
            print(f"{len(matching_expected_files) + 1}: None (Skip comparison)")
            print("A: Abort the pipeline")
            print("S: Skip this file")
            print("C: Continue (new template will be created).")

            choice = input("Choose an option: ").strip().upper()
            if choice == "A":
                print("[INFO] Aborting pipeline.")
                return
            elif choice == "S":
                print(f"[INFO] Skipping file: {input_file.name}")
                continue
            elif choice == "C":
                expected_file = None
            else:
                try:
                    selected_index = int(choice)
                    if 1 <= selected_index <= len(matching_expected_files):
                        expected_file = matching_expected_files[selected_index - 1]
                    else:
                        print("[ERROR] Invalid selection. Skipping.")
                        continue
                except ValueError:
                    print("[ERROR] Invalid input. Skipping.")
                    continue

            # Step 1: Run Transformation
            run_transformation(input_file, transformed_script, "-of", reaction)

            # Step 2: Compare Transformed Script with Selected Expected Output
            if expected_file:
                diff_comparison = compare_files(str(transformed_script), str(expected_file))

                # Generate diffs log
                with open(diffs_log, "w") as log_file:
                    if diff_comparison:
                        log_file.writelines(diff_comparison)
                        print(f"[INFO] Diffs log generated for {reaction} ({original_name}): {diffs_log}")
                    else:
                        log_file.write(f"No differences found for {reaction} ({original_name}). Transformed script matches expected output.\n")
                        print(f"[INFO] No differences found for {reaction} ({original_name}).")
            else:
                # No expected file selected: create a template
                expected_template = EXPECTED_DIR / f"first_template_{reaction}_{original_name}_{TIMESTAMP}.py"
                expected_template.write_text(transformed_script.read_text())
                print(f"[INFO] No expected file chosen for {reaction} ({original_name}). Created: {expected_template}")
                diff_comparison = None

                # Write to diffs log indicating that no expected file was selected
                with open(diffs_log, "w") as log_file:
                    log_file.write(f"No expected file selected for {reaction} ({original_name}). Created a template: {expected_template}\n")
                    print(f"[INFO] Diffs log generated for {reaction} ({original_name}): {diffs_log}")

            # Step 3: Validate YAML and transform.py Against diffs.log
            diffs = parse_diffs(diffs_log) if diffs_log.exists() else []
            yaml_validation = validate_yaml(diffs, yaml_file)
            transform_validation = validate_transform(diffs, "transform.py")

            # Step 4: Generate Reports
            generate_report(reaction, diff_comparison, yaml_validation, transform_validation, individual_validation_log)
            generate_report(reaction, diff_comparison, yaml_validation, transform_validation, validation_log, append=True)

            # Update expected files dynamically after each step
            expected_files = update_expected_files()

        except Exception as e:
            print(f"[ERROR] Pipeline failed for {reaction} ({original_name}): {e}")

if __name__ == "__main__":
    process_pipeline()

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler Gen2 (Flex Protocol)',
    'description': 'DNABOT Step 3: Assembly with thermocycler Gen2',
    }
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}
# Construct assemblies are set up on thermocycler module gen2 by combining purified clip parts.

# Test dictionary can be used for simulation 3 or 88 assemblies
final_assembly_dict={
 "A1": ['A7', 'B7', 'C7', 'F7','E7'], 
 "B1": ['A7', 'B7', 'D7', 'G7'], 
 "C1": ['A7', 'B7', 'E7', 'H7']
 }
tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - generic labware for simulation
__LABWARES={
     "flex_1channel_50": {"id": "flex_1channel_50"}, 
     #"flex_1channel_1000": {"id": "flex_8channel_1000"}, 
     #"flex_magnetic_block": {"id": "magdeck"},
     "clip_plate":{"id":"armadillo_96_wellplate_200ul_pcr_full_skirt"},
     "final_assembly_plate":{"id":"armadillo_96_wellplate_200ul_pcr_full_skirt"},
     "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
     #"96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, 
     "24_tuberack_2000ul": {"id": "opentrons_24_tuberack_generic_2ml_screwcap"}, 
     #"96_wellplate_200ul_pcr_step_14": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"96_wellplate_200ul_pcr_step_23": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"agar_plate_step_4": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, 
     #"flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}
     #corning_12_wellplate_6.9ml_flat
     }

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], "B1": ["A7", "B7", "C7", "D7", "E7"], "C1": ["A7", "B7", "C7", "F7"], "D1": ["A7", "B7", "C7", "F7"]}
tiprack_num=1
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            CLIP_PLATE_TYPE = __LABWARES['clip_plate']['id']
            CLIP_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['24_tuberack_2000ul']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['flex_1channel_50']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            purified_clip_plate = protocol.load_labware(CLIP_PLATE_TYPE, CLIP_PLATE_POSITION)
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
                  
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.open_lid()
            tc_mod.deactivate_lid()
            tc_mod.set_block_temperature(4)

             # Master mix transfers
            final_assembly_lengths = []
            for values in final_assembly_dict.values():
                final_assembly_lengths.append(len(values))
            unique_assemblies_lengths = list(set(final_assembly_lengths))
            master_mix_well_letters = ['A', 'B', 'C', 'D']

            for x in unique_assemblies_lengths:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lengths in enumerate(final_assembly_lengths) if lengths == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.flow_rate.aspirate = 6
                pipette.flow_rate.dispense = 6
                pipette.flow_rate.blow_out = 15
                high = 2
                normal = 1
                slow = 0.5
                vslow = 0.2
                pipette.well_bottom_clearance.aspirate = 1 
                pipette.well_bottom_clearance.dispense = 2

                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type  
                    pipette.distribute(TOTAL_VOL - x * PART_VOL, tube_rack[master_mix_well], destination_plate[destination_well],blow_out=True, blowout_location="source well", new_tip='never')
                pipette.drop_tip(trash['B1'])

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# purified_clip_plate.wells and destination_plate.wells in the same type
                    #pipette.transfer(PART_VOL, purified_clip_plate.wells(value), destination_plate.wells(key), mix_after=MIX_SETTINGS, new_tip='always')#transfer parts in one tube
                    pipette.pick_up_tip()
                    pipette.well_bottom_clearance.aspirate = 1  # tip is 2 mm above well bottom
                    pipette.well_bottom_clearance.dispense = 2  # tip is 2 mm above well bottom
                    #Prefix Transfer
                    pipette.aspirate(PART_VOL, purified_clip_plate[value].bottom(1), rate=slow)
                    pipette.dispense(PART_VOL, destination_plate[key].bottom(2), rate=slow)
                    #mix after transfer
                    pipette.aspirate(2, destination_plate[key].bottom(1), rate=normal)
                    pipette.dispense(2, destination_plate[key].bottom(3), rate=high)
                    pipette.aspirate(3, destination_plate[key].bottom(2), rate=normal)
                    pipette.dispense(3, destination_plate[key].bottom(1), rate=normal)
                    pipette.aspirate(4, destination_plate[key].bottom(2), rate=slow)
                    pipette.dispense(4, destination_plate[key].bottom(3), push_out=0.5, rate=vslow)
                    pipette.move_to(destination_plate[key].top(-8))
                    pipette.blow_out()
                    pipette.touch_tip(radius=0.6, v_offset=-8, speed=10)
                    pipette.drop_tip(trash['B1'])

            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(105)
            protocol.delay(seconds=120)
            tc_mod.deactivate_lid()
            tc_mod.open_lid()
            tc_mod.set_block_temperature(4)
            #for line in protocol.commands(): 
                #print(line)

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)
    
    #output command actions in simulate
    for line in protocol.commands(): 
       print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_055554.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_055554.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_055554.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_055554.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler (Flex Protocol)',
    'description': 'DNABOT Step 3: Assembly with thermocycler',
    }
requirements = {
    'apiLevel': '2.8',
    'robotType': 'Flex'
}

# It is possible to run 88 assemblies with this new module. The heat block module is removed. 
# Assembly reactions is set up on thermocycler module gen2.


# test dictionary can be used for simulation 3 or 88 assemblies
#final_assembly_dict={"A1": ['A7', 'B7', 'C7', 'F7'], "B1": ['A7', 'B7', 'D7', 'G7'], "C1": ['A7', 'B7', 'E7', 'H7']}
#tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magdeck"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], 
                     "B1": ["A7", "B7", "C7", "D7", "E7"], 
                     "C1": ["A7", "B7", "C7", "F7"], 
                     "D1": ["A7", "B7", "C7", "F7"]
                     }
tiprack_num=1
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            MAG_PLATE_TYPE = __LABWARES['clip_plate']['id']
            MAG_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['opentrons_24_tuberack_nest_1.5ml_snapcap']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['flex_1channel_50']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            #magbead_plate = protocol.load_labware(MAG_PLATE_TYPE, MAG_PLATE_POSITION)
            magbead_plate = protocol.load_module(module_name=__LABWARES['flex_magnetic_block']['id'], location = 'MAG_PLATE_POSITION')
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
            
            
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.set_block_temperature(20)


             # Master mix transfers
            final_assembly_lens = []
            for values in final_assembly_dict.values():
                final_assembly_lens.append(len(values))
            unique_assemblies_lens = list(set(final_assembly_lens))
            master_mix_well_letters = ['A', 'B', 'C', 'D']
            
            for x in unique_assemblies_lens:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lens in enumerate(final_assembly_lens) if lens == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type
                    
                    pipette.transfer(TOTAL_VOL - x * PART_VOL, tube_rack.wells(master_mix_well),
                                     destination_plate.wells(destination_well), new_tip='never')#transfer water and buffer in the pipette

            pipette.drop_tip(trash['B1'])

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# magbead_plate.wells and destination_plate.wells in the same type
                    pipette.transfer(PART_VOL, magbead_plate.wells(value),
                                     destination_plate.wells(key), mix_after=MIX_SETTINGS,
                                     new_tip='always')#transfer parts in one tube



            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(105)
            tc_mod.open_lid()

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_purification_2_MRes_purification_ot2_APIv2_19_20241208_055554.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_purification_2_MRes_purification_ot2_APIv2_19_20241208_055554.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,magbead(.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_purification_2_MRes_purification_ot2_APIv2_19_20241208_055554.py:
This script includes the following components:
- Imports: opentrons
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_purification_2_MRes_purification_ot2_APIv2_19_20241208_055554.py:
from opentrons import protocol_api

# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'protocolName': 'DNABOT Step 2: Purification (Flex Protocol)',
     'description': 'Implements magbead purification reactions for BASIC assembly using an opentrons Flex'}
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}




# example values produced by DNA-BOT for a single construct containing 5 parts, un-comment and run to test the template:
#sample_number=8
#ethanol_well='A3'

# __LABWARES and __PARAMETERS are expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}
# __PARAMETERS={"purif_magdeck_height": {"value": 20.0}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5.0}, "purif_settling_time": {"value": 2.0}, "purif_drying_time": {"value": 5.0}, "purif_elution_time": {"value": 2.0}, "transfo_incubation_temp": {"value": 4.0}, "transfo_incubation_time": {"value": 20.0}}

sample_number=6
ethanol_well='A11'
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API verison 2

    def magbead(
            sample_number,
            ethanol_well,
            elution_buffer_well='A1',
            sample_volume=30,
            bead_ratio=__PARAMETERS['purif_bead_ratio']['value'],
            elution_buffer_volume=40,
            incubation_time=__PARAMETERS['purif_incubation_time']['value'],
            settling_time=__PARAMETERS['purif_settling_time']['value'],
                # if using Gen 2 magentic module, need to change time! see: https://docs.opentrons.com/v2/new_modules.html
                # "The GEN2 Magnetic Module uses smaller magnets than the GEN1 version...this means it will take longer for the GEN2 module to attract beads."
                # Recommended Magnetic Module GEN2 bead attraction time:
                    # Total liquid volume <= 50 uL: 5 minutes
                # this template was written with the Gen 1 magnetic module, as it is compatible with API version 2
            drying_time=__PARAMETERS['purif_drying_time']['value'],
            elution_time=__PARAMETERS['purif_elution_time']['value'],
            sample_offset=0,
            tiprack_type=__LABWARES['96_tiprack_300ul']['id']):

        """

        Selected args:
            ethanol_well (str): well in reagent container containing ethanol.
            elution_buffer_well (str): well in reagent container containing elution buffer.
            sample_offset (int): offset the intial sample column by the specified value.

        """


        ### Constants

        # Pipettes
        PIPETTE_ASPIRATE_RATE = 25
        PIPETTE_DISPENSE_RATE = 150
        TIPS_PER_SAMPLE = 9
        PIPETTE_TYPE = __LABWARES['flex_1channel_1000']['id']
            # new constant for easier swapping between pipette types

        # Tiprack
        CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9', '2', '5']

        # Magnetic Module
        MAGDECK_POSITION = '1'

        # Mix Plate
        MIX_PLATE_TYPE = __LABWARES['flex_mix_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
            # also acts as the type of plate loaded onto the magnetic module
        MIX_PLATE_POSITION = '4'

        # Reagents
        REAGENT_CONTAINER_TYPE = __LABWARES['flex_12_reservoir_15ml']['id']
        REAGENT_CONTAINER_POSITION = '7'

        # Beads
        BEAD_CONTAINER_TYPE = __LABWARES['flex_deepwell_plate']['id']
        BEAD_CONTAINER_POSITION = '8'

        # Settings
        LIQUID_WASTE_WELL = 'A5'
        BEADS_WELL = 'A1'
        DEAD_TOTAL_VOL = 5
        SLOW_HEAD_SPEEDS = {'x': 600 // 4, 'y': 400 // 4, 'z': 125 // 10, 'a': 125 // 10}
        DEFAULT_HEAD_SPEEDS = {'x': 400, 'y': 400, 'z': 125, 'a': 100}
        IMMOBILISE_MIX_REPS = 10
        MAGDECK_HEIGHT = __PARAMETERS['purif_magdeck_height']['value']
        AIR_VOL_COEFF = 0.1
        ETHANOL_VOL = 150
        WASH_TIME = __PARAMETERS['purif_wash_time']['value']
        ETHANOL_DEAD_VOL = 50
        ELUTION_MIX_REPS = 20
        ELUTANT_SEP_TIME = 1
        ELUTION_DEAD_VOL = 2


        ### Errors
        if sample_number > 48:
            raise ValueError('sample number cannot exceed 48')


        ### Loading Tiprack

        # Calculates whether one/two/three/four/five tipracks are needed, which are in slots 3, 6, 9, 2, and 5 respectively
        total_tips = sample_number * TIPS_PER_SAMPLE
        tiprack_num = total_tips // 96 + (1 if total_tips % 96 > 0 else 0)
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            # changed to protocol.load_labware for API version 2


        ### Loading Pipettes

        pipette = protocol.load_instrument(PIPETTE_TYPE, mount="left", tip_racks=tipracks)
        pipette.aspirate_flow_rate=PIPETTE_ASPIRATE_RATE
        pipette.dispense_flow_rate=PIPETTE_DISPENSE_RATE
            # for reference: default aspirate/dispense flow rate for flex_8channel_1000 is 94 ul/s

        ### Define Labware

        # Magnetic Module
        MAGDECK = protocol.load_module(__LABWARES['flex_magnetic_block']['id'], location= MAGDECK_POSITION)
            # 'magneticModuleV1' is the gen 1 magnetic module, use 'magneticModuleV2' for the gen 2 magentic module
            # if using gen 2 module, need to change settling time! (see comments under Constants)
        MAGDECK.disengage()
            # disengages the magnets when it is turned on
        mag_plate = MAGDECK.load_labware(MIX_PLATE_TYPE)

        # Mix Plate
        flex_mix_plate = protocol.load_labware(MIX_PLATE_TYPE, MIX_PLATE_POSITION)

        # Reagents
        reagent_container = protocol.load_labware(REAGENT_CONTAINER_TYPE, REAGENT_CONTAINER_POSITION)

        # Beads Container
        bead_container = protocol.load_labware(BEAD_CONTAINER_TYPE, BEAD_CONTAINER_POSITION)


        ### Calculating Columns

        # Total number of columns
        col_num = sample_number // 8 + (1 if sample_number % 8 > 0 else 0)

        # Columns containing samples in location 1 (magentic module)
            # generates a list of lists: [[A1, B1, C1...], [A2, B2, C2...]...]
        samples = [col for col in mag_plate.columns()[sample_offset : col_num + sample_offset]]

        # Columns to mix beads and samples in location 4 (mix plate)
        mixing = [col for col in flex_mix_plate.columns()[sample_offset:col_num + sample_offset]]

        # Columns to dispense output in location 1 (magnetic module)
            # purified parts are dispensed 6 rows to the right of their initial location
            # this is why the number of samples cannot exceed 48

        output = [col for col in mag_plate.columns()[6 + sample_offset:col_num + 6 + sample_offset]]

        ### Defining Wells for Reagents, Liquid Waste, and Beads

        liquid_waste = reagent_container.wells(LIQUID_WASTE_WELL)
        ethanol = reagent_container.wells(ethanol_well)
        elution_buffer = reagent_container.wells(elution_buffer_well)
        beads = bead_container[BEADS_WELL]

        ### Define bead and mix volume
        bead_volume = sample_volume * bead_ratio
        if bead_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = bead_volume / 2
        total_vol = bead_volume + sample_volume + DEAD_TOTAL_VOL


        ### Steps

        # Mix beads and parts
        for target in range(int(len(samples))):

            # Aspirate beads
            pipette.pick_up_tip()
            pipette.aspirate(bead_volume, beads)
            protocol.max_speeds.update(SLOW_HEAD_SPEEDS)

            # Aspirte samples
            pipette.aspirate(sample_volume + DEAD_TOTAL_VOL, samples[target][0])

            # Transfer and mix on flex_mix_plate
            pipette.dispense(total_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.mix(IMMOBILISE_MIX_REPS, mix_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.blow_out()

            # Dispose of tip
            protocol.max_speeds.update(DEFAULT_HEAD_SPEEDS)
            pipette.drop_tip(trash['B1'])

        # Immobilise sample
        protocol.delay(minutes=incubation_time)

        # Transfer beads+samples back to magdeck
        for target in range(int(len(samples))):
            pipette.transfer(total_vol, mixing[target], samples[target], blow_out=True, blowout_location='destination well')
            # added blowout_location=destination well because default location of blowout is waste in API version 2

        # Engagae MagDeck and incubate
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=settling_time)

        # Remove supernatant from magnetic beads
        for target in samples:
            pipette.transfer(total_vol, target, liquid_waste, blow_out=True)

        # Wash beads twice with 70% ethanol
        air_vol = pipette.max_volume * AIR_VOL_COEFF
        for cycle in range(2):
            for target in samples:
                pipette.transfer(ETHANOL_VOL, ethanol, target, air_gap=air_vol)
            protocol.delay(minutes=WASH_TIME)
            for target in samples:
                pipette.transfer(ETHANOL_VOL + ETHANOL_DEAD_VOL, target, liquid_waste, air_gap=air_vol)

        # Dry at room temperature
        protocol.delay(minutes=drying_time)

        # Disengage MagDeck
        MAGDECK.disengage()

        # Mix beads with elution buffer
        if elution_buffer_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = elution_buffer_volume / 2
        for target in samples:
            pipette.transfer(elution_buffer_volume, elution_buffer, target, mix_after=(ELUTION_MIX_REPS, mix_vol))

        # Incubate at room temperature
        protocol.delay(minutes=elution_time)

        # Engage MagDeck (remains engaged for DNA elution)
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=ELUTANT_SEP_TIME)

        # Transfer purified parts to a new well
        for target, dest in zip(samples, output):
            pipette.transfer(elution_buffer_volume - ELUTION_DEAD_VOL, target,
                             dest, blow_out=False)

        # Disengage MagDeck
        MAGDECK.disengage()

    magbead(sample_number=sample_number, ethanol_well=ethanol_well)
    # removed elution buffer well='A1', added that to where the function is defined

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_transformation_4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19_20241208_055554.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_transformation_4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19_20241208_055554.py:
This script defines 0 class(es) and 11 function(s), implementing logic for run(protocol:,generate_transformation_wells(spotting_tuples):,tiprack_slots(spotting_tuples,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_transformation_4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19_20241208_055554.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/first_template_transformation_4_MRes_transformation_ot2_Thermocycler_Gen2_12wellplate_APIv2_19_20241208_055554.py:
# 
"""
Created on Thu Nov 11 14:26:07 2021

@author: gbuldum11

"""

from opentrons import protocol_api
import numpy as np


# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'protocolName': 'DNABOT Step 4: Transformation with thermocycler and 12 wellplate (Flex Protocol)',
     'description': 'Transformation reactions using an opentrons Flex for BASIC assembly.'}
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}


# Example output produced by DNA-BOT for 88 constructs, uncomment and run to test the template
#spotting_tuples=[(('A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'A2', 'B2', 'C2', 'D2'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E2', 'F2', 'G2', 'H2', 'A3', 'B3', 'C3', 'D3', 'E3', 'F3', 'G3', 'H3'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G4', 'H4', 'A5', 'B5', 'C5', 'D5'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E5', 'F5', 'G5', 'H5', 'A6', 'B6', 'C6', 'D6', 'E6', 'F6', 'G6', 'H6'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A7', 'B7', 'C7', 'D7', 'E7', 'F7', 'G7', 'H7', 'A8', 'B8', 'C8', 'D8'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E8', 'F8', 'G8', 'H8', 'A9', 'B9', 'C9', 'D9', 'E9', 'F9', 'G9', 'H9'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('A10', 'B10', 'C10', 'D10', 'E10', 'F10', 'G10', 'H10', 'A11', 'B11', 'C11', 'D11'), ('A1', 'B1', 'C1', 'A2', 'B2', 'C2', 'A3', 'B3', 'C3', 'A4', 'B4', 'C4'), (40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40)), (('E11', 'F11', 'G11', 'H11'), ('A1', 'B1', 'C1', 'A2'), (40, 40, 40, 40))]
#soc_well='A1'


spotting_tuples=[(('A1', 'B1', 'C1', 'D1'), ('A1', 'B1', 'C1', 'D1'), (5, 5, 5, 5))]
soc_well='A1'
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API version 2

    # Constants
    CANDIDATE_p20_SLOTS = ['2', '9']
    CANDIDATE_P300_SLOTS = ['3', '6']
    P20_TIPRACK_TYPE = __LABWARES['96_tiprack_20ul']['id']
    P300_TIPRACK_TYPE = __LABWARES['96_tiprack_300ul']['id']
    P20_MOUNT = 'right'
    P300_MOUNT = 'left'
    ASSEMBLY_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
    ASSEMBLY_PLATE_SLOT = '5'

    TRANSFORMATION_PLATE_TYPE = __LABWARES['transfo_plate']['id']
    SOC_PLATE_TYPE = __LABWARES['flex_deepwell_plate']['id']
    SOC_PLATE_SLOT = '4'
    #Removed the tuberack for waste to have space for more tipracts for 88 assemblies
    #TUBE_RACK_TYPE = 'e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap'
    #TUBE_RACK_SLOT = '11'
    #SPOTTING_WASTE_WELL = 'A1'
    AGAR_PLATE_TYPE = __LABWARES['12_corning_wellplate']['id']


        # custom labware made using Opentron's Labware Creator:
            # external dimensions:
                # footprint length = 127.76 mm
                # footrpint width = 85.48 mm
                # footprint height = 15.70 mm
                # taken from Thermofisher's documentation for Nunc Omnitray
                # https://www.thermofisher.com/document-connect/document-connect.html?url=https%3A%2F%2Fassets.thermofisher.com%2FTFS-Assets%2FLSG%2Fmanuals%2FD03023.pdf&title=VGVjaG5pY2FsIERhdGEgU2hlZXQ6IE51bmMgT21uaXRyYXk=
            # well measurements
                # depth = 0.01 mm
                # diameter =  0.01 mm
                # in old add.labware.py, they were defined as 0, but Labware Creator requires a value >0
            # spacing
                # x-offset = 14.38 mm
                # y-offset = 11.24 mm
                # x-spacing = 9.00 mm
                # y-spacing) = 9.00 mm
                # taken from Nest 96 well plates
                # https://labware.opentrons.com/nest_96_wellplate_100ul_pcr_full_skirt/
        # before using protocol, need to upload the 'nuncomnitray_96_wellplate_0.01ul.json' custom labware file into Opentrons app

    AGAR_PLATE_SLOT = '1'

    

    
    def generate_transformation_wells(spotting_tuples):
        """
        Evaluates spotting_tuples and returns transformation wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """

        wells = []
        for spotting_tuple in spotting_tuples:
            for source_well in spotting_tuple[0]:
                wells.append(source_well)
        transformation_wells = [well for i, well in enumerate(
            wells) if wells.index(well) == i]
        return transformation_wells


    def tiprack_slots(spotting_tuples, max_spot_vol=20):
        """
        Calculates p20 and p300 tiprack slots required.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        # Reactions' number
        transformation_reactions = len(generate_transformation_wells(spotting_tuples))
        spotting_reactions = 0
        for spotting_tuple in spotting_tuples:
            spots = np.array(spotting_tuple[2])/max_spot_vol
            np.ceil(spots)
            spotting_reactions = spotting_reactions + int(np.sum(spots))


        # p20 tiprack slots
        p20_tips = transformation_reactions + spotting_reactions
        p20_tiprack_slots = p20_tips // 96 + 1 if p20_tips % 96 > 0 else p20_tips / 96

        # p300 tiprack slots
        p300_tips = transformation_reactions + spotting_reactions
        p300_tiprack_slots = p300_tips // 96 + \
            1 if p300_tips % 96 > 0 else p300_tips / 96
        return int(p20_tiprack_slots), int(p300_tiprack_slots)


    def transformation_setup(transformation_wells):
        """
        Sets up transformation reactions

        Args:
        transformation_wells (list).

        """

        # Constants
        TEMP = __PARAMETERS['transfo_incubation_temp']['value']  # Incubation temperature.
        ASSEMBLY_VOL = 5  # Volume of final assembly added to competent cells.
        MIX_SETTINGS = (4, 5)  # Mix after setting during final assembly transfers.
        INCUBATION_TIME = __PARAMETERS['transfo_incubation_time']['value']  # Cells and final assembly incubation time.

        #thermocycler module gen2
        tc_mod.set_block_temperature(TEMP, block_max_volume=50)
        protocol.pause(f'Place the competent cells on thermocycler when temperature is {TEMP}°C and resume run')


        # Transfer final assemblies
        p20_pipette.transfer(ASSEMBLY_VOL,
                             [assembly_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             [transformation_plate.wells_by_name()[well_name] for well_name in transformation_wells],
                             new_tip='always',
                             mix_after=(MIX_SETTINGS))


        # Incubate for INCUBATION_TIME minutes 
        protocol.delay(minutes=INCUBATION_TIME)


    def heat_shock():
        tc_mod.set_block_temperature(42, hold_time_seconds=30, block_max_volume=50)
        tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=50)
        

    def phase_switch():
        """
        Function pauses run enabling addition/removal of labware.

        """
        protocol.pause('Remove final assembly plate. Introduce deep well plate containing SOC media. Resume run.')

    def outgrowth(
            cols,
            soc_well):
        """
        Outgrows transformed cells.

        Args:
        cols (list of str): list of cols in transformation plate containing samples.
        soc_well (str): Well containing SOC media in relevant plate.

        """

        # Constants
        SOC_VOL = 100
        SOC_MIX_SETTINGS = (4, 50)
        TEMP = 37
        OUTGROWTH_TIME = 60
        SOC_ASPIRATION_RATE = 25
        P300_DEFAULT_ASPIRATION_RATE = 150

        # Define wells
        transformation_cols = [transformation_plate.columns_by_name()[column] for column in cols]

        soc = soc_plate.wells(soc_well)

        tc_mod.set_block_temperature(20, block_max_volume=150)

        # Add SOC to transformed cells
        p300_pipette.flow_rate.aspirate = SOC_ASPIRATION_RATE
        p300_pipette.transfer(SOC_VOL, soc, transformation_cols,
                              new_tip='always', mix_after=SOC_MIX_SETTINGS)
        p300_pipette.flow_rate.aspirate = P300_DEFAULT_ASPIRATION_RATE

        # Incubate for 1 hour at TEMP °C
        tc_mod.set_block_temperature(TEMP, hold_time_minutes=60, block_max_volume=150)
        protocol.pause('Introduce the agar plate. Resume run')


    def spotting_cols(spotting_tuples):
        """
        Evaluates spotting_tuples and returns unique cols (str) associated with each spotting_tuple's source wells.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).

        """
        cols_list = []
        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            cols_list.append(unique_cols)
        return cols_list


    def spot_transformations(
            spotting_tuples,
            dead_vol=0,
            spotting_dispense_rate= 1,
            stabbing_depth=13,
            max_spot_vol=20):
        """
        Spots transformation reactions.

        Args:
        spotting_tuples (list): Sets of spotting reactions are given in the form: ((source wells), (target wells), (spotting volumes)).
        dead_vol (float): Dead volume aspirated during spotting.
        spotting_dispense_rate (float): Rate p20_pipette dispenses at during spotting.
        stabbing_depth (float): Depth p20_pipette moves into agar during spotting.
        max_spot_vol (float): Maximum volume that is spotted per spot reaction.

        """

        def spot(
                source,
                target,
                spot_vol):
            """
            Spots an individual reaction using the p20 pipette.

            Args:
            source (str): Well containing the transformation reaction to be spotted.
            target (str): Well transformation reaction is to be spotted to.
            spot_vol (float): Volume of transformation reaction to be spotted (uL).

            """

            # Constants
            DEFAULT_HEAD_SPEED = {'x': 400, 'y': 400,'z': 125, 'a': 125}
            SPOT_HEAD_SPEED = {'x': 400, 'y': 400, 'z': 125,'a': 125 // 4}
            DISPENSING_HEIGHT = -5
            SAFE_HEIGHT = 7  # height avoids collision with agar tray.

            # Spot
            #p20_pipette.pick_up_tip() 
            #Removed pick_up command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume
            p20_pipette.aspirate(spot_vol + dead_vol, source[0])
            # old code:
                # p20_pipette.aspirate(spot_vol + dead_vol, source)
                # returned type error because 'source' was a list containing one item (the well location)
                # source[0] takes the location out of the list

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))
            # old code:
                # p20_pipette.move_to(target.top(SAFE_HEIGHT))
                # p20_pipette.move_to(target.top(DISPENSING_HEIGHT))
                # returned attribute error because 'target' was a list containing one item (the well location)
                # target[0] takes the location out of the list

            p20_pipette.dispense(volume=spot_vol, rate=spotting_dispense_rate)

            protocol.max_speeds.update(SPOT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(SPOT_HEAD_SPEED.values()), **SPOT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            p20_pipette.move_to(target[0].top(-1 * stabbing_depth))
            # old code:
                # p20_pipette.move_to(target.top(-1*stabbing_depth))
                # returns attribute error because 'target' was a list containing one item (the well location)
            protocol.max_speeds.update(DEFAULT_HEAD_SPEED)
            # old code:
                # robot.head_speed(combined_speed=max(DEFAULT_HEAD_SPEED.values()), **DEFAULT_HEAD_SPEED)
                # robot.head_speed not used in API version 2
                # replaced with protocol.max_speeds
            # new code no longer uses the lower value between combined speed or specified speed
                # just uses each axis' specified speed directly
            # the code below makes sure that the transformend cells are efficiently reaching to the agar surface

            p20_pipette.move_to(target[0].top(DISPENSING_HEIGHT))

            p20_pipette.blow_out()

            p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
            # old code:
                # p20_pipette.move_to(target[0].top(SAFE_HEIGHT))
                # returns attribute error because 'target' was a list containing one item (the well location)

                # the simple .blow_out command blows out at current position (spotting waste) by defualt
                # unlike blowout=true in complex commands, which by default will blow out in waste

            #p20_pipette.drop_tip(trash['B1'])
            #Removed drop_tip command and move it to spot_tuple function so robot uses the same tip for each transformant until reaches the desired spotting volume

        #Each set of 12 transformants(A1-D2, E2-H3,..) will be spotted in a few rounds (20 microl + 20 microl...). Once the spotting of one column is finished, introduce the new plate and continue.

        def spot_tuple(spotting_tuple):
            """
            Spots all reactions defined by the spotting tuple. Requires the function spot.

            Args:
            spotting_tuple (tuple): Spotting reactions given in the form: (source wells), (target wells), (spotting volumes).
            Each unique source well is resuspended once prior to spotting.

            """
            source_wells = spotting_tuple[0]
            target_wells = spotting_tuple[1]
            spot_vols = list(spotting_tuple[2])
            
            while max(spot_vols) > 0:
                #p20_pipette.pick_up_tip()
                for index, spot_vol in enumerate(spot_vols):
                    spot_times = spot_vols[index]/max_spot_vol
                    p20_pipette.pick_up_tip()
                    for i in range(int(spot_times)):
                        if spot_vol == 0:
                            pass
                        else:
                            vol = spot_vol if spot_vol <= max_spot_vol else max_spot_vol
                            spot(source = transformation_plate.wells(source_wells[index]), target = flex_agar_plate.wells(target_wells[index]), spot_vol = vol)
                            spot_vols[index] = spot_vols[index] - vol*spot_times
                    p20_pipette.drop_tip(trash['B1'])
                    if target_wells[index] == 'C4':
                        protocol.pause('Introduce new well plate. Resume run.')  
                    else:
                        continue                    

        # Constants
        TRANSFORMATION_MIX_SETTINGS = [4, 50]

        # Spot transformation reactions
            # Each unique transformation well is resuspended once prior to spotting.

        for spotting_tuple in spotting_tuples:
            source_wells_cols = [source_well[1:] for source_well in spotting_tuple[0]]
            unique_cols = [col for i, col in enumerate(source_wells_cols) if source_wells_cols.index(col) == i]
            #unique_cols = list(set(source_wells_cols))
            #unique_cols.sort()
            int_unique_cols=list(map(int, unique_cols))
            if len(unique_cols)>1:
              if int_unique_cols[1]%3==0:
                unique_cols.remove(unique_cols[0])
              else:
                pass
            
            for col in unique_cols:
                p300_pipette.pick_up_tip()
                p300_pipette.mix(TRANSFORMATION_MIX_SETTINGS[0], TRANSFORMATION_MIX_SETTINGS[1],transformation_plate.columns_by_name()[col][0])
                p300_pipette.drop_tip(trash['B1'])
            spot_tuple(spotting_tuple)

    # Tiprack slots
    p20_p300_tiprack_slots = tiprack_slots(spotting_tuples)
    p20_slots = CANDIDATE_p20_SLOTS[:p20_p300_tiprack_slots[0]]
    p300_slots = CANDIDATE_P300_SLOTS[:p20_p300_tiprack_slots[1]]

    # Define labware
    p20_tipracks = [protocol.load_labware(P20_TIPRACK_TYPE, slot) for slot in p20_slots]
        # changed to protocol.load_labware for API version 2
    p300_tipracks = [protocol.load_labware(P300_TIPRACK_TYPE, slot) for slot in p300_slots]
        # changed to protocol.load_labware for API version 2
    p20_pipette = protocol.load_instrument(__LABWARES['flex_1channel_50']['id'], P20_MOUNT, tip_racks=p20_tipracks)
        # changed to protocol.load_instrument for API version 2
    p300_pipette = protocol.load_instrument(__LABWARES['flex_1channel_1000']['id'], P300_MOUNT, tip_racks=p300_tipracks)
        # changed to protocol.load_instrument for API version 2

    assembly_plate = protocol.load_labware(ASSEMBLY_PLATE_TYPE, ASSEMBLY_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    transformation_plate = tc_mod.load_labware(TRANSFORMATION_PLATE_TYPE)
        # changed to protocol.load_labware for API version 2
        # removed share=True, not required in API version 2
        # removed TEMPDECK_SLOT as it is loaded directly onto temperature module
    soc_plate = protocol.load_labware(SOC_PLATE_TYPE, SOC_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2
    #tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_SLOT)
        # changed to protocol.load_labware for API version 2
    #spotting_waste = tube_rack.wells(SPOTTING_WASTE_WELL)
    flex_agar_plate = protocol.load_labware(AGAR_PLATE_TYPE, AGAR_PLATE_SLOT)
        # changed to protocol.load_labware for API version 2


    ### Run protocol

    # Register flex_agar_plate for calibration
    p20_pipette.transfer(1, flex_agar_plate.wells('A1'), flex_agar_plate.wells('C4'), trash=False)
    # removed:
        # p20_pipette.start_at_tip(p20_tipracks[0][0])
        # pipette automatically starts from 'A1' tiprack location
        # if re-adding, need to use p20.pipette.starting_tip() instead of p20.pipette.start_at_tip()


    # Run functions
    
    transformation_setup(generate_transformation_wells(spotting_tuples))
    heat_shock()
    phase_switch()
    spotting_tuples_cols = [col for cols in spotting_cols(spotting_tuples) for col in cols]
    unique_cols = [col for i, col in enumerate(spotting_tuples_cols) if spotting_tuples_cols.index(col) == i]
    outgrowth(cols=unique_cols, soc_well=soc_well)
    spot_transformations(spotting_tuples)
    
    print(unique_cols)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/working_template_clip.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/working_template_clip.py:
This script defines 0 class(es) and 5 function(s), implementing logic for run(protocol:,Constants,mix_linkers_function(Mix_linkers_bool,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/working_template_clip.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/templates/working_template_clip.py:
from opentrons import protocol_api
#from mix_functions import mix_linkers_function, mix_parts_function
import numpy as np

# Rename to 'clip_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

#metadata
metadata = {
     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler',
     'description': 'Implements linker ligation reactions using an opentrons Flex, including the thermocycler module gen2.'
}

requirements = {"robotType": "Flex", "apiLevel": "2.19"}
# linkers_volume=20
# parts_volume=20

# example dictionary produced by DNA-BOT for a single construct containing 4 parts, un-comment and run to test the template
# clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
#             "prefixes_plates": ["2", "2", "2", "2"],
#             "suffixes_wells": ["A2", "B2", "C2", "D2"],
#             "suffixes_plates": ["2", "2", "2", "2"],
#             "parts_wells": ["A3", "B3", "C3", "D3"],
#             "parts_plates": ["2", "2", "2", "2"],
#             "parts_vols": [1, 1, 1, 1],
#             "water_vols": [7.0, 7.0, 7.0, 7.0]}

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - values used here for simulation use generic Opentrons definitions to avoid
# specifying custom labware in simulate, which is not straightforward
# custom labware currently commented out
# __LABWARES={
#     #comment in out equipment below for simulate or run    
#     "p20_single": {"id": "p20_single_gen2"}, 
#     "p300_multi": {"id": "p300_multi_gen2"}, 
#     "mag_deck": {"id": "magneticModuleV1"}, 
#     "96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"}, 
#     "96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
#     "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     "mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
#     #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
#     #"mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
#     "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
#     "12_reservoir_21000ul": {"id": "4ti0131_12_reservoir_21000ul"}, 
#     "96_deepwellplate_2ml": {"id": "4ti0136_96_wellplate_2200ul"}}
        
# __PARAMETERS={
#     "clip_keep_thermo_lid_closed": {"id": "No"},
#     "premix_linkers": {"id": 'Yes'},
#     "premix_parts": {"id": 'Yes'},
#     "parts_volume": {"value": 30},
#     "linkers_volume": {"value": 20},
#     "thermo_temp": {"value": 4}
# }

# Parameters for the clip reaction step
# self.user_settings["parameters"]["clip_keep_thermo_lid_closed"]["value"] = to_numeric_value(self.param_clip_thermo_lid_closed.get())


clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], 
            #"prefixes_plates": ["2", "2", "2", "2", "2", "2"], 
            "prefixes_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
            "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], 
            #"suffixes_plates": ["2", "2", "2", "2", "2", "2"], 
            "suffixes_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
            "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], 
            #"parts_plates": ["2", "2", "2", "2", "2", "2"], 
            "parts_plates": ["D2", "D2", "D2", "D2", "D2", "D2"], 
            "parts_vols": [1, 1, 1, 1, 1, 1], 
            "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
__LABWARES={
            #"p20_single": {"id": "p20_single_gen2"}, 
            "p20_single": {"id": "flex_1channel_50"},
            #"p300_multi": {"id": "p300_multi_gen2"}, 
            "p300_multi": {"id": "flex_8channel_50"},  
            #"mag_deck": {"id": "magneticModuleV1"}, 
            "mag_deck": {"id": "magneticBlockV1"},
            #"96_tiprack_20ul": {"id": "opentrons_96_tiprack_20ul"},
            "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
            #"96_tiprack_300ul": {"id": "opentrons_96_tiprack_300ul"},
            "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, 
            #"24_tuberack_1500ul": {"id": "e14151500starlab_24_tuberack_1500ul"}, 
            "24_tuberack_1500ul": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
            #"clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            #"clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            #"mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
            "12_reservoir_21000ul": {"id": "nest_12_reservoir_15ml"}, 
            "96_deepwellplate_2ml": {"id": "nest_96_wellplate_2ml_deep"}, 
            "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"},
            "clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
            "mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
            "clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"}
            }
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, 
              "premix_linkers": {"value": "Yes", "id": "Yes"}, 
              "premix_parts": {"value": "Yes", "id": "Yes"},
              "linkers_volume": {"value": 20}, 
              "parts_volume": {"value": 20}, 
              "thermo_temp": {"value": 4}, 
              #"purif_magdeck_height": {"value": 10.8}, 
              "purif_wash_time": {"value": 0.5}, 
              "purif_bead_ratio": {"value": 1.8}, 
              "purif_incubation_time": {"value": 5}, 
              "purif_settling_time": {"value": 2}, 
              "purif_drying_time": {"value": 5}, 
              "purif_elution_time": {"value": 2}, 
              "transfo_incubation_temp": {"value": 4}, 
              "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):

    ### Constants - these have been moved out of the def clip() for clarity

    #flex need trash bin
    trash = protocol.load_trash_bin("A3")
    #Tiprack
    tiprack_type=__LABWARES['96_tiprack_20ul']['id']
    INITIAL_TIP = 'A1'
    #CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']
    CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']

    # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
    PIPETTE_TYPE = __LABWARES['p20_single']['id']
    PIPETTE_MOUNT = 'right'
        ### Load Pipette
        # checks if it's a P20 Single pipette
    if PIPETTE_TYPE != 'flex_1channel_50':
        print('Define labware must be changed to use', PIPETTE_TYPE)
        exit()
    #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2", location = "B1")
    tc_mod.open_lid()
    tc_mod.deactivate_lid()
    tc_mod.set_block_temperature(temperature=__PARAMETERS['thermo_temp']['value']) 
    # Destination Plates
    DESTINATION_PLATE_TYPE = __LABWARES['clip_plate']['id']
    # Loads destination plate onto thermocycler module gen2
    destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)

    # Source Plates
    SOURCE_PLATE_TYPE = __LABWARES['clip_source_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used

    # Tube Rack
    TUBE_RACK_TYPE = __LABWARES['24_tuberack_1500ul']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
    #TUBE_RACK_POSITION = '4'
    TUBE_RACK_POSITION = '1'
    MASTER_MIX_WELL = 'A1'
    WATER_WELL = 'A2'
    MASTER_MIX_VOLUME = 20

    #choose to enable pre-mix for prefixes/suffixes and parts plate
    #Mix_linkers_bool = __PARAMETERS["premix_linkers"]['id']
    if __PARAMETERS['premix_linkers']['id']=='Yes':
        Mix_linkers_bool=True
    else:
        Mix_linkers_bool = False
    
    if __PARAMETERS['premix_parts']['id']=='Yes':
        Mix_parts_bool=True
    else:
        Mix_parts_bool = False

    def mix_linkers_function(Mix_linkers_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        #pipetting speeds - default rates in ul /s
        pipette.flow_rate.aspirate = 50
        pipette.flow_rate.dispense = 50
        pipette.flow_rate.blow_out = 100
        #pipetting rates below - expressed as multiple of default 
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Linker reagent volume - specify minimum volume in linker wells
        #linker_volume=20
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as linker_vol/2
        if __PARAMETERS['linkers_volume']['value']>40:
            linker_vol=40
        else:
            linker_vol=__PARAMETERS['linkers_volume']['value']

        if Mix_linkers_bool:
            #Extracts lists from clips_dict
            prefixes = []
            loop_prefixes_wells = clips_dict["prefixes_wells"]
            loop_prefixes_plates = clips_dict["prefixes_plates"]
            len_prefixes = len(clips_dict["prefixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_prefixes):
                prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            prefixes_unique = np.unique(np.array(prefixes), axis=0)

            suffixes = []
            loop_suffixes_wells = clips_dict["suffixes_wells"]
            loop_suffixes_plates = clips_dict["suffixes_plates"]
            len_suffixes = len(clips_dict["suffixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_suffixes):
                suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            suffixes_unique = np.unique(np.array(suffixes), axis=0)

            ##Execute the mix 
            # [clip_num,0] addresses the plate location
            # [clip_num,1] addresses the well location
            for clip_num in range(len(prefixes_unique)):  #high = 2.5, normal = 1, slow = 0.5,  vslow = 0.
                pipette.pick_up_tip()
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]], rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(3), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(2), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()

            for clip_num in range(len(suffixes_unique)):  
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is x mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(2), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(2), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
        else:
            pass

    def mix_parts_function(Mix_parts_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Part reagent volume - specify minimum volume in part wells at top of script
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as part_vol/2
    
        if __PARAMETERS['parts_volume']['value']>40:
            part_vol=40
        else:
            part_vol=__PARAMETERS['parts_volume']['value']
        
        if Mix_parts_bool:
            parts = []
            loop_parts_wells = clips_dict["parts_wells"]
            loop_parts_plates = clips_dict["parts_plates"]
            len_parts = len(clips_dict["parts_wells"])

            for i in range(len_parts):
                parts.append([loop_parts_plates[i], loop_parts_wells[i]])

            parts_unique = np.unique(np.array(parts), axis=0)

            for clip_num in range(len(parts_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                protocol.delay(seconds=1)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=slow, push_out=part_vol/20)
                pipette.move_to(source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].top(-5)) # move to 5mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip()
            else:
                pass

    def clip(
            prefixes_wells,
            prefixes_plates,
            suffixes_wells,
            suffixes_plates,
            parts_wells,
            parts_plates,
            parts_vols,
            water_vols):

        ### Calculating number of unique linkers and parts (again) for tip# calculation
        prefixes = []
        loop_prefixes_wells = clips_dict["prefixes_wells"]
        loop_prefixes_plates = clips_dict["prefixes_plates"]
        len_prefixes = len(clips_dict["prefixes_wells"])
        #Creates 2d array of wells and plates
        for i in range(len_prefixes):
            prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
        #Prunes to unique sets of well/plate so duplicates are removed
        #This means any well/plate combination will only be mixed once
        prefixes_unique = np.unique(np.array(prefixes), axis=0)

        suffixes = []
        loop_suffixes_wells = clips_dict["suffixes_wells"]
        loop_suffixes_plates = clips_dict["suffixes_plates"]
        len_suffixes = len(clips_dict["suffixes_wells"])
        for i in range(len_suffixes):
            suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
        suffixes_unique = np.unique(np.array(suffixes), axis=0)

        parts = []
        loop_parts_wells = clips_dict["parts_wells"]
        loop_parts_plates = clips_dict["parts_plates"]
        len_parts = len(clips_dict["parts_wells"])
        for i in range(len_parts):
            parts.append([loop_parts_plates[i], loop_parts_wells[i]])
        parts_unique = np.unique(np.array(parts), axis=0)
        
        # Calculates whether one, two, or three tipracks are needed, which are in slots 3, 6, and 9 respectively
        # loads tipracks
        if Mix_linkers_bool: 
            if Mix_parts_bool:             
                total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique)
        else: 
            if Mix_parts_bool:
                total_tips = (4 * len(parts_wells)) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells))

        letter_dict = {'A': 0, 'B': 1, 'C': 2,
                       'D': 3, 'E': 4, 'F': 5,
                       'G': 6, 'H': 7
                       }
        tiprack_1_tips = (
            13 - int(INITIAL_TIP[1:])) * 8 - letter_dict[INITIAL_TIP[0]]
        if total_tips > tiprack_1_tips:
            tiprack_num = 1 + (total_tips - tiprack_1_tips) // 96 + \
            (1 if (total_tips - tiprack_1_tips) % 96 > 0 else 0)
        else:
            tiprack_num = 1
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]

        # loads the correct number of tipracks
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
  
        # Loads pipette according to constants assigned above
        pipette = protocol.load_instrument(PIPETTE_TYPE, mount=PIPETTE_MOUNT, tip_racks=tipracks)

        # Defines where the destination wells are within the destination plate
        destination_wells = destination_plate.wells()[0:len(parts_wells)]

        ### Load Tube Rack
        # Loads tube rack according to constants assigned above
        tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)

        # Defines positions of master mix and water within the tube rack
        master_mix = tube_rack[MASTER_MIX_WELL]
        water = tube_rack[WATER_WELL]

         ### Loading Source Plates
        # Makes a source plate key for where prefixes, suffixes, and parts are located, according to the dictionary generated by the DNA-BOT
        source_plates = {}
        source_plates_keys = list(set((prefixes_plates + suffixes_plates + parts_plates)))

        # Loads plates according to the source plate key
        for key in source_plates_keys:
            source_plates[key]=protocol.load_labware(SOURCE_PLATE_TYPE, key)
        
        ###Pre-Mixing of Prefixes and Suffixes or Parts

        mix_linkers_function(Mix_linkers_bool, clips_dict, pipette, source_plates)
        mix_parts_function(Mix_parts_bool, clips_dict, pipette, source_plates)

        ### Reset pipette clearance for setting up clip reactions - pipetting small volume into larger volume
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2

        
        # get the location at the center of well A1
        # center_location = plate["A1"].center()

        # # get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))

        # # aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # pipette.aspirate(50, adjusted_location)

        # # dispense at the same location
        # pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
        
        # transfer master mix into destination wells
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 0  # tip is y mm above well bottom        
        pipette.pick_up_tip()
        pipette.distribute(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # transfer water into destination wells
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 3  # tip is y mm above well bottom
        
        pipette.pick_up_tip()
        pipette.distribute(water_vols, water, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
        pipette.drop_tip()

        # OLD transfer prefixes, suffixes, and parts into destination wells     
        #for clip_num in range(len(parts_wells)):
            #pipette.transfer(1, source_plates[prefixes_plates[clip_num]].wells(prefixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(1, source_plates[suffixes_plates[clip_num]].wells(suffixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(parts_vols[clip_num], source_plates[parts_plates[clip_num]].wells(parts_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=PART_MIX_SETTINGS, rate=slow)
        
        #NEW transfer function for prefix, suffix and parts with custom mix parameters
        for clip_num in range(len(parts_wells)):
            pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
            pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
            #Prefix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[prefixes_plates[clip_num]][prefixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Suffix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[suffixes_plates[clip_num]][suffixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()
            #Part Transfer
            pipette.pick_up_tip()
            pipette.aspirate(parts_vols[clip_num], source_plates[parts_plates[clip_num]][parts_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(parts_vols[clip_num], destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(5, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(5, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(10, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(10, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(15, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(15, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip()

    # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
    clip(**clips_dict)
    ### PCR Reaction in Thermocycler

    # close lid and set lid temperature, PCR will not start until lid reaches 37C
    tc_mod.close_lid()
    tc_mod.set_lid_temperature(105)

    # Runs 20 cycles of 37C for 2 minutes and 20C for 1 minute, then holds for 60C for 10 minutes
    profile = [
        {'temperature': 37, 'hold_time_minutes': 2},
        {'temperature': 20, 'hold_time_minutes': 1}]
    tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=30)
    tc_mod.set_block_temperature(60, hold_time_minutes=10, block_max_volume=30)
    tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
    
    
    #Q Does block_max_volume define total volume in block or individual wells?
    #Thermo lid at end of reaction
    if __PARAMETERS['clip_keep_thermo_lid_closed']['id']=='Yes':
        Thermo_lid_bool=True
    else:
        Thermo_lid_bool = False

    if Thermo_lid_bool:
        tc_mod.deactivate_lid()
        tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
        # Temperature will be maintained even after the end of the script
    else:
        tc_mod.set_lid_temperature(37)
        tc_mod.open_lid()
         #output command actions in simulate
        for line in protocol.commands(): 
            print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transform.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transform.py:
This script defines 2 class(es) and 19 function(s), implementing logic for GenericTransformer:,class,__init__(self,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transform.py:
This script includes the following components:
- Imports: os,re sys,yaml json,yaml stat,black pathlib
- Classes:
  - Class 'GenericTransformer:': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transform.py:
import os
import re
import sys
import yaml
import json
import yaml
import stat
from black import FileMode, format_str
from pathlib import Path

class GenericTransformer:
    """
    A class to handle generic transformations between OT-2 and Flex scripts using YAML-based configurations.
    """

    def __init__(self, map_file):
        """
        Initialize the transformer with a given YAML configuration file.

        Parameters:
            map_file (str): Path to the YAML configuration file.

        Raises:
            FileNotFoundError: If the specified YAML file does not exist.
            ValueError: If the YAML file cannot be loaded or is invalid.
        """
        self.map_file = Path(map_file).resolve()  # Resolve to absolute path
        if not self.map_file.exists():
            raise FileNotFoundError(f"Configuration file '{self.map_file.name}' not found.")

        try:
            with (self.map_file).open("r") as file:
                self.map = yaml.safe_load(file)
                if not isinstance(self.map, dict):
                    raise ValueError(f"Configuration file '{self.map_file}' is not valid YAML.")
        except yaml.YAMLError as e:
            raise ValueError(f"Error parsing YAML file '{self.map_file}': {e}")
        
    def prepare_robot_environment(self, direction, yaml_file="configs/robot_config.yaml"):
        """
        Prepare the robot environment by creating or validating required files based on the directionality switch.
        Parameters:
            direction (str): Directionality switch. Use '-of' for Flex and '-fo' for OT-2.
            yaml_file (str): Path to the YAML configuration file.
        """
        # Determine robot type based on the directionality switch
        if direction == "-of":
            robot_type = "flex"
        elif direction == "-fo":
            robot_type = "ot2"
        else:
            raise ValueError(f"Invalid directionality switch: {direction}. Use '-of' for Flex or '-fo' for OT-2.")

        # Load the YAML configuration
        with open(yaml_file, "r") as f:
            config_data = yaml.safe_load(f)

        # Extract the robot configuration
        robot_config = config_data["robot_settings"][robot_type]

        # Dynamically determine the home directory for `.opentrons` files
        base_path = os.path.expanduser("~/.opentrons")
        data_path = os.path.expanduser("~/data")

        # Define files to be generated
        required_files = {
            "belt_calibration.json": {
                "path": os.path.join(base_path, "belt_calibration.json"),
                "content": {
                    "robot_model": robot_config["robot_model"],
                    "calibrations": robot_config["calibrations"].get("belt", {})
                }
            },
            "deck_calibration.json": {
                "path": os.path.join(base_path, "deck_calibration.json"),
                "content": {
                    "robot_model": robot_config["robot_model"],
                    "calibrations": robot_config["calibrations"].get("deck", {})
                }
            },
            "robot_settings.json": {
                "path": os.path.join(base_path, "robot_settings.json"),
                "content": {
                    "robot_model": robot_config["robot_model"],
                    "settings": robot_config.get("settings", {})
                }
            },
            "pressure_sensor_data.csv": {
                "path": os.path.join(data_path, "pressure_sensor_data.csv"),
                "content": "\n".join(
                    [f'{entry["timestamp"]},{entry["pressure"]}' for entry in config_data["pressure_sensor_data"]]
                )
            }
        }

        # Create missing files or skip existing ones
        for file_name, details in required_files.items():
            file_path = details["path"]
            content = details["content"]

            if os.path.exists(file_path):
                print(f"{file_name} already exists at {file_path}. Skipping...")
                continue  # Skip existing files

            # Create missing files
            print(f"{file_name} is missing for {robot_type}. Creating a default file...")
            os.makedirs(os.path.dirname(file_path), exist_ok=True)

            try:
                # Create JSON or CSV files
                if file_name.endswith(".json"):
                    with open(file_path, "w") as f:
                        json.dump(content, f, indent=4)
                elif file_name.endswith(".csv"):
                    with open(file_path, "w") as f:
                        f.write(content)

                print(f"{file_name} created successfully at {file_path}.")
            except Exception as e:
                print(f"Error creating {file_name} for {robot_type}: {e}")

    def setup_deck(self, script, reverse=False):
        """
        Dynamically insert labware and module setup into the script using the deckSetup from YAML.
        Supports dynamic slot mappings and handles each section separately.
        """
        deck_setup = self.map.get("deckSetup", {})
        robot_type = "ot2" if reverse else "flex"

        # Handle trash setup
        trash_config = deck_setup.get("trash", {})
        self._handle_trash(script, trash_config, robot_type)

        # Handle tipracks
        tipracks_config = deck_setup.get("tipracks", {})
        self._handle_tipracks(script, tipracks_config, robot_type)

        # Handle tuberacks
        tuberacks_config = deck_setup.get("tuberacks", {})
        self._handle_tuberacks(script, tuberacks_config, robot_type)

        # Handle thermocycler
        thermocycler_config = deck_setup.get("thermocycler", {})
        self._handle_thermocycler(script, thermocycler_config)

        # Handle magnetic block
        magnetic_block_config = deck_setup.get("magnetic_block", {})
        self._handle_magnetic_block(script, magnetic_block_config, robot_type)

        # Handle custom files
        custom_files = self.map.get("customFiles", [])
        self._handle_custom_files(script, custom_files)

        return script

    def _handle_trash(self, script, config, robot_type):
        """
        Handle trash setup dynamically.
        """
        slot = self.get_slot(config.get("slot"), robot_type)
        setup_code = config.get("setup_code", "").format(slot=slot)
        if setup_code and not re.search(re.escape(setup_code), script):
            script = re.sub(
                r"(protocol\.comment\('Gripper required for labware transfer'\))",
                rf"{setup_code}\n    \1",
                script
            )

    def _handle_tipracks(self, script, config, robot_type):
        """
        Handle tipracks setup dynamically.
        """
        for slot, location in config.get("slot", {}).items():
            setup_code = f"tiprack_{slot} = protocol.load_labware('opentrons_flex_96_tiprack_50ul', '{location}')"
            if not re.search(re.escape(setup_code), script):
                script = re.sub(
                    r"(protocol\.comment\('Gripper required for labware transfer'\))",
                    rf"{setup_code}\n    \1",
                    script
                )

    def _handle_tuberacks(self, script, config, robot_type):
        """
        Handle tuberacks setup dynamically.
        """
        for name, rack_config in config.items():
            slot = self.get_slot(rack_config.get("slot"), robot_type)
            setup_code = f"{name} = protocol.load_labware('opentrons_24_tuberack_nest_1.5ml_snapcap', '{slot}')"
            if not re.search(re.escape(setup_code), script):
                script = re.sub(
                    r"(protocol\.comment\('Gripper required for labware transfer'\))",
                    rf"{setup_code}\n    \1",
                    script
                )
    def _handle_thermocycler(self, script, config):
        """
        Handle thermocycler setup and configuration dynamically.
        """
        if not config:
            return
        name = next(iter(config.get("name", {}).values()), "thermocyclerModuleV2")
        setup_code = f"tc_mod = protocol.load_module('{name}')"
        if not re.search(re.escape(setup_code), script):
            script = re.sub(
                r"(protocol\.comment\('Gripper required for labware transfer'\))",
                rf"{setup_code}\n    \1",
                script
            )
        # Configure thermocycler settings
        script += f"\n    tc_mod.set_lid_temperature({config['lid_temperature']})"
        script += f"\n    tc_mod.set_block_temperature({config['block_temperature']})"
        if "pcr_profile" in config:
            pcr_profile = config["pcr_profile"]
            script += "\n    tc_mod.execute_profile(steps={steps}, repetitions={reps})".format(
                steps=pcr_profile["steps"], reps=pcr_profile["repetitions"]
            )
        if "post_pcr" in config:
            post_pcr = config["post_pcr"]
            script += f"\n    tc_mod.set_block_temperature({post_pcr['temperature']}, hold_time_minutes={post_pcr['hold_time_minutes']})"
    
    def _handle_magnetic_block(self, script, config, robot_type):
        """
        Handle magnetic block setup dynamically.
        """
        slot = self.get_slot(config.get("slot"), robot_type)
        name = next(iter(config.get("name", {}).values()), "magneticModuleV1")
        setup_code = f"mag_mod = protocol.load_module('{name}', '{slot}')"
        if not re.search(re.escape(setup_code), script):
            script = re.sub(
                r"(protocol\.comment\('Gripper required for labware transfer'\))",
                rf"{setup_code}\n    \1",
                script
            )
#
    def _handle_custom_files(self, script, custom_files):
        """
        Handle loading custom labware definitions dynamically.
        """
        for custom_file in custom_files:
            path = custom_file.get("path")
            variable = custom_file.get("variable")
            if path and variable:
                setup_code = f"{variable} = protocol.load_labware_from_definition_file('{path}')"
                if not re.search(re.escape(setup_code), script):
                    script = re.sub(
                        r"(protocol\.comment\('Gripper required for labware transfer'\))",
                        rf"{setup_code}\n    \1",
                        script
                    )

    def get_slot(self, slot_mapping, robot_type):
        """
        Retrieve the appropriate slot from a 'key: value' style mapping.
        """
        if not slot_mapping or not isinstance(slot_mapping, dict):
            raise ValueError("Invalid slot mapping format in YAML.")
        return next((slot_mapping[k] if robot_type == "flex" else k for k in slot_mapping), None)


    def apply_metadata_and_requirements(self, script, reverse=False):
        """
        Update metadata dynamically for Flex to OT-2 and OT-2 to Flex transformations.
        """
        # Determine the suffix based on the transformation direction
        suffix = " (OT-2 Protocol)" if reverse else " (Flex Protocol)"

        # Extract the original description
        current_description_match = re.search(r"'description':\s*'(.*?)'", script)
        current_description = current_description_match.group(1) if current_description_match else "Simulate a Clip Reaction"

        if reverse:  # Flex to OT-2
            # Extract apiLevel from the metadata or set a default
            current_api_level_match = re.search(r"'apiLevel':\s*'([0-9.]+)'", script)
            api_level = current_api_level_match.group(1) if current_api_level_match else "2.15"

            # Remove requirements if they exist
            script = re.sub(r"requirements = {.*?}\n", "", script, flags=re.DOTALL)

            # Append suffix to protocolName
            script = re.sub(
                r"'protocolName':\s*'([^']+)'",  # Match the protocolName
                r"'protocolName': '\1" + suffix + r"'",  # Preserve name and append suffix
                script
            )

            # Update the description
            updated_description = current_description.replace("Flex", "OT-2")
            script = re.sub(
                r"'description':\s*'([^']+)'",
                f"'description': '{updated_description}',",
                script
            )

            # Add apiLevel back to metadata
            script = re.sub(
                r"(metadata = {.*?)(})",  # Match metadata content and closing brace
                r"\1    'apiLevel': '" + api_level + r"'\2",  # Insert apiLevel before closing brace
                script,
                flags=re.DOTALL
            )
        else:  # OT-2 to Flex
            # Extract apiLevel from the metadata or set a default
            current_api_level_match = re.search(r"'apiLevel':\s*'([0-9.]+)'", script)
            api_level = current_api_level_match.group(1) if current_api_level_match else "2.19"

            # Remove apiLevel from metadata
            script = re.sub(
                r"'apiLevel':\s*'[^']*'(,?\s*)?",  # Match 'apiLevel': '<value>' optionally followed by a comma and whitespace
                "",
                script
            )

            # Append suffix to protocolName
            script = re.sub(
                r"'protocolName':\s*'([^']+)'",  # Match the protocolName
                r"'protocolName': '\1" + suffix + r"'",  # Preserve name and append suffix
                script
            )

            # Update the description
            updated_description = current_description.replace("OT-2", "Flex")
            script = re.sub(
                r"'description':\s*'([^']+)'",
                f"'description': '{updated_description}'",
                script
            )

            # Dynamically add requirements, including 'robotType': 'Flex'
            script = re.sub(
                r"(metadata = {.*?})",
                r"\1\nrequirements = {\n    'apiLevel': '" + api_level + r"',\n    'robotType': 'Flex'\n}",
                script,
                flags=re.DOTALL
            )

        return script

    def apply_labware_changes(self, script, reverse=False):
        """
        Update labware definitions dynamically using mappings and configuration from the YAML file.
        Handles trash setup and drop_tip behavior dynamically.
        """
        labware_map = self.map["labware"]
        variable_map = self.map.get("variables", {})
        deck_setup = self.map.get("deckSetup", {})
        trash_config = deck_setup.get("trash", {})
        trash_variable = trash_config.get("variable", "trash")
        map_to_use = labware_map if not reverse else {v: k for k, v in labware_map.items()}

        # Replace old labware with new labware based on mappings
        for old, new in map_to_use.items():
            script = script.replace(old, new)

        # Replace variable names dynamically
        for old_var, new_var in variable_map.items():
            script = re.sub(rf"\b{old_var}\b", new_var, script)

        # Handle reverse (Flex to OT-2) transformations
        if reverse:
            # Remove trash setup
            trash_pattern = rf"{trash_variable} = protocol\.load_labware\('.*?', '.*?'\)"
            script = re.sub(trash_pattern, "", script)

            # Replace pipette.drop_tip(trash['A1']) with pipette.drop_tip()
            drop_tip_pattern = rf"pipette\.drop_tip\({trash_variable}\['.*?'\]\)"
            script = re.sub(drop_tip_pattern, "pipette.drop_tip()", script)
        else:
            # Handle Flex transformations (add trash setup if missing)
            trash_name = trash_config.get("name")
            trash_slot = trash_config.get("slot", {}).get("flex")
            if trash_name and trash_slot:
                trash_setup = f"{trash_variable} = protocol.load_labware('{trash_name}', '{trash_slot}')"
                if trash_name not in script:
                    script = re.sub(r"(plate_96 = .+)", r"\1\n    " + trash_setup, script)

        return script
    
    def apply_pipette_changes(self, script, reverse=False):
        """
        Update pipette definitions dynamically using YAML mappings.
        """
        pipette_map = self.map["pipettes"]
        map_to_use = pipette_map if not reverse else {v: k for k, v in pipette_map.items()}

        for old, new in map_to_use.items():
            script = script.replace(old, new)
        return script
    
    def apply_variable_change(self, script, reverse=False):
        """
        Update variable names dynamically based on the mappings from the YAML file.
        Handles Flex to OT-2 and OT-2 to Flex transformations.
        """
        variable_ids_map = self.map.get("variable_ids", {})
        variables_map = self.map.get("variables", {})

        # Determine the mapping direction
        mapping = variable_ids_map if not reverse else {v: k for k, v in variable_ids_map.items()}

        # Replace variable names using the mappings
        for old_var, new_var in mapping.items():
            script = re.sub(rf"\b{re.escape(old_var)}\b", new_var, script)

        # Replace other variables (e.g., custom ones defined in "variables" section)
        for old_var, new_var in variables_map.items():
            script = re.sub(rf"\b{re.escape(old_var)}\b", new_var, script)

        return script

    def apply_command_changes(self, script, reverse=False):
        """
        Update command syntax dynamically based on YAML mappings.
        """
        commands_map = self.map.get("commands", {})
        deck_setup = self.map.get("deckSetup", {})
        robot_type = "ot2" if reverse else "flex"

        # Resolve trash configuration
        trash_config = deck_setup.get("trash", {})
        trash_name = trash_config.get("name", "")
        trash_slot = self.get_slot(trash_config.get("slot"), robot_type)
        trash_variable = trash_config.get("variable", "trash")
        drop_tip_location = self.get_slot(trash_config.get("dropTipLocation"), robot_type)

        # Ensure trash setup exists in the script if needed
        trash_setup_code = f"{trash_variable} = protocol.load_labware('{trash_name}', '{trash_slot}')"
        if trash_variable not in script:
            # Standardize indentation
            script = re.sub(
                r"(protocol\.comment\('Gripper required for labware transfer'\))",
                rf"    {trash_setup_code}\n    \1",
                script
            )
        # Handle thermocycler commands separately
        thermocycler_config = deck_setup.get("thermocycler", {})
        script = self._handle_thermocycler_commands(script, thermocycler_config, commands_map, reverse)

        # General command transformations
        for command, details in commands_map.items():
            if command in ["set_block_temperature", "set_lid_temperature"]:
                continue  # Skip thermocycler commands

            from_command = details.get("from", "")
            to_command = details.get("to", "")

            if from_command and to_command:
                if reverse:
                    # Reverse transformation
                    script = re.sub(re.escape(to_command), from_command, script)
                else:
                    # Forward transformation, resolve placeholders dynamically
                    resolved_command = to_command.format(
                        trash_variable=trash_variable,
                        dropTipLocation=drop_tip_location
                    )
                    script = re.sub(re.escape(from_command), resolved_command, script)

        return script

    def _handle_thermocycler_commands(self, script, thermocycler_config, commands_map, reverse):
        """
        Transform thermocycler-specific commands based on YAML mappings with standardized indentation.
        """
        block_temperature = thermocycler_config.get("block_temperature", "")
        lid_temperature = thermocycler_config.get("lid_temperature", "")

        for command in ["set_block_temperature", "set_lid_temperature"]:
            details = commands_map.get(command, {})
            from_command = details.get("from", "")
            to_command = details.get("to", "")

            if from_command and to_command:
                if reverse:
                    # Reverse transformation
                    script = re.sub(re.escape(to_command), from_command, script)
                else:
                    # Standardize indentation for inserted commands
                    resolved_command = to_command.format(
                        block_temperature=block_temperature,
                        lid_temperature=lid_temperature
                    )
                    script = re.sub(re.escape(from_command), f"{resolved_command}", script)

        return script
    
    def fix_indentation_with_black(self, script):
        """
        Use black to reformat the script, ensuring consistent indentation.
        """
        if not isinstance(script, str):
            raise ValueError("Expected script content to be a string.")
        return format_str(script, mode=FileMode())
        
    def transform(self, input_file, output_file, reverse=False):
        """
        Transform the script based on the direction.
        """
        # Get the script's directory
        script_dir= str(Path(__file__).parent)
        # Resolve full paths for input and output files
        input_file_path = f"{script_dir}/{input_file}"
        output_file_path = f"{script_dir}/{output_file}"
        input_file_path = Path(input_file_path)
        output_file_path = Path(output_file_path)


        # Check if the input file exists
       # input_file_path = Path(input_file)  # Convert string to Path
        if not input_file_path.exists():
            print(f"Error: {input_file_path.name} does not exist at {(input_file_path.resolve())._str}")
            return
        
        # Read the input file
        try:
            with input_file_path.open("r") as infile:
                script = infile.read()
        except Exception as e:
            print(f"Error reading input file '{input_file_path.name}': {e}")
            return
    
        # Ensure necessary files exist and are valid
        direction = "-of" if not reverse else "-fo"
        #self.prepare_robot_environment(direction)

        # Apply transformations
        try:
            script = self.setup_deck(script, reverse)
            script = self.apply_metadata_and_requirements(script, reverse)
            script = self.apply_labware_changes(script, reverse)
            script = self.apply_pipette_changes(script, reverse)
            script = self.apply_command_changes(script, reverse)
            script = self.apply_variable_change(script, reverse)
            #  validate and fix inconsistent indentation
            #script = self.fix_indentation_with_black(script)  # Use autopep8
        except Exception as e:
            print(f"Error during transformation: {e}")
            return
        
        # Write the transformed script to the output file
        try:
            output_file_path.parent.mkdir(parents=True, exist_ok=True)  # Ensure output directory exists
            with output_file_path.open("w") as outfile:
                outfile.write(script)
            print(f"Transformation complete! Saved to '{output_file_path.resolve()}'")
        except Exception as e:
            print(f"Error writing output file '{output_file_path.name}': {e}")
        print(f"Transformation complete! Saved to {(output_file_path.resolve())._str}")

if __name__ == "__main__":
    import sys
    from pathlib import Path

    def print_usage_and_exit():
        print("Usage: python transform.py --reaction <clip|purification|assembly|transformation> <direction: -of|-fo> <input_script.py> <output_script.py>")
        sys.exit(1)

    # Ensure sufficient arguments are provided
    if len(sys.argv) != 6 or "--reaction" not in sys.argv:
        print_usage_and_exit()

    # Extract and validate arguments
    try:
        reaction_index = sys.argv.index("--reaction")
        reaction = sys.argv[reaction_index + 1]
        if reaction not in ["clip", "purification", "assembly", "transformation"]:
            raise ValueError(f"Invalid reaction type: '{reaction}'.")

        # Extract remaining arguments explicitly
        direction = sys.argv[reaction_index + 2]
        input_script = sys.argv[reaction_index + 3]
        output_script = sys.argv[reaction_index + 4]

        if direction not in ["-of", "-fo"]:
            raise ValueError(f"Invalid direction: '{direction}'. Use '-of' or '-fo'.")

        # Validate YAML, input, and output paths
        yaml_file = Path(f"configs/{reaction}.yaml").resolve(strict=True)
        input_script_path = Path(input_script).resolve(strict=True)
        output_script_path = Path(output_script).resolve(strict=False)

        if not yaml_file.exists():
            raise FileNotFoundError(f"YAML file '{yaml_file}' for reaction '{reaction}' not found.")
        if not input_script_path.exists():
            raise FileNotFoundError(f"Input script file '{input_script}' not found.")
        if not output_script_path.parent.exists():
            raise FileNotFoundError(f"Output script directory '{output_script_path.parent}' does not exist.")

        # Instantiate the transformer
        transformer = GenericTransformer(yaml_file)

    except (ValueError, FileNotFoundError) as e:
        print(f"Error: {e}")
        print_usage_and_exit()

    # Perform transformation based on the direction
    try:
        if direction == "-of":
            transformer.transform(input_script, output_script, reverse=False)
        elif direction == "-fo":
            transformer.transform(input_script, output_script, reverse=True)
    except Exception as e:
        print(f"Error during transformation: {e}")
        sys.exit(1)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_MRes_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler Gen2 (Flex Protocol)',
    'description': 'DNABOT Step 3: Assembly with thermocycler Gen2',
    }
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}
# Construct assemblies are set up on thermocycler module gen2 by combining purified clip parts.

# Test dictionary can be used for simulation 3 or 88 assemblies
final_assembly_dict={
 "A1": ['A7', 'B7', 'C7', 'F7','E7'], 
 "B1": ['A7', 'B7', 'D7', 'G7'], 
 "C1": ['A7', 'B7', 'E7', 'H7']
 }
tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - generic labware for simulation
__LABWARES={
     "flex_1channel_50": {"id": "flex_1channel_50"}, 
     #"flex_1channel_1000": {"id": "flex_8channel_1000"}, 
     #"flex_magnetic_block": {"id": "magdeck"},
     "clip_plate":{"id":"armadillo_96_wellplate_200ul_pcr_full_skirt"},
     "final_assembly_plate":{"id":"armadillo_96_wellplate_200ul_pcr_full_skirt"},
     "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
     #"96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, 
     "24_tuberack_2000ul": {"id": "opentrons_24_tuberack_generic_2ml_screwcap"}, 
     #"96_wellplate_200ul_pcr_step_14": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"96_wellplate_200ul_pcr_step_23": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"agar_plate_step_4": {"id": "armadillo_96_wellplate_200ul_pcr_full_skirt"}, 
     #"flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, 
     #"flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}
     #corning_12_wellplate_6.9ml_flat
     }

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], "B1": ["A7", "B7", "C7", "D7", "E7"], "C1": ["A7", "B7", "C7", "F7"], "D1": ["A7", "B7", "C7", "F7"]}
tiprack_num=1
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            CLIP_PLATE_TYPE = __LABWARES['clip_plate']['id']
            CLIP_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['24_tuberack_2000ul']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['flex_1channel_50']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            purified_clip_plate = protocol.load_labware(CLIP_PLATE_TYPE, CLIP_PLATE_POSITION)
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
                  
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.open_lid()
            tc_mod.deactivate_lid()
            tc_mod.set_block_temperature(4)

             # Master mix transfers
            final_assembly_lengths = []
            for values in final_assembly_dict.values():
                final_assembly_lengths.append(len(values))
            unique_assemblies_lengths = list(set(final_assembly_lengths))
            master_mix_well_letters = ['A', 'B', 'C', 'D']

            for x in unique_assemblies_lengths:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lengths in enumerate(final_assembly_lengths) if lengths == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.flow_rate.aspirate = 6
                pipette.flow_rate.dispense = 6
                pipette.flow_rate.blow_out = 15
                high = 2
                normal = 1
                slow = 0.5
                vslow = 0.2
                pipette.well_bottom_clearance.aspirate = 1 
                pipette.well_bottom_clearance.dispense = 2

                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type  
                    pipette.distribute(TOTAL_VOL - x * PART_VOL, tube_rack[master_mix_well], destination_plate[destination_well],blow_out=True, blowout_location="source well", new_tip='never')
                pipette.drop_tip(trash['B1'])

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# purified_clip_plate.wells and destination_plate.wells in the same type
                    #pipette.transfer(PART_VOL, purified_clip_plate.wells(value), destination_plate.wells(key), mix_after=MIX_SETTINGS, new_tip='always')#transfer parts in one tube
                    pipette.pick_up_tip()
                    pipette.well_bottom_clearance.aspirate = 1  # tip is 2 mm above well bottom
                    pipette.well_bottom_clearance.dispense = 2  # tip is 2 mm above well bottom
                    #Prefix Transfer
                    pipette.aspirate(PART_VOL, purified_clip_plate[value].bottom(1), rate=slow)
                    pipette.dispense(PART_VOL, destination_plate[key].bottom(2), rate=slow)
                    #mix after transfer
                    pipette.aspirate(2, destination_plate[key].bottom(1), rate=normal)
                    pipette.dispense(2, destination_plate[key].bottom(3), rate=high)
                    pipette.aspirate(3, destination_plate[key].bottom(2), rate=normal)
                    pipette.dispense(3, destination_plate[key].bottom(1), rate=normal)
                    pipette.aspirate(4, destination_plate[key].bottom(2), rate=slow)
                    pipette.dispense(4, destination_plate[key].bottom(3), push_out=0.5, rate=vslow)
                    pipette.move_to(destination_plate[key].top(-8))
                    pipette.blow_out()
                    pipette.touch_tip(radius=0.6, v_offset=-8, speed=10)
                    pipette.drop_tip(trash['B1'])

            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(105)
            protocol.delay(seconds=120)
            tc_mod.deactivate_lid()
            tc_mod.open_lid()
            tc_mod.set_block_temperature(4)
            #for line in protocol.commands(): 
                #print(line)

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)
    
    #output command actions in simulate
    for line in protocol.commands(): 
       print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,final_assembly(final_assembly_dict,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_assembly_3_assembly_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
from opentrons import protocol_api
import numpy as np
# metadata
metadata = {
    'protocolName': 'DNABOT Step 3: Assembly with thermocycler (Flex Protocol)',
    'description': 'DNABOT Step 3: Assembly with thermocycler',
    }
requirements = {
    'apiLevel': '2.8',
    'robotType': 'Flex'
}

# It is possible to run 88 assemblies with this new module. The heat block module is removed. 
# Assembly reactions is set up on thermocycler module gen2.


# test dictionary can be used for simulation 3 or 88 assemblies
#final_assembly_dict={"A1": ['A7', 'B7', 'C7', 'F7'], "B1": ['A7', 'B7', 'D7', 'G7'], "C1": ['A7', 'B7', 'E7', 'H7']}
#tiprack_num=1

#final_assembly_dict={"A1": ["A7", "G7", "H7", "A8", "B8"], "B1": ["A7", "D8", "E8", "F8", "G8"], "C1": ["A7", "D8", "H7", "H8", "B9"], "D1": ["A7", "C9", "E9", "G9", "B8"], "E1": ["A7", "H9", "B10", "E9", "D10"], "F1": ["A7", "C9", "H8", "F10", "D10"], "G1": ["A7", "C9", "H10", "E8", "B9"], "H1": ["A7", "H9", "F8", "H10", "B11"], "A2": ["A7", "G7", "E8", "B10", "G8"], "B2": ["A7", "G7", "D11", "A8", "B9"], "C2": ["A7", "C9", "E9", "G9", "B9"], "D2": ["A7", "G7", "H7", "H8", "B8"], "E2": ["A7", "F11", "H11", "H7", "B12"], "F2": ["A7", "C9", "H8", "H11", "D10"], "G2": ["A7", "G7", "D11", "A8", "B8"], "H2": ["B7", "F11", "B10", "H10", "B11"], "A3": ["B7", "D8", "H7", "H8", "B8"], "B3": ["B7", "C9", "H10", "G9", "B8"], "C3": ["B7", "D12", "H8", "H11", "B11"], "D3": ["B7", "D12", "E9", "E8", "B8"], "E3": ["B7", "D12", "E9", "E8", "B9"], "F3": ["B7", "H9", "B10", "H10", "D10"], "G3": ["B7", "G7", "D11", "H8", "B8"], "H3": ["B7", "D12", "H10", "G9", "B9"], "A4": ["B7", "F11", "F10", "D11", "B12"], "B4": ["B7", "G7", "H7", "A8", "B9"], "C4": ["B7", "G7", "E8", "B10", "B12"], "D4": ["B7", "H9", "H11", "H7", "G8"], "E4": ["B7", "D8", "E8", "F8", "B12"], "F4": ["B7", "D12", "E9", "G9", "B8"], "G4": ["C7", "H9", "B10", "E9", "B11"], "H4": ["C7", "F11", "B10", "H10", "D10"], "A5": ["C7", "H9", "F8", "E9", "B11"], "B5": ["C7", "D12", "H8", "F10", "B11"], "C5": ["C7", "F11", "F8", "H10", "B11"], "D5": ["C7", "F11", "H11", "H7", "G8"], "E5": ["C7", "D8", "D11", "A8", "B9"], "F5": ["C7", "H9", "H11", "H7", "B12"], "G5": ["C7", "C9", "H10", "G9", "B9"], "H5": ["C7", "H9", "F10", "H7", "G8"], "A6": ["C7", "D12", "A8", "H11", "D10"], "B6": ["C7", "C9", "A8", "H11", "B11"], "C6": ["C7", "F11", "H11", "D11", "B12"], "D6": ["C7", "D8", "E8", "B10", "G8"], "E6": ["C7", "C9", "H8", "H11", "B11"], "F6": ["D7", "D8", "G9", "F8", "G8"], "G6": ["D7", "C9", "A8", "F10", "B11"], "H6": ["D7", "F11", "F10", "H7", "B12"], "A7": ["D7", "C9", "A8", "F10", "D10"], "B7": ["D7", "H9", "F8", "E9", "D10"], "C7": ["D7", "G7", "G9", "F8", "B12"], "D7": ["D7", "D12", "A8", "H11", "B11"], "E7": ["D7", "D12", "H10", "G9", "B8"], "F7": ["D7", "H9", "H11", "D11", "B12"], "G7": ["D7", "C9", "H8", "F10", "B11"], "H7": ["D7", "D8", "D11", "H8", "B8"], "A8": ["D7", "C9", "E9", "E8", "B9"], "B8": ["D7", "H9", "F10", "D11", "G8"], "C8": ["D7", "H9", "H11", "D11", "G8"], "D8": ["D7", "D12", "A8", "F10", "D10"], "E8": ["E7", "G7", "G9", "F8", "G8"], "F8": ["E7", "D12", "A8", "F10", "B11"], "G8": ["E7", "H9", "F10", "D11", "B12"], "H8": ["E7", "D8", "E8", "B10", "B12"], "A9": ["E7", "C9", "E9", "E8", "B8"], "B9": ["E7", "F11", "B10", "E9", "D10"], "C9": ["E7", "D12", "H8", "F10", "D10"], "D9": ["E7", "H9", "B10", "H10", "B11"], "E9": ["E7", "D8", "G9", "F8", "B12"], "F9": ["E7", "F11", "B10", "E9", "B11"], "G9": ["E7", "F11", "F8", "E9", "C11"], "H9": ["E7", "G7", "G9", "B10", "B12"], "A10": ["E7", "D8", "G9", "B10", "B12"], "B10": ["E7", "D8", "D11", "A8", "B8"], "C10": ["E7", "F11", "F10", "H7", "G8"], "D10": ["F7", "F11", "F8", "E9", "D10"], "E10": ["F7", "H9", "F10", "H7", "B12"], "F10": ["F7", "D12", "H10", "E8", "B9"], "G10": ["F7", "C9", "H10", "E8", "B8"], "H10": ["F7", "F11", "F8", "H10", "D10"], "A11": ["F7", "D12", "H10", "E8", "B8"], "B11": ["F7", "G7", "H7", "H8", "B9"], "C11": ["F7", "G7", "G9", "B10", "G8"], "D11": ["F7", "D12", "H8", "H11", "D10"], "E11": ["F7", "D9", "A8", "H11", "D10"], "F11": ["F7", "G7", "D11", "H8", "B9"], "G11": ["F7", "F11", "A12", "D11", "G8"], "H11": ["F7", "D8", "D11", "A9", "B9"]}
#tiprack_num=5

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magdeck"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}

final_assembly_dict={"A1": ["A7", "B7", "C7", "D7", "E7"], 
                     "B1": ["A7", "B7", "C7", "D7", "E7"], 
                     "C1": ["A7", "B7", "C7", "F7"], 
                     "D1": ["A7", "B7", "C7", "F7"]
                     }
tiprack_num=1
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}


def run(protocol: protocol_api.ProtocolContext):

    def final_assembly(final_assembly_dict, tiprack_num, tiprack_type=__LABWARES['96_tiprack_20ul']['id']):
        
            # Constants, we update all the labware name in version 2
            #Tiprack
            CANDIDATE_TIPRACK_SLOTS = ['2', '3', '5', '6', '9']
            PIPETTE_MOUNT = 'right'
            #Plate of sample after  purification
            MAG_PLATE_TYPE = __LABWARES['clip_plate']['id']
            MAG_PLATE_POSITION = '1'
            #Tuberack
            TUBE_RACK_TYPE = __LABWARES['opentrons_24_tuberack_nest_1.5ml_snapcap']['id']
            TUBE_RACK_POSITION = '4'
            #Destination plate
            DESTINATION_PLATE_TYPE = __LABWARES['final_assembly_plate']['id']
            TOTAL_VOL = 15
            PART_VOL = 1.5
            MIX_SETTINGS = (1, 3)
            tiprack_num=tiprack_num+1
            # Errors
            sample_number = len(final_assembly_dict.keys())
            if sample_number > 96:
                raise ValueError('Final assembly nummber cannot exceed 96.')

            slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
            tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            pipette = protocol.load_instrument(__LABWARES['flex_1channel_50']['id'], PIPETTE_MOUNT, tip_racks=tipracks)

            # Define Labware and set temperature
            #magbead_plate = protocol.load_labware(MAG_PLATE_TYPE, MAG_PLATE_POSITION)
            magbead_plate = protocol.load_module(module_name=__LABWARES['flex_magnetic_block']['id'], location = 'MAG_PLATE_POSITION')
            tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)
            
            
            #thermocycler module gen2
            tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
            destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)
            tc_mod.set_block_temperature(20)


             # Master mix transfers
            final_assembly_lens = []
            for values in final_assembly_dict.values():
                final_assembly_lens.append(len(values))
            unique_assemblies_lens = list(set(final_assembly_lens))
            master_mix_well_letters = ['A', 'B', 'C', 'D']
            
            for x in unique_assemblies_lens:
                master_mix_well = master_mix_well_letters[(x - 1) // 6] + str(x - 1)
                destination_inds = [i for i, lens in enumerate(final_assembly_lens) if lens == x]
                destination_wells = np.array([key for key, value in list(final_assembly_dict.items())])
                destination_wells = list(destination_wells[destination_inds])
                
                pipette.pick_up_tip()
                for destination_well in destination_wells:# make tube_rack_wells and destination_plate.wells in the same type
                    
                    pipette.transfer(TOTAL_VOL - x * PART_VOL, tube_rack.wells(master_mix_well),
                                     destination_plate.wells(destination_well), new_tip='never')#transfer water and buffer in the pipette

            pipette.drop_tip(trash['B1'])

            # Part transfers
            for key, values in list(final_assembly_dict.items()):
                for value in values:# magbead_plate.wells and destination_plate.wells in the same type
                    pipette.transfer(PART_VOL, magbead_plate.wells(value),
                                     destination_plate.wells(key), mix_after=MIX_SETTINGS,
                                     new_tip='always')#transfer parts in one tube



            #thermocycler module gen2
            tc_mod.close_lid()
            tc_mod.set_lid_temperature(105)
            tc_mod.set_block_temperature(50, hold_time_minutes=45, block_max_volume=15)
            tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
            # Increase the hold time at 4 C if necessary
            tc_mod.set_lid_temperature(105)
            tc_mod.open_lid()

    final_assembly(final_assembly_dict=final_assembly_dict, tiprack_num=tiprack_num)

#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script defines 0 class(es) and 5 function(s), implementing logic for run(protocol:,Constants,mix_linkers_function(Mix_linkers_bool,.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
This script includes the following components:
- Imports: opentrons,numpy
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_clip_1_clip_ot2_Thermocycler_Gen2_APIv2_19_20241208_060113.py:
from opentrons import protocol_api
#from mix_functions import mix_linkers_function, mix_parts_function
import numpy as np

# Rename to 'clip_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

#metadata
metadata = {
     'protocolName': 'DNABOT Step 1: Clip Reaction with thermocycler (Flex Protocol)',
     'description': 'Implements linker ligation reactions using an opentrons Flex, including the thermocycler module gen2.'
}
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}
# linkers_volume=20
# parts_volume=20

# example dictionary produced by DNA-BOT for a single construct containing 4 parts, un-comment and run to test the template
clips_dict={"prefixes_wells": ["A1", "B1", "C1", "D1"],
            "prefixes_plates": ["2", "2", "2", "2"],
            "suffixes_wells": ["A2", "B2", "C2", "D2"],
            "suffixes_plates": ["2", "2", "2", "2"],
            "parts_wells": ["A3", "B3", "C3", "D3"],
            "parts_plates": ["2", "2", "2", "2"],
            "parts_vols": [1, 1, 1, 1],
            "water_vols": [7.0, 7.0, 7.0, 7.0]}

# __LABWARES is expected to be redefined by "generate_ot2_script" method
# Test dict - values used here for simulation use generic Opentrons definitions to avoid
# specifying custom labware in simulate, which is not straightforward
# custom labware currently commented out
__LABWARES={
    "flex_1channel_50": {"id": "flex_1channel_50"}, 
    "flex_1channel_1000": {"id": "flex_8channel_1000"}, 
    "flex_magnetic_block": {"id": "magdeck"}, 
    "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, 
    "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"},
    "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "opentrons_24_tuberack_nest_1.5ml_snapcap"},
    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    #comment in out equipment below for simulate or run
    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"flex_mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"},
    #"clip_source_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"clip_plate": {"id": "4ti0960rig_96_wellplate_200ul"},
    #"flex_mix_plate": {"id": "4ti0960rig_96_wellplate_200ul"},  
    "agar_plate_step_4": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, 
    "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, 
    "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}
        #BELOW is the code that defines the labwares in the clip script
        # self.user_settings['labwares']['flex_1channel_50']['id'] = self.labware_p10_single_entry.get()
        # self.user_settings['labwares']['flex_1channel_1000']['id'] = self.labware_p300_multi_entry.get()
        # self.user_settings['labwares']['flex_magnetic_block']['id'] = self.labware_mag_deck_entry.get()
        # self.user_settings['labwares']['opentrons_24_tuberack_nest_1.5ml_snapcap']['id'] = self.labware_opentrons_24_tuberack_nest_1.5ml_snapcap_entry.get()
        # self.user_settings['labwares']['96_tiprack_20ul']['id'] = self.labware_96_tiprack_20ul_entry.get()
        # self.user_settings['labwares']['96_tiprack_300ul']['id'] = self.labware_96_tiprack_300ul_entry.get()
        # self.user_settings['labwares']['clip_source_plate']['id'] = self.labware_clip_source_plate_entry.get()
        # self.user_settings['labwares']['clip_plate']['id'] = self.labware_clip_plate_entry.get()
        # self.user_settings['labwares']['flex_mix_plate']['id'] = self.labware_mix_plate_entry.get()
        # self.user_settings['labwares']['final_assembly_plate']['id'] = self.labware_final_assembly_plate_entry.get()
        # self.user_settings['labwares']['transfo_plate']['id'] = self.labware_transfo_plate_entry.get()
        # self.user_settings['labwares']['transfo_plate_wo_thermo']['id'] = self.labware_transfo_plate_wo_thermo_entry.get()
        # self.user_settings['labwares']['flex_agar_plate']['id'] = self.agar_plate_entry.get()
        # self.user_settings['labwares']['flex_12_reservoir_15ml']['id'] = self.labware_12_reservoir_21000ul_entry.get()
        # self.user_settings['labwares']['flex_deepwell_plate']['id'] = self.labware_96_deepwellplate_2ml_entry.get()
        # self.user_settings['labwares']['12_corning_wellplate']['id'] = self.labware_12_corning_wellplate_entry.get()

__PARAMETERS={
    "clip_keep_thermo_lid_closed": {"id": "No"},
    "premix_linkers": {"id": 'Yes'},
    "premix_parts": {"id": 'Yes'},
    "parts_volume": {"value": 30},
    "linkers_volume": {"value": 20},
    "thermo_temp": {"value": 4}
}

# Parameters for the clip reaction step
# self.user_settings["parameters"]["clip_keep_thermo_lid_closed"]["value"] = to_numeric_value(self.param_clip_thermo_lid_closed.get())


clips_dict={"prefixes_wells": ["C1", "A1", "E1", "B2", "D2", "B2"], "prefixes_plates": ["2", "2", "2", "2", "2", "2"], "suffixes_wells": ["B1", "A2", "C2", "E2", "D1", "D1"], "suffixes_plates": ["2", "2", "2", "2", "2", "2"], "parts_wells": ["A3", "B3", "C3", "D3", "E3", "D3"], "parts_plates": ["2", "2", "2", "2", "2", "2"], "parts_vols": [1, 1, 1, 1, 1, 1], "water_vols": [7.0, 7.0, 7.0, 7.0, 7.0, 7.0]}
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):

    ### Constants - these have been moved out of the def clip() for clarity

    #Tiprack
    tiprack_type=__LABWARES['96_tiprack_20ul']['id']
    INITIAL_TIP = 'A1'
    CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9']

    # Pipettes - pipette instructions in a single location so redefining pipette type is simpler
    PIPETTE_TYPE = __LABWARES['flex_1channel_50']['id']
    PIPETTE_MOUNT = 'right'
        ### Load Pipette
        # checks if it's a P20 Single pipette
    if PIPETTE_TYPE != 'flex_1channel_50':
        print('Define labware must be changed to use', PIPETTE_TYPE)
        exit()
    #thermocycler module gen2 - turn off lid and cool plate to reduce evaporation
    tc_mod = protocol.load_module(module_name="thermocyclerModuleV2")
    tc_mod.open_lid()
    tc_mod.deactivate_lid()
    tc_mod.set_block_temperature(temperature=__PARAMETERS['thermo_temp']['value']) 
    # Destination Plates
    DESTINATION_PLATE_TYPE = __LABWARES['clip_plate']['id']
    # Loads destination plate onto thermocycler module gen2
    destination_plate = tc_mod.load_labware(DESTINATION_PLATE_TYPE)

    # Source Plates
    SOURCE_PLATE_TYPE = __LABWARES['clip_source_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used

    # Tube Rack
    TUBE_RACK_TYPE = __LABWARES['opentrons_24_tuberack_nest_1.5ml_snapcap']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
    TUBE_RACK_POSITION = '4'
    MASTER_MIX_WELL = 'A1'
    WATER_WELL = 'A2'
    MASTER_MIX_VOLUME = 20

    # Old Mix settings

    #choose to enable pre-mix for prefixes/suffixes and parts plate
    #Mix_linkers_bool = __PARAMETERS["premix_linkers"]['id']
    if __PARAMETERS['premix_linkers']['id']=='Yes':
        Mix_linkers_bool=True
    else:
        Mix_linkers_bool = False
    
    if __PARAMETERS['premix_parts']['id']=='Yes':
        Mix_parts_bool=True
    else:
        Mix_parts_bool = False

    def mix_linkers_function(Mix_linkers_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        #pipetting speeds - default rates in ul /s
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        #pipetting rates below - expressed as multiple of default 
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Linker reagent volume - specify minimum volume in linker wells
        #linker_volume=20
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as linker_vol/2
        if __PARAMETERS['linkers_volume']['value']>40:
            linker_vol=40
        else:
            linker_vol=__PARAMETERS['linkers_volume']['value']

        if Mix_linkers_bool:
            #Extracts lists from clips_dict
            prefixes = []
            loop_prefixes_wells = clips_dict["prefixes_wells"]
            loop_prefixes_plates = clips_dict["prefixes_plates"]
            len_prefixes = len(clips_dict["prefixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_prefixes):
                prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            prefixes_unique = np.unique(np.array(prefixes), axis=0)

            suffixes = []
            loop_suffixes_wells = clips_dict["suffixes_wells"]
            loop_suffixes_plates = clips_dict["suffixes_plates"]
            len_suffixes = len(clips_dict["suffixes_wells"])
            #Creates 2d array of wells and plates
            for i in range(len_suffixes):
                suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
            #Prunes to unique sets of well/plate so duplicates are removed
            #This means any well/plate combination will only be mixed once
            suffixes_unique = np.unique(np.array(suffixes), axis=0)

            ##Execute the mix 
            # [clip_num,0] addresses the plate location
            # [clip_num,1] addresses the well location
            for clip_num in range(len(prefixes_unique)):
                pipette.pick_up_tip()
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[prefixes_unique[clip_num, 0]][prefixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip(trash['B1'])

            for clip_num in range(len(suffixes_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is x mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=normal)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(linker_vol/2, source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].bottom(linker_vol/10), rate=vslow, push_out=linker_vol/20)
                pipette.move_to(source_plates[suffixes_unique[clip_num, 0]][suffixes_unique[clip_num, 1]].top(-5)) # move to 2mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip(trash['B1'])
        else:
            pass

    def mix_parts_function(Mix_parts_bool, clips_dict, pipette_name, source_plates):
        pipette = pipette_name
        
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        #Part reagent volume - specify minimum volume in part wells at top of script
        #set maximum volume for mixing calculations as 40 as P20 pipette being used
        #maximum linker mix is set as part_vol/2
    
        if __PARAMETERS['parts_volume']['value']>40:
            part_vol=40
        else:
            part_vol=__PARAMETERS['parts_volume']['value']
        
        if Mix_parts_bool:
            parts = []
            loop_parts_wells = clips_dict["parts_wells"]
            loop_parts_plates = clips_dict["parts_plates"]
            len_parts = len(clips_dict["parts_wells"])

            for i in range(len_parts):
                parts.append([loop_parts_plates[i], loop_parts_wells[i]])

            parts_unique = np.unique(np.array(parts), axis=0)

            for clip_num in range(len(parts_unique)):
                pipette.pick_up_tip()
                pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
                pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=high)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=normal)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1), rate=normal)
                pipette.aspirate(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(1.5), rate=slow)
                protocol.delay(seconds=1)
                pipette.dispense(part_vol/2, source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].bottom(part_vol/10), rate=vslow, push_out=part_vol/20)
                pipette.move_to(source_plates[parts_unique[clip_num, 0]][parts_unique[clip_num, 1]].top(-5)) # move to 5mm below the top of current well
                pipette.blow_out()
                pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
                pipette.drop_tip(trash['B1'])
            else:
                pass

    def clip(
            prefixes_wells,
            prefixes_plates,
            suffixes_wells,
            suffixes_plates,
            parts_wells,
            parts_plates,
            parts_vols,
            water_vols):

        ### Calculating number of unique linkers and parts (again) for tip# calculation
        prefixes = []
        loop_prefixes_wells = clips_dict["prefixes_wells"]
        loop_prefixes_plates = clips_dict["prefixes_plates"]
        len_prefixes = len(clips_dict["prefixes_wells"])
        #Creates 2d array of wells and plates
        for i in range(len_prefixes):
            prefixes.append([loop_prefixes_plates[i], loop_prefixes_wells[i]])
        #Prunes to unique sets of well/plate so duplicates are removed
        #This means any well/plate combination will only be mixed once
        prefixes_unique = np.unique(np.array(prefixes), axis=0)

        suffixes = []
        loop_suffixes_wells = clips_dict["suffixes_wells"]
        loop_suffixes_plates = clips_dict["suffixes_plates"]
        len_suffixes = len(clips_dict["suffixes_wells"])
        for i in range(len_suffixes):
            suffixes.append([loop_suffixes_plates[i], loop_suffixes_wells[i]])
        suffixes_unique = np.unique(np.array(suffixes), axis=0)

        parts = []
        loop_parts_wells = clips_dict["parts_wells"]
        loop_parts_plates = clips_dict["parts_plates"]
        len_parts = len(clips_dict["parts_wells"])
        for i in range(len_parts):
            parts.append([loop_parts_plates[i], loop_parts_wells[i]])
        parts_unique = np.unique(np.array(parts), axis=0)
        
        # Calculates whether one, two, or three tipracks are needed, which are in slots 3, 6, and 9 respectively
        # loads tipracks
        if Mix_linkers_bool: 
            if Mix_parts_bool:             
                total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells)) + len(prefixes_unique) + len(suffixes_unique)
        else: 
            if Mix_parts_bool:
                total_tips = (4 * len(parts_wells)) + len(parts_unique)
            else: total_tips = (4 * len(parts_wells))

        letter_dict = {'A': 0, 'B': 1, 'C': 2,
                       'D': 3, 'E': 4, 'F': 5,
                       'G': 6, 'H': 7
                       }
        tiprack_1_tips = (
            13 - int(INITIAL_TIP[1:])) * 8 - letter_dict[INITIAL_TIP[0]]
        if total_tips > tiprack_1_tips:
            tiprack_num = 1 + (total_tips - tiprack_1_tips) // 96 + \
            (1 if (total_tips - tiprack_1_tips) % 96 > 0 else 0)
        else:
            tiprack_num = 1
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]

        # loads the correct number of tipracks
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
  
        # Loads pipette according to constants assigned above
        pipette = protocol.load_instrument(PIPETTE_TYPE, mount=PIPETTE_MOUNT, tip_racks=tipracks)

        # Defines where the destination wells are within the destination plate
        destination_wells = destination_plate.wells()[0:len(parts_wells)]

        ### Load Tube Rack
        # Loads tube rack according to constants assigned above
        tube_rack = protocol.load_labware(TUBE_RACK_TYPE, TUBE_RACK_POSITION)

        # Defines positions of master mix and water within the tube rack
        master_mix = tube_rack[MASTER_MIX_WELL]
        water = tube_rack[WATER_WELL]

         ### Loading Source Plates
        # Makes a source plate key for where prefixes, suffixes, and parts are located, according to the dictionary generated by the DNA-BOT
        source_plates = {}
        source_plates_keys = list(set((prefixes_plates + suffixes_plates + parts_plates)))

        # Loads plates according to the source plate key
        for key in source_plates_keys:
            source_plates[key]=protocol.load_labware(SOURCE_PLATE_TYPE, key)
        
        ###Pre-Mixing of Prefixes and Suffixes or Parts

        mix_linkers_function(Mix_linkers_bool, clips_dict, pipette, source_plates)
        mix_parts_function(Mix_parts_bool, clips_dict, pipette, source_plates)

        ### Reset pipette clearance for setting up clip reactions - pipetting small volume into larger volume
        pipette.flow_rate.aspirate = 6
        pipette.flow_rate.dispense = 6
        pipette.flow_rate.blow_out = 15
        high = 2.5
        normal = 1
        slow = 0.5
        vslow = 0.2
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 1  # tip is y mm above well bottom
        
        # get the location at the center of well A1
        # center_location = plate["A1"].center()

        # # get a location 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # adjusted_location = center_location.move(types.Point(x=1, y=1, z=1))

        # # aspirate 1 mm right, 1 mm back, and 1 mm up from the center of well A1
        # pipette.aspirate(50, adjusted_location)

        # # dispense at the same location
        # pipette.dispense(50, center_location.move(types.Point(x=1, y=1, z=1)))
        
        # transfer master mix into destination wells
                
        pipette.pick_up_tip()
        pipette.transfer(MASTER_MIX_VOLUME, master_mix, destination_wells, blow_out=True, blowout_location='destination well', new_tip='never', rate=slow)
        pipette.drop_tip(trash['B1'])

        # transfer water into destination wells
        pipette.well_bottom_clearance.aspirate = 1  # tip is x mm above well bottom
        pipette.well_bottom_clearance.dispense = 3  # tip is y mm above well bottom
        
        pipette.pick_up_tip()
        pipette.distribute(water_vols, water, destination_wells, blow_out=True, blowout_location='source well', new_tip='never', rate=slow)
        pipette.drop_tip(trash['B1'])

        # OLD transfer prefixes, suffixes, and parts into destination wells     
        #for clip_num in range(len(parts_wells)):
            #pipette.transfer(1, source_plates[prefixes_plates[clip_num]].wells(prefixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(1, source_plates[suffixes_plates[clip_num]].wells(suffixes_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=LINKER_MIX_SETTINGS, rate=slow)
            # pipette.transfer(parts_vols[clip_num], source_plates[parts_plates[clip_num]].wells(parts_wells[clip_num]), destination_wells[clip_num], blow_out=True, blowout_location='destination well', new_tip='always', mix_after=PART_MIX_SETTINGS, rate=slow)
        
        #NEW transfer function for prefix, suffix and parts with custom mix parameters
        for clip_num in range(len(parts_wells)):
            pipette.well_bottom_clearance.aspirate = 2  # tip is 2 mm above well bottom
            pipette.well_bottom_clearance.dispense = 1  # tip is 2 mm above well bottom
            #Prefix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[prefixes_plates[clip_num]][prefixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip(trash['B1'])
            #Suffix Transfer
            pipette.pick_up_tip()
            pipette.aspirate(1, source_plates[suffixes_plates[clip_num]][suffixes_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(1, destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(2, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(2, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(3, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(3, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(4, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(4, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip(trash['B1'])
            #Part Transfer
            pipette.pick_up_tip()
            pipette.aspirate(parts_vols[clip_num], source_plates[parts_plates[clip_num]][parts_wells[clip_num]].bottom(1), rate=slow)
            pipette.dispense(parts_vols[clip_num], destination_wells[clip_num].bottom(3), rate=slow)
            #mix after transfer
            pipette.aspirate(5, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.dispense(5, destination_wells[clip_num].bottom(3), rate=high)
            pipette.aspirate(10, destination_wells[clip_num].bottom(2), rate=normal)
            pipette.dispense(10, destination_wells[clip_num].bottom(1), rate=normal)
            pipette.aspirate(15, destination_wells[clip_num].bottom(2), rate=slow)
            pipette.dispense(15, destination_wells[clip_num].bottom(3), push_out=1, rate=vslow)
            pipette.move_to(destination_wells[clip_num].top(-5))
            pipette.blow_out()
            pipette.touch_tip(radius=0.9, v_offset=-5, speed=10)
            pipette.drop_tip(trash['B1'])

    # the run function will first define the CLIP function, and then run the CLIP function with the dictionary produced by DNA-BOT
    clip(**clips_dict)
    ### PCR Reaction in Thermocycler

    # close lid and set lid temperature, PCR will not start until lid reaches 37C
    tc_mod.close_lid()
    tc_mod.set_lid_temperature(105)

    # Runs 20 cycles of 37C for 2 minutes and 20C for 1 minute, then holds for 60C for 10 minutes
    profile = [
        {'temperature': 37, 'hold_time_minutes': 2},
        {'temperature': 20, 'hold_time_minutes': 1}]
    tc_mod.execute_profile(steps=profile, repetitions=20, block_max_volume=30)
    tc_mod.set_block_temperature(60, hold_time_minutes=10, block_max_volume=30)
    tc_mod.set_block_temperature(4, hold_time_minutes=2, block_max_volume=30)
    
    
    #Q Does block_max_volume define total volume in block or individual wells?
    #Thermo lid at end of reaction
    if __PARAMETERS['clip_keep_thermo_lid_closed']['id']=='Yes':
        Thermo_lid_bool=True
    else:
        Thermo_lid_bool = False

    if Thermo_lid_bool:
        tc_mod.deactivate_lid()
        tc_mod.set_block_temperature(temperature=4)  # The temperature will be held even after this line
        # Temperature will be maintained even after the end of the script
    else:
        tc_mod.set_lid_temperature(105)
        tc_mod.open_lid()
         #output command actions in simulate
        for line in protocol.commands(): 
            print(line)
#########################################
=== START OF ANALYSIS FOR /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.py ===
#########################################
Overview for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.py:
This script defines 0 class(es) and 2 function(s), implementing logic for run(protocol:,magbead(.
---
Summary for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.py:
This script includes the following components:
- Imports: opentrons
- Functions:
  - Function 'run': 
---
Full content for /home/vmuser/projectpro/s5fork/dnabot/dnabot/MRes2024/transformation/transformed_scripts/transformed_purification_2_MRes_purification_ot2_APIv2_19_20241208_060113.py:
from opentrons import protocol_api

# Rename to 'purification_template' and paste into 'template_ot2_scripts' folder in DNA-BOT to use

metadata = {
     'protocolName': 'DNABOT Step 2: Purification (Flex Protocol)',
     'description': 'Implements magbead purification reactions for BASIC assembly using an opentrons Flex'}
requirements = {
    'apiLevel': '2.19',
    'robotType': 'Flex'
}




# example values produced by DNA-BOT for a single construct containing 5 parts, un-comment and run to test the template:
#sample_number=8
#ethanol_well='A3'

# __LABWARES and __PARAMETERS are expected to be redefined by "generate_ot2_script" method
# Test dict
# __LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "96_wellplate_200ul_pcr_step_14": {"id": "4ti0960rig_96_wellplate_200ul"}, "96_wellplate_200ul_pcr_step_23": {"id": "4ti0960rig_96_wellplate_200ul"}, "agar_plate_step_4": {"id": "4ti0960rig_96_wellplate_200ul"}, "flex_12_reservoir_15ml": {"id": "4ti0131_12_reservoir_21000ul"}, "flex_deepwell_plate": {"id": "4ti0136_96_wellplate_2200ul"}}
# __PARAMETERS={"purif_magdeck_height": {"value": 20.0}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5.0}, "purif_settling_time": {"value": 2.0}, "purif_drying_time": {"value": 5.0}, "purif_elution_time": {"value": 2.0}, "transfo_incubation_temp": {"value": 4.0}, "transfo_incubation_time": {"value": 20.0}}

sample_number=6
ethanol_well='A11'
__LABWARES={"flex_1channel_50": {"id": "flex_1channel_50"}, "flex_1channel_1000": {"id": "flex_8channel_1000"}, "flex_magnetic_block": {"id": "magneticModuleV1"}, "96_tiprack_20ul": {"id": "opentrons_flex_96_tiprack_50ul"}, "96_tiprack_300ul": {"id": "opentrons_flex_96_tiprack_1000ul"}, "opentrons_24_tuberack_nest_1.5ml_snapcap": {"id": "e14151500starlab_opentrons_24_tuberack_nest_1.5ml_snapcap"}, "clip_source_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "clip_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_mix_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "final_assembly_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "transfo_plate_wo_thermo": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_agar_plate": {"id": "nest_96_wellplate_100ul_pcr_full_skirt"}, "flex_12_reservoir_15ml": {"id": "nest_12_reservoir_15ml"}, "flex_deepwell_plate": {"id": "nest_96_wellplate_2ml_deep"}, "12_corning_wellplate": {"id": "corning_12_wellplate_6.9ml_flat"}}
__PARAMETERS={"clip_keep_thermo_lid_closed": {"value": "No", "id": "No"}, "premix_linkers": {"value": "Yes", "id": "No"}, "premix_parts": {"value": "Yes", "id": "Yes"}, "linkers_volume": {"value": 20}, "parts_volume": {"value": 20}, "thermo_temp": {"value": 4}, "purif_magdeck_height": {"value": 10.8}, "purif_wash_time": {"value": 0.5}, "purif_bead_ratio": {"value": 1.8}, "purif_incubation_time": {"value": 5}, "purif_settling_time": {"value": 2}, "purif_drying_time": {"value": 5}, "purif_elution_time": {"value": 2}, "transfo_incubation_temp": {"value": 4}, "transfo_incubation_time": {"value": 20}}


def run(protocol: protocol_api.ProtocolContext):
# added run function for API verison 2

    def magbead(
            sample_number,
            ethanol_well,
            elution_buffer_well='A1',
            sample_volume=30,
            bead_ratio=__PARAMETERS['purif_bead_ratio']['value'],
            elution_buffer_volume=40,
            incubation_time=__PARAMETERS['purif_incubation_time']['value'],
            settling_time=__PARAMETERS['purif_settling_time']['value'],
                # if using Gen 2 magentic module, need to change time! see: https://docs.opentrons.com/v2/new_modules.html
                # "The GEN2 Magnetic Module uses smaller magnets than the GEN1 version...this means it will take longer for the GEN2 module to attract beads."
                # Recommended Magnetic Module GEN2 bead attraction time:
                    # Total liquid volume <= 50 uL: 5 minutes
                # this template was written with the Gen 1 magnetic module, as it is compatible with API version 2
            drying_time=__PARAMETERS['purif_drying_time']['value'],
            elution_time=__PARAMETERS['purif_elution_time']['value'],
            sample_offset=0,
            tiprack_type=__LABWARES['96_tiprack_300ul']['id']):

        """

        Selected args:
            ethanol_well (str): well in reagent container containing ethanol.
            elution_buffer_well (str): well in reagent container containing elution buffer.
            sample_offset (int): offset the intial sample column by the specified value.

        """


        ### Constants

        # Pipettes
        PIPETTE_ASPIRATE_RATE = 25
        PIPETTE_DISPENSE_RATE = 150
        TIPS_PER_SAMPLE = 9
        PIPETTE_TYPE = __LABWARES['flex_1channel_1000']['id']
            # new constant for easier swapping between pipette types

        # Tiprack
        CANDIDATE_TIPRACK_SLOTS = ['3', '6', '9', '2', '5']

        # Magnetic Module
        MAGDECK_POSITION = '1'

        # Mix Plate
        MIX_PLATE_TYPE = __LABWARES['flex_mix_plate']['id']
            # modified from custom labware as API 2 doesn't support labware.create anymore, so the old add_labware script can't be used
            # also acts as the type of plate loaded onto the magnetic module
        MIX_PLATE_POSITION = '4'

        # Reagents
        REAGENT_CONTAINER_TYPE = __LABWARES['flex_12_reservoir_15ml']['id']
        REAGENT_CONTAINER_POSITION = '7'

        # Beads
        BEAD_CONTAINER_TYPE = __LABWARES['flex_deepwell_plate']['id']
        BEAD_CONTAINER_POSITION = '8'

        # Settings
        LIQUID_WASTE_WELL = 'A5'
        BEADS_WELL = 'A1'
        DEAD_TOTAL_VOL = 5
        SLOW_HEAD_SPEEDS = {'x': 600 // 4, 'y': 400 // 4, 'z': 125 // 10, 'a': 125 // 10}
        DEFAULT_HEAD_SPEEDS = {'x': 400, 'y': 400, 'z': 125, 'a': 100}
        IMMOBILISE_MIX_REPS = 10
        MAGDECK_HEIGHT = __PARAMETERS['purif_magdeck_height']['value']
        AIR_VOL_COEFF = 0.1
        ETHANOL_VOL = 150
        WASH_TIME = __PARAMETERS['purif_wash_time']['value']
        ETHANOL_DEAD_VOL = 50
        ELUTION_MIX_REPS = 20
        ELUTANT_SEP_TIME = 1
        ELUTION_DEAD_VOL = 2


        ### Errors
        if sample_number > 48:
            raise ValueError('sample number cannot exceed 48')


        ### Loading Tiprack

        # Calculates whether one/two/three/four/five tipracks are needed, which are in slots 3, 6, 9, 2, and 5 respectively
        total_tips = sample_number * TIPS_PER_SAMPLE
        tiprack_num = total_tips // 96 + (1 if total_tips % 96 > 0 else 0)
        slots = CANDIDATE_TIPRACK_SLOTS[:tiprack_num]
        tipracks = [protocol.load_labware(tiprack_type, slot) for slot in slots]
            # changed to protocol.load_labware for API version 2


        ### Loading Pipettes

        pipette = protocol.load_instrument(PIPETTE_TYPE, mount="left", tip_racks=tipracks)
        pipette.aspirate_flow_rate=PIPETTE_ASPIRATE_RATE
        pipette.dispense_flow_rate=PIPETTE_DISPENSE_RATE
            # for reference: default aspirate/dispense flow rate for flex_8channel_1000 is 94 ul/s

        ### Define Labware

        # Magnetic Module
        MAGDECK = protocol.load_module(__LABWARES['flex_magnetic_block']['id'], location= MAGDECK_POSITION)
            # 'magneticModuleV1' is the gen 1 magnetic module, use 'magneticModuleV2' for the gen 2 magentic module
            # if using gen 2 module, need to change settling time! (see comments under Constants)
        MAGDECK.disengage()
            # disengages the magnets when it is turned on
        mag_plate = MAGDECK.load_labware(MIX_PLATE_TYPE)

        # Mix Plate
        flex_mix_plate = protocol.load_labware(MIX_PLATE_TYPE, MIX_PLATE_POSITION)

        # Reagents
        reagent_container = protocol.load_labware(REAGENT_CONTAINER_TYPE, REAGENT_CONTAINER_POSITION)

        # Beads Container
        bead_container = protocol.load_labware(BEAD_CONTAINER_TYPE, BEAD_CONTAINER_POSITION)


        ### Calculating Columns

        # Total number of columns
        col_num = sample_number // 8 + (1 if sample_number % 8 > 0 else 0)

        # Columns containing samples in location 1 (magentic module)
            # generates a list of lists: [[A1, B1, C1...], [A2, B2, C2...]...]
        samples = [col for col in mag_plate.columns()[sample_offset : col_num + sample_offset]]

        # Columns to mix beads and samples in location 4 (mix plate)
        mixing = [col for col in flex_mix_plate.columns()[sample_offset:col_num + sample_offset]]

        # Columns to dispense output in location 1 (magnetic module)
            # purified parts are dispensed 6 rows to the right of their initial location
            # this is why the number of samples cannot exceed 48

        output = [col for col in mag_plate.columns()[6 + sample_offset:col_num + 6 + sample_offset]]

        ### Defining Wells for Reagents, Liquid Waste, and Beads

        liquid_waste = reagent_container.wells(LIQUID_WASTE_WELL)
        ethanol = reagent_container.wells(ethanol_well)
        elution_buffer = reagent_container.wells(elution_buffer_well)
        beads = bead_container[BEADS_WELL]

        ### Define bead and mix volume
        bead_volume = sample_volume * bead_ratio
        if bead_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = bead_volume / 2
        total_vol = bead_volume + sample_volume + DEAD_TOTAL_VOL


        ### Steps

        # Mix beads and parts
        for target in range(int(len(samples))):

            # Aspirate beads
            pipette.pick_up_tip()
            pipette.aspirate(bead_volume, beads)
            protocol.max_speeds.update(SLOW_HEAD_SPEEDS)

            # Aspirte samples
            pipette.aspirate(sample_volume + DEAD_TOTAL_VOL, samples[target][0])

            # Transfer and mix on flex_mix_plate
            pipette.dispense(total_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.mix(IMMOBILISE_MIX_REPS, mix_vol, mixing[target][0])
                # similar to above, added [0] because samples[target] returned a list of every well in column 1 rather than just one well
            pipette.blow_out()

            # Dispose of tip
            protocol.max_speeds.update(DEFAULT_HEAD_SPEEDS)
            pipette.drop_tip(trash['B1'])

        # Immobilise sample
        protocol.delay(minutes=incubation_time)

        # Transfer beads+samples back to magdeck
        for target in range(int(len(samples))):
            pipette.transfer(total_vol, mixing[target], samples[target], blow_out=True, blowout_location='destination well')
            # added blowout_location=destination well because default location of blowout is waste in API version 2

        # Engagae MagDeck and incubate
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=settling_time)

        # Remove supernatant from magnetic beads
        for target in samples:
            pipette.transfer(total_vol, target, liquid_waste, blow_out=True)

        # Wash beads twice with 70% ethanol
        air_vol = pipette.max_volume * AIR_VOL_COEFF
        for cycle in range(2):
            for target in samples:
                pipette.transfer(ETHANOL_VOL, ethanol, target, air_gap=air_vol)
            protocol.delay(minutes=WASH_TIME)
            for target in samples:
                pipette.transfer(ETHANOL_VOL + ETHANOL_DEAD_VOL, target, liquid_waste, air_gap=air_vol)

        # Dry at room temperature
        protocol.delay(minutes=drying_time)

        # Disengage MagDeck
        MAGDECK.disengage()

        # Mix beads with elution buffer
        if elution_buffer_volume / 2 > pipette.max_volume:
            mix_vol = pipette.max_volume
        else:
            mix_vol = elution_buffer_volume / 2
        for target in samples:
            pipette.transfer(elution_buffer_volume, elution_buffer, target, mix_after=(ELUTION_MIX_REPS, mix_vol))

        # Incubate at room temperature
        protocol.delay(minutes=elution_time)

        # Engage MagDeck (remains engaged for DNA elution)
        MAGDECK.engage(height=MAGDECK_HEIGHT)
        protocol.delay(minutes=ELUTANT_SEP_TIME)

        # Transfer purified parts to a new well
        for target, dest in zip(samples, output):
            pipette.transfer(elution_buffer_volume - ELUTION_DEAD_VOL, target,
                             dest, blow_out=False)

        # Disengage MagDeck
        MAGDECK.disengage()

    magbead(sample_number=sample_number, ethanol_well=ethanol_well)
    # removed elution buffer well='A1', added that to where the function is defined

